movie 'D:\csharp\simri\resources\swf\grassfield.swf' {
// flash 9, total frames: 2, frame rate: 10 fps, 800x600 px, compressed

  movieClip 6  {
  }

  movieClip 8  {
  }

  movieClip 10  {
  }

  movieClip 15 MaximizeButton {

    #initclip
      Object.registerClass('MaximizeButton', mx.controls.streamingmedia.FullScreenToggleControl);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 17 MinimizeButton {

    #initclip
      Object.registerClass('MinimizeButton', mx.controls.streamingmedia.FullScreenToggleControl);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 18 FullScreenToggle {

    #initclip
      Object.registerClass('FullScreenToggle', mx.controls.streamingmedia.FullScreenToggle);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 19 Chrome {

    #initclip
      Object.registerClass('Chrome', mx.controls.streamingmedia.Chrome);
    #endinitclip
  }

  movieClip 23  {
  }

  movieClip 24 Defaults {

    #initclip
      Object.registerClass('Defaults', mx.skins.halo.Defaults);
    #endinitclip
  }

  movieClip 25 UIObjectExtensions {

    #initclip
      Object.registerClass('UIObjectExtensions', mx.core.ext.UIObjectExtensions);
    #endinitclip
  }

  movieClip 26 UIObject {

    #initclip
      Object.registerClass('UIObject', mx.core.UIObject);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  button 29 {

    on (keyPress '<Tab>') {
      this.tabHandler();
    }
  }

  movieClip 31 BoundingBox {
  }

  movieClip 32 FocusRect {

    #initclip
      Object.registerClass('FocusRect', mx.skins.halo.FocusRect);
    #endinitclip
  }

  movieClip 33 FocusManager {

    #initclip
      Object.registerClass('FocusManager', mx.managers.FocusManager);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 34 UIComponentExtensions {

    #initclip
      Object.registerClass('UIComponentExtensions', mx.core.ext.UIComponentExtensions);
    #endinitclip
  }

  movieClip 35 UIComponent {

    #initclip
      Object.registerClass('UIComponent', mx.core.UIComponent);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 37  {
  }

  movieClip 39  {
  }

  movieClip 40 MediaDisplay {

    #initclip
      Object.registerClass('MediaDisplay', mx.controls.MediaDisplay);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 42  {
  }

  movieClip 43  {
  }

  movieClip 44  {
  }

  movieClip 46  {
  }

  movieClip 47 HLoadBar {

    #initclip
      Object.registerClass('HLoadBar', mx.controls.streamingmedia.LoadBar);
    #endinitclip
  }

  movieClip 52  {
  }

  movieClip 53  {
  }

  movieClip 54  {
  }

  movieClip 55 HMiniPlayBarTray {

    #initclip
      Object.registerClass('HMiniPlayBarTray', mx.controls.streamingmedia.HMiniPlayBarTray);
    #endinitclip
  }

  movieClip 57  {
  }

  movieClip 58  {
  }

  movieClip 59 HMiniPlayBar {

    #initclip
      Object.registerClass('HMiniPlayBar', mx.controls.streamingmedia.MiniPlayBar);
    #endinitclip

    frame 1 {
      _tray.setWidth(this.getWidth());
    }
  }

  movieClip 60  {
  }

  movieClip 61  {
  }

  movieClip 62  {
  }

  movieClip 63 PlayBarTray {

    #initclip
      Object.registerClass('PlayBarTray', mx.controls.streamingmedia.HPlayBarTray);
    #endinitclip
  }

  movieClip 64  {
  }
  
  // unknown tag 88 length 79
  
  // unknown tag 88 length 79

  movieClip 70  {
  }

  movieClip 72  {
  }

  movieClip 74  {
  }

  movieClip 75 PlayBarThumb {

    #initclip
      Object.registerClass('PlayBarThumb', mx.controls.streamingmedia.PlayBarThumb);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 76 HPlayBar {

    #initclip
      Object.registerClass('HPlayBar', mx.controls.streamingmedia.PlayBar);
    #endinitclip

    frame 1 {
      _tray.setWidth(this.getWidth());
    }
  }

  movieClip 78 Capsule Button - active {
  }

  movieClip 80 icon.skip {
  }

  movieClip 81 ToStart-False-Up {
  }

  movieClip 82 ToEnd-False-Up {
  }

  movieClip 85 BrdrShdw {

    frame 1 {
      mx.skins.ColoredSkinElement.setColorStyle(this, 'shadowColor');
    }
  }

  movieClip 87 BrdrFace {

    frame 1 {
      mx.skins.ColoredSkinElement.setColorStyle(this, 'buttonColor');
    }
  }

  movieClip 88 SimpleButtonDown {
  }

  movieClip 90 BrdrBlk {

    frame 1 {
      mx.skins.ColoredSkinElement.setColorStyle(this, 'borderColor');
    }
  }

  movieClip 91 BrdrHilght {

    frame 1 {
      mx.skins.ColoredSkinElement.setColorStyle(this, 'highlightColor');
    }
  }

  movieClip 92 SimpleButtonIn {
  }

  movieClip 93 SimpleButtonUp {
  }

  movieClip 94 SimpleButton {

    #initclip
      Object.registerClass('SimpleButton', mx.controls.SimpleButton);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 95 Border {

    #initclip
      Object.registerClass('Border', mx.skins.Border);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 96 RectBorder {

    #initclip
      mx.skins.SkinElement.registerElement(mx.skins.RectBorder.symbolName, Object(mx.skins.RectBorder));
      Object.registerClass('RectBorder', mx.skins.halo.RectBorder);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 97 ButtonSkin {

    #initclip
      Object.registerClass('ButtonSkin', mx.skins.halo.ButtonSkin);
    #endinitclip
  }

  movieClip 98 Button {

    #initclip
      Object.registerClass('Button', mx.controls.Button);
    #endinitclip

    frame 1 {
      stop();
    }

    instance of movieClip 94 SimpleButton {

      onClipEvent (initialize) {
        selected = false;
        toggle = false;
        enabled = true;
        visible = true;
        minHeight = 0;
        minWidth = 0;
      }
    }
  }

  movieClip 100 icon.pause {
  }

  movieClip 101 icon.pause-disabled {
  }

  movieClip 103 icon.play {
  }

  movieClip 104 icon.play-disabled {
  }

  movieClip 105 HPlayPauseButton {

    #initclip
      Object.registerClass('HPlayPauseButton', mx.controls.streamingmedia.PlayPauseButton);
    #endinitclip

    frame 1 {
      stop();
    }

    instance of movieClip 98 Button {

      onClipEvent (initialize) {
        icon = '';
        label = 'Button';
        labelPlacement = 'right';
        selected = false;
        toggle = false;
        enabled = true;
        visible = true;
        minHeight = 0;
        minWidth = 0;
      }
    }
  }

  movieClip 107 Capsule Button - press {
  }

  movieClip 108 ToStart-False-Down {
  }

  movieClip 110 Capsule Button - over {
  }

  movieClip 111 ToStart-False-Over {
  }

  movieClip 112 ToStart-False-Disabled {
  }

  movieClip 113 HToStartButton {

    #initclip
      Object.registerClass('HToStartButton', mx.controls.streamingmedia.ToStartButton);
    #endinitclip

    frame 1 {
      stop();
    }

    instance of movieClip 94 SimpleButton {

      onClipEvent (initialize) {
        selected = false;
        toggle = false;
        enabled = true;
        visible = true;
        minHeight = 0;
        minWidth = 0;
      }
    }
  }

  movieClip 114 ToEnd-False-Down {
  }

  movieClip 115 ToEnd-False-Over {
  }

  movieClip 116 ToEnd-False-Disabled {
  }

  movieClip 117 HToEndButton {

    #initclip
      Object.registerClass('HToEndButton', mx.controls.streamingmedia.ToEndButton);
    #endinitclip

    frame 1 {
      stop();
    }

    instance of movieClip 94 SimpleButton {

      onClipEvent (initialize) {
        selected = false;
        toggle = false;
        enabled = true;
        visible = true;
        minHeight = 0;
        minWidth = 0;
      }
    }
  }

  movieClip 118 HButtons {

    frame 1 {
      this.tabEnabled = false;
      this.tabChildren = true;
    }
  }

  movieClip 119  {
  }

  movieClip 120 VolumeControlHandle {

    #initclip
      Object.registerClass('VolumeControlHandle', mx.controls.streamingmedia.VolumeControlHandle);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 122 Mute-False-Up {
  }

  movieClip 124 Loud-False-Up {
  }

  movieClip 126 Mute-False-Down {
  }

  movieClip 128 Mute-False-Over {
  }

  movieClip 129 Mute-False-Disabled {
  }

  movieClip 130 MuteButton {

    #initclip
      Object.registerClass('MuteButton', mx.controls.streamingmedia.MuteButton);
    #endinitclip

    frame 1 {
      stop();
    }

    instance of movieClip 94 SimpleButton {

      onClipEvent (initialize) {
        selected = false;
        toggle = false;
        enabled = true;
        visible = true;
        minHeight = 0;
        minWidth = 0;
      }
    }
  }

  movieClip 132 Loud-False-Down {
  }

  movieClip 134 Loud-False-Over {
  }

  movieClip 135 Loud-False-Disabled {
  }

  movieClip 136 LoudButton {

    #initclip
      Object.registerClass('LoudButton', mx.controls.streamingmedia.LoudButton);
    #endinitclip

    frame 1 {
      stop();
    }

    instance of movieClip 94 SimpleButton {

      onClipEvent (initialize) {
        selected = false;
        toggle = false;
        enabled = true;
        visible = true;
        minHeight = 0;
        minWidth = 0;
      }
    }
  }

  movieClip 138 HVolumeControl {

    #initclip
      Object.registerClass('HVolumeControl', mx.controls.streamingmedia.VolumeControl);
    #endinitclip
  }

  movieClip 139  {
  }

  movieClip 140  {
  }

  movieClip 141 VLoadBar {

    #initclip
      Object.registerClass('VLoadBar', mx.controls.streamingmedia.LoadBar);
    #endinitclip
  }

  movieClip 142  {
  }

  movieClip 143  {
  }

  movieClip 144  {
  }

  movieClip 145 VMiniPlayBarTray {

    #initclip
      Object.registerClass('VMiniPlayBarTray', mx.controls.streamingmedia.VMiniPlayBarTray);
    #endinitclip
  }

  movieClip 146  {
  }

  movieClip 147  {
  }

  movieClip 148 VMiniPlayBar {

    #initclip
      Object.registerClass('VMiniPlayBar', mx.controls.streamingmedia.MiniPlayBar);
    #endinitclip

    frame 1 {
      _tray.setHeight(this.getHeight());
    }
  }

  movieClip 149  {
  }

  movieClip 150  {
  }

  movieClip 151  {
  }

  movieClip 152 VPlayBarTray {

    #initclip
      Object.registerClass('VPlayBarTray', mx.controls.streamingmedia.VPlayBarTray);
    #endinitclip
  }

  movieClip 153  {
  }
  
  // unknown tag 88 length 79

  movieClip 156  {
  }

  movieClip 158  {
  }

  movieClip 160  {
  }

  movieClip 161 VPlayBarThumb {

    #initclip
      Object.registerClass('VPlayBarThumb', mx.controls.streamingmedia.PlayBarThumb);
    #endinitclip

    frame 1 {
      stop();
    }
  }

  movieClip 162 VPlayBar {

    #initclip
      Object.registerClass('VPlayBar', mx.controls.streamingmedia.PlayBar);
    #endinitclip

    frame 1 {
      _tray.setHeight(this.getHeight());
    }
  }

  movieClip 163 VButtons {

    frame 1 {
      this.tabEnabled = false;
      this.tabChildren = true;
    }
  }

  movieClip 164  {
  }

  movieClip 166 VVolumeControl {

    #initclip
      Object.registerClass('VVolumeControl', mx.controls.streamingmedia.VolumeControl);
    #endinitclip
  }

  movieClip 168  {
  }
  
  // unknown tag 88 length 79

  movieClip 170 MediaController {

    #initclip
      Object.registerClass('MediaController', mx.controls.MediaController);
    #endinitclip

    frame 2 {
      _miniPlayBar.setCompletionPercentage(_playPercent);
    }

    frame 3 {
      _playBar.setCompletionPercentage(_playPercent);
    }

    frame 4 {
      _miniPlayBar.setCompletionPercentage(_playPercent);
    }

    frame 5 {
      _playBar.setCompletionPercentage(_playPercent);
    }
  }

  movieClip 171 MediaPlayback {

    #initclip
      Object.registerClass('MediaPlayback', mx.controls.MediaPlayback);
    #endinitclip

    frame 1 {
      stop();
    }

    instance _display of movieClip 40 MediaDisplay {

      onClipEvent (initialize) {
        aspectRatio = true;
        autoPlay = true;
        autoSize = true;
        contentPath = '';
        fps = 30;
        mediaType = 'FLV';
        totalTime = 0;
        enabled = true;
        visible = true;
        minHeight = 0;
        minWidth = 0;
      }
    }

    instance _controller of movieClip 170 MediaController {

      onClipEvent (initialize) {
        activePlayControl = 'play';
        backgroundStyle = 'default';
        controllerPolicy = 'auto';
        horizontal = true;
        enabled = true;
        visible = true;
        minHeight = 0;
        minWidth = 0;
      }
    }
  }

  frame 1 {
    var CNum;
    num2 = 8;
  }

  movieClip 241  {
  }

  movieClip 243  {
  }

  movieClip 245  {
  }

  movieClip 248  {
  }

  movieClip 250  {
  }

  movieClip 252  {
  }

  movieClip 254  {
  }

  movieClip 256  {
  }

  movieClip 258  {
  }

  movieClip 260  {
  }

  movieClip 261  {
  }

  movieClip 262  {
  }

  movieClip 263  {
  }

  movieClip 264  {
  }

  movieClip 265  {
  }

  movieClip 267  {
  }

  movieClip 269  {
  }

  movieClip 271  {
  }

  movieClip 274  {
  }

  movieClip 276  {
  }

  movieClip 278  {
  }

  movieClip 279  {
  }

  movieClip 281  {
  }

  movieClip 284  {
  }

  movieClip 287  {
  }

  movieClip 290  {
  }

  movieClip 293  {
  }

  movieClip 296  {
  }

  movieClip 299  {
  }

  movieClip 302  {
  }

  movieClip 305  {
  }

  movieClip 306  {

    frame 1 {
      _parent.num1 = 1;
    }

    frame 357 {
      _parent.num1 = 2;
    }

    frame 763 {
      _parent.num1 = 3;
    }

    frame 973 {
      _parent.num1 = 4;
    }

    frame 1164 {
      _parent.num1 = 5;
    }

    frame 1600 {
      _parent.num1 = 6;
    }

    frame 2226 {
      _parent.num1 = 7;
    }

    frame 2365 {
      _parent.num1 = 8;
    }

    frame 2945 {
      fscommand('EXIT');
      stop();
    }
  }

  movieClip 311  {
  }

  instance of movieClip 171 MediaPlayback {

    onClipEvent (construct) {
      aspectRatio = true;
      autoPlay = true;
      autoSize = true;
      contentPath = '';
      controllerPolicy = 'on';
      controlPlacement = 'bottom';
      fps = 30;
      mediaType = 'FLV';
      totalTime = 0;
      enabled = true;
      visible = true;
      minHeight = 0;
      minWidth = 0;
    }
  }
  
  // unknown tag 88 length 76

  button 316 {

    on (press) {
      fscommand('Chart');
      trace('Chart');
    }
  }

  button 320 {

    on (release) {
      stopAllSounds();
      _root.CNum = 1000;
      fscommand('Fsend');
    }
  }

  button 327 {

    on (release) {
      _root.GRS.play();
      nextFrame();
    }
  }

  movieClip 329  {

    frame 2 {
      stop();
    }
  }

  button 336 {

    on (release) {
      _root.GRS.stop();
      _root.nextBtn.gotoAndStop(1);
    }
  }

  movieClip 339  {
  }

  movieClip 343  {
  }

  instance of movieClip 171 MediaPlayback {

    onClipEvent (construct) {
      aspectRatio = true;
      autoPlay = true;
      autoSize = true;
      contentPath = '';
      controllerPolicy = 'on';
      controlPlacement = 'bottom';
      fps = 30;
      mediaType = 'FLV';
      totalTime = 0;
      enabled = true;
      visible = true;
      minHeight = 0;
      minWidth = 0;
    }
  }

  movieClip 1 __Packages.mx.core.UIObject {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.core) {
        _global.mx.core = new Object();
      }
      if (!_global.mx.core.UIObject) {
        var v1 = function () {
          super();
          this.constructObject();
        };

        mx.core.UIObject = v1;
        var v2 = new MovieClip();
        mx.core.UIObject.prototype = v2;
        v2.__get__width = function () {
          return this._width;
        };

        v2.__get__height = function () {
          return this._height;
        };

        v2.__get__left = function () {
          return this._x;
        };

        v2.__get__x = function () {
          return this._x;
        };

        v2.__get__top = function () {
          return this._y;
        };

        v2.__get__y = function () {
          return this._y;
        };

        v2.__get__right = function () {
          return this._parent.width - (this._x + this.__get__width());
        };

        v2.__get__bottom = function () {
          return this._parent.height - (this._y + this.__get__height());
        };

        v2.getMinHeight = function (Void) {
          return this._minHeight;
        };

        v2.setMinHeight = function (h) {
          this._minHeight = h;
        };

        v2.__get__minHeight = function () {
          return this.getMinHeight();
        };

        v2.__set__minHeight = function (h) {
          this.setMinHeight(h);
          return this.__get__minHeight();
        };

        v2.getMinWidth = function (Void) {
          return this._minWidth;
        };

        v2.setMinWidth = function (w) {
          this._minWidth = w;
        };

        v2.__get__minWidth = function () {
          return this.getMinWidth();
        };

        v2.__set__minWidth = function (w) {
          this.setMinWidth(w);
          return this.__get__minWidth();
        };

        v2.setVisible = function (x, noEvent) {
          if (x != this._visible) {
            this._visible = x;
            if (noEvent != true) {
              this.dispatchEvent({'type': x ? 'reveal' : 'hide'});
            }
          }
        };

        v2.__get__visible = function () {
          return this._visible;
        };

        v2.__set__visible = function (x) {
          this.setVisible(x, false);
          return this.__get__visible();
        };

        v2.__get__scaleX = function () {
          return this._xscale;
        };

        v2.__set__scaleX = function (x) {
          this._xscale = x;
          return this.__get__scaleX();
        };

        v2.__get__scaleY = function () {
          return this._yscale;
        };

        v2.__set__scaleY = function (y) {
          this._yscale = y;
          return this.__get__scaleY();
        };

        v2.doLater = function (obj, fn) {
          if (this.methodTable == undefined) {
            this.methodTable = new Array();
          }
          this.methodTable.push({'obj': obj, 'fn': fn});
          this.onEnterFrame = this.doLaterDispatcher;
        };

        v2.doLaterDispatcher = function (Void) {
          delete this.onEnterFrame;
          if (this.invalidateFlag) {
            this.redraw();
          }
          var v3 = this.methodTable;
          this.methodTable = new Array();
          if (v3.length > 0) {
            var v2;
            v2 = v3.shift();
            while (v2 != undefined) {
              v2.obj[v2.fn]();
            }
          }
        };

        v2.cancelAllDoLaters = function (Void) {
          delete this.onEnterFrame;
          this.methodTable = new Array();
        };

        v2.invalidate = function (Void) {
          this.invalidateFlag = true;
          this.onEnterFrame = this.doLaterDispatcher;
        };

        v2.invalidateStyle = function (Void) {
          this.invalidate();
        };

        v2.redraw = function (bAlways) {
          if (this.invalidateFlag || bAlways) {
            this.invalidateFlag = false;
            var v2;
            for (v2 in this.tfList) {
              this.tfList[v2].draw();
            }
            this.draw();
            this.dispatchEvent({'type': 'draw'});
          }
        };

        v2.draw = function (Void) {};

        v2.move = function (x, y, noEvent) {
          var v3 = this._x;
          var v2 = this._y;
          this._x = x;
          this._y = y;
          if (noEvent != true) {
            this.dispatchEvent({'type': 'move', 'oldX': v3, 'oldY': v2});
          }
        };

        v2.setSize = function (w, h, noEvent) {
          var v2 = this.__width;
          var v3 = this.__height;
          this.__width = w;
          this.__height = h;
          this.size();
          if (noEvent != true) {
            this.dispatchEvent({'type': 'resize', 'oldWidth': v2, 'oldHeight': v3});
          }
        };

        v2.size = function (Void) {
          this._width = this.__width;
          this._height = this.__height;
        };

        v2.drawRect = function (x1, y1, x2, y2) {
          this.moveTo(x1, y1);
          this.lineTo(x2, y1);
          this.lineTo(x2, y2);
          this.lineTo(x1, y2);
          this.lineTo(x1, y1);
        };

        v2.createLabel = function (name, depth, text) {
          this.createTextField(name, depth, 0, 0, 0, 0);
          var v2 = this[name];
          v2._color = mx.core.UIObject.textColorList;
          v2._visible = false;
          v2.__text = text;
          if (this.tfList == undefined) {
            this.tfList = new Object();
          }
          this.tfList[name] = v2;
          v2.invalidateStyle();
          this.invalidate();
          v2.styleName = this;
          return v2;
        };

        v2.createObject = function (linkageName, id, depth, initobj) {
          return this.attachMovie(linkageName, id, depth, initobj);
        };

        v2.createClassObject = function (className, id, depth, initobj) {
          var v3 = className.symbolName == undefined;
          if (v3) {
            Object.registerClass(className.symbolOwner.symbolName, className);
          }
          var v4 = this.createObject(className.symbolOwner.symbolName, id, depth, initobj);
          if (v3) {
            Object.registerClass(className.symbolOwner.symbolName, className.symbolOwner);
          }
          return v4;
        };

        v2.createEmptyObject = function (id, depth) {
          return this.createClassObject(mx.core.UIObject, id, depth);
        };

        v2.destroyObject = function (id) {
          var v2 = this[id];
          if (v2.getDepth() < 0) {
            var v4 = this.buildDepthTable();
            var v5 = this.findNextAvailableDepth(0, v4, 'up');
            var v3 = v5;
            v2.swapDepths(v3);
          }
          v2.removeMovieClip();
          delete this[id];
        };

        v2.getSkinIDName = function (tag) {
          return this.idNames[tag];
        };

        v2.setSkin = function (tag, linkageName, initObj) {
          if (_global.skinRegistry[linkageName] == undefined) {
            mx.skins.SkinElement.registerElement(linkageName, mx.skins.SkinElement);
          }
          return this.createObject(linkageName, this.getSkinIDName(tag), tag, initObj);
        };

        v2.createSkin = function (tag) {
          var v2 = this.getSkinIDName(tag);
          this.createEmptyObject(v2, tag);
          return this[v2];
        };

        v2.createChildren = function (Void) {};

        v2._createChildren = function (Void) {
          this.createChildren();
          this.childrenCreated = true;
        };

        v2.constructObject = function (Void) {
          if (this._name == undefined) {
            return undefined;
          }
          this.init();
          this._createChildren();
          this.createAccessibilityImplementation();
          this._endInit();
          if (this.validateNow) {
            this.redraw(true);
          } else {
            this.invalidate();
          }
        };

        v2.initFromClipParameters = function (Void) {
          var v4 = false;
          var v2;
          for (v2 in this.clipParameters) {
            if (this.hasOwnProperty(v2)) {
              v4 = true;
              this['def_' + v2] = this[v2];
              delete this[v2];
            }
          }
          if (v4) {
            for (v2 in this.clipParameters) {
              var v3 = this['def_' + v2];
              if (v3 != undefined) {
                this[v2] = v3;
              }
            }
          }
        };

        v2.init = function (Void) {
          this.__width = this._width;
          this.__height = this._height;
          if (this.initProperties == undefined) {
            this.initFromClipParameters();
          } else {
            this.initProperties();
          }
          if (_global.cascadingStyles == true) {
            this.stylecache = new Object();
          }
        };

        v2.getClassStyleDeclaration = function (Void) {
          var v4 = this;
          var v3 = this.className;
          while (v3 != undefined) {
            if (this.ignoreClassStyleDeclaration[v3] == undefined) {
              if (_global.styles[v3] != undefined) {
                return _global.styles[v3];
              }
            }
            v4 = v4.__proto__;
            v3 = v4.className;
          }
        };

        v2.setColor = function (color) {};

        v2.__getTextFormat = function (tf, bAll) {
          var v8 = this.stylecache.tf;
          if (v8 != undefined) {
            var v3;
            for (v3 in mx.styles.StyleManager.TextFormatStyleProps) {
              if (bAll || mx.styles.StyleManager.TextFormatStyleProps[v3]) {
                if (tf[v3] == undefined) {
                  tf[v3] = v8[v3];
                }
              }
            }
            return false;
          }
          var v6 = false;
          for (v3 in mx.styles.StyleManager.TextFormatStyleProps) {
            if (bAll || mx.styles.StyleManager.TextFormatStyleProps[v3]) {
              if (tf[v3] == undefined) {
                var v5 = this._tf[v3];
                if (v5 != undefined) {
                  tf[v3] = v5;
                } else {
                  if (v3 == 'font' && this.fontFamily != undefined) {
                    tf[v3] = this.fontFamily;
                  } else {
                    if (v3 == 'size' && this.fontSize != undefined) {
                      tf[v3] = this.fontSize;
                    } else {
                      if (v3 == 'color' && this.color != undefined) {
                        tf[v3] = this.color;
                      } else {
                        if (v3 == 'leftMargin' && this.marginLeft != undefined) {
                          tf[v3] = this.marginLeft;
                        } else {
                          if (v3 == 'rightMargin' && this.marginRight != undefined) {
                            tf[v3] = this.marginRight;
                          } else {
                            if (v3 == 'italic' && this.fontStyle != undefined) {
                              tf[v3] = this.fontStyle == v3;
                            } else {
                              if (v3 == 'bold' && this.fontWeight != undefined) {
                                tf[v3] = this.fontWeight == v3;
                              } else {
                                if (v3 == 'align' && this.textAlign != undefined) {
                                  tf[v3] = this.textAlign;
                                } else {
                                  if (v3 == 'indent' && this.textIndent != undefined) {
                                    tf[v3] = this.textIndent;
                                  } else {
                                    if (v3 == 'underline' && this.textDecoration != undefined) {
                                      tf[v3] = this.textDecoration == v3;
                                    } else {
                                      if (v3 == 'embedFonts' && this.embedFonts != undefined) {
                                        tf[v3] = this.embedFonts;
                                      } else {
                                        v6 = true;
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v6) {
            var v9 = this.styleName;
            if (v9 != undefined) {
              if (typeof v9 != 'string') {
                v6 = v9.__getTextFormat(tf, true, this);
              } else {
                if (_global.styles[v9] != undefined) {
                  v6 = _global.styles[v9].__getTextFormat(tf, true, this);
                }
              }
            }
          }
          if (v6) {
            var v10 = this.getClassStyleDeclaration();
            if (v10 != undefined) {
              v6 = v10.__getTextFormat(tf, true, this);
            }
          }
          if (v6) {
            if (_global.cascadingStyles) {
              if (this._parent != undefined) {
                v6 = this._parent.__getTextFormat(tf, false);
              }
            }
          }
          if (v6) {
            v6 = _global.style.__getTextFormat(tf, true, this);
          }
          return v6;
        };

        v2._getTextFormat = function (Void) {
          var v2 = this.stylecache.tf;
          if (v2 != undefined) {
            return v2;
          }
          v2 = new TextFormat();
          this.__getTextFormat(v2, true);
          this.stylecache.tf = v2;
          if (this.enabled == false) {
            var v3 = this.getStyle('disabledColor');
            v2.color = v3;
          }
          return v2;
        };

        v2.getStyleName = function (Void) {
          var v2 = this.styleName;
          if (v2 != undefined) {
            if (typeof v2 != 'string') {
              return v2.getStyleName();
            } else {
              return v2;
            }
          }
          if (this._parent != undefined) {
            return this._parent.getStyleName();
          } else {
            return undefined;
          }
        };

        v2.getStyle = function (styleProp) {
          var v3;
          ++_global.getStyleCounter;
          if (this[styleProp] != undefined) {
            return this[styleProp];
          }
          var v6 = this.styleName;
          if (v6 != undefined) {
            if (typeof v6 != 'string') {
              v3 = v6.getStyle(styleProp);
            } else {
              var v7 = _global.styles[v6];
              v3 = v7.getStyle(styleProp);
            }
          }
          if (v3 != undefined) {
            return v3;
          }
          v7 = this.getClassStyleDeclaration();
          if (v7 != undefined) {
            v3 = v7[styleProp];
          }
          if (v3 != undefined) {
            return v3;
          }
          if (_global.cascadingStyles) {
            if (mx.styles.StyleManager.isInheritingStyle(styleProp) || mx.styles.StyleManager.isColorStyle(styleProp)) {
              var v5 = this.stylecache;
              if (v5 != undefined) {
                if (v5[styleProp] != undefined) {
                  return v5[styleProp];
                }
              }
              if (this._parent != undefined) {
                v3 = this._parent.getStyle(styleProp);
              } else {
                v3 = _global.style[styleProp];
              }
              if (v5 != undefined) {
                v5[styleProp] = v3;
              }
              return v3;
            }
          }
          if (v3 == undefined) {
            v3 = _global.style[styleProp];
          }
          return v3;
        };

        v1.mergeClipParameters = function (o, p) {
          for (var v3 in p) {
            o[v3] = p[v3];
          }
          return true;
        };

        v1.symbolName = 'UIObject';
        v1.symbolOwner = mx.core.UIObject;
        v1.version = '2.0.2.127';
        v1.textColorList = {'color': 1, 'disabledColor': 1};
        v2.invalidateFlag = false;
        v2.lineWidth = 1;
        v2.lineColor = 0;
        v2.tabEnabled = false;
        v2.clipParameters = {'visible': 1, 'minHeight': 1, 'minWidth': 1, 'maxHeight': 1, 'maxWidth': 1, 'preferredHeight': 1, 'preferredWidth': 1};
        v2.addProperty('bottom', v2.__get__bottom, function () {});
        v2.addProperty('height', v2.__get__height, function () {});
        v2.addProperty('left', v2.__get__left, function () {});
        v2.addProperty('minHeight', v2.__get__minHeight, v2.__set__minHeight);
        v2.addProperty('minWidth', v2.__get__minWidth, v2.__set__minWidth);
        v2.addProperty('right', v2.__get__right, function () {});
        v2.addProperty('scaleX', v2.__get__scaleX, v2.__set__scaleX);
        v2.addProperty('scaleY', v2.__get__scaleY, v2.__set__scaleY);
        v2.addProperty('top', v2.__get__top, function () {});
        v2.addProperty('visible', v2.__get__visible, v2.__set__visible);
        v2.addProperty('width', v2.__get__width, function () {});
        v2.addProperty('x', v2.__get__x, function () {});
        v2.addProperty('y', v2.__get__y, function () {});
        ASSetPropFlags(mx.core.UIObject.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 2 __Packages.mx.core.UIComponent {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.core) {
        _global.mx.core = new Object();
      }
      if (!_global.mx.core.UIComponent) {
        var v1 = function () {
          super();
        };

        mx.core.UIComponent = v1;
        var v2 = new mx.core.UIObject();
        mx.core.UIComponent.prototype = v2;
        v2.__get__width = function () {
          return this.__width;
        };

        v2.__get__height = function () {
          return this.__height;
        };

        v2.setVisible = function (x, noEvent) {
          super.setVisible(x, noEvent);
        };

        v2.enabledChanged = function (id, oldValue, newValue) {
          this.setEnabled(newValue);
          this.invalidate();
          delete this.stylecache.tf;
          return newValue;
        };

        v2.setEnabled = function (enabled) {
          this.invalidate();
        };

        v2.getFocus = function () {
          var selFocus = Selection.getFocus();
          return (selFocus === null) ? null : eval(selFocus);
        };

        v2.setFocus = function () {
          Selection.setFocus(this);
        };

        v2.getFocusManager = function () {
          var v2 = this;
          while (v2 != undefined) {
            if (v2.focusManager != undefined) {
              return v2.focusManager;
            }
            v2 = v2._parent;
          }
          return undefined;
        };

        v2.onKillFocus = function (newFocus) {
          this.removeEventListener('keyDown', this);
          this.removeEventListener('keyUp', this);
          this.dispatchEvent({'type': 'focusOut'});
          this.drawFocus(false);
        };

        v2.onSetFocus = function (oldFocus) {
          this.addEventListener('keyDown', this);
          this.addEventListener('keyUp', this);
          this.dispatchEvent({'type': 'focusIn'});
          if ((this.getFocusManager()).bDrawFocus != false) {
            this.drawFocus(true);
          }
        };

        v2.findFocusInChildren = function (o) {
          if (o.focusTextField != undefined) {
            return o.focusTextField;
          }
          if (o.tabEnabled == true) {
            return o;
          }
          return undefined;
        };

        v2.findFocusFromObject = function (o) {
          if (o.tabEnabled != true) {
            if (o._parent == undefined) {
              return undefined;
            }
            if (o._parent.tabEnabled == true) {
              o = o._parent;
              return o;
            }
            if (o._parent.tabChildren) {
              o = this.findFocusInChildren(o._parent);
              return o;
            }
            o = this.findFocusFromObject(o._parent);
          }
          return o;
        };

        v2.pressFocus = function () {
          var v3 = this.findFocusFromObject(this);
          var v2 = this.getFocus();
          if (v3 != v2) {
            v2.drawFocus(false);
            if ((this.getFocusManager()).bDrawFocus != false) {
              v3.drawFocus(true);
            }
          }
        };

        v2.releaseFocus = function () {
          var v2 = this.findFocusFromObject(this);
          if (v2 != this.getFocus()) {
            v2.setFocus();
          }
        };

        v2.isParent = function (o) {
          while (o != undefined) {
            if (o == this) {
              return true;
            }
            o = o._parent;
          }
          return false;
        };

        v2.size = function () {};

        v2.init = function () {
          super.init();
          this._xscale = 100;
          this._yscale = 100;
          this._focusrect = _global.useFocusRect == false;
          this.watch('enabled', this.enabledChanged);
          if (this.enabled == false) {
            this.setEnabled(false);
          }
        };

        v2.dispatchValueChangedEvent = function (value) {
          this.dispatchEvent({'type': 'valueChanged', 'value': value});
        };

        v1.symbolName = 'UIComponent';
        v1.symbolOwner = mx.core.UIComponent;
        v1.version = '2.0.2.127';
        v1.kStretch = 5000;
        v2.focusEnabled = true;
        v2.tabEnabled = true;
        v2.origBorderStyles = {'themeColor': 16711680};
        v2.clipParameters = {};
        v1.mergedClipParameters = mx.core.UIObject.mergeClipParameters(mx.core.UIComponent.prototype.clipParameters, mx.core.UIObject.prototype.clipParameters);
        v2.addProperty('height', v2.__get__height, function () {});
        v2.addProperty('width', v2.__get__width, function () {});
        ASSetPropFlags(mx.core.UIComponent.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 3 __Packages.mx.controls.streamingmedia.ICuePointHolder {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.ICuePointHolder) {
      }
    #endinitclip
  }

  movieClip 4 __Packages.mx.controls.MediaPlayback {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.MediaPlayback) {
        var v1 = function () {
          super();
        };

        mx.controls.MediaPlayback = v1;
        var v2 = new mx.core.UIComponent();
        mx.controls.MediaPlayback.prototype = v2;
        v2.init = function (Void) {
          this.initializeParameters();
          var v5 = this._width;
          var v8 = this._height;
          this._deadPreview._visible = false;
          super.init();
          var v3 = {'contentPath': this._contentPath, 'mediaType': this._mediaType, 'autoPlay': this._autoPlay, 'autoSize': this._autoSize, 'aspectRatio': this._aspectRatio, 'totalTime': this._totalTime, 'initCuePointNames': this.initCuePointNames, 'initCuePointTimes': this.initCuePointTimes};
          this.attachMovie('MediaDisplay', '_display', 1, v3);
          var v4 = this._autoPlay ? mx.controls.streamingmedia.StreamingMediaConstants.PAUSE_PLAY_CONTROL : mx.controls.streamingmedia.StreamingMediaConstants.PLAY_PLAY_CONTROL;
          var v6 = (this._mediaType == 'MP3') ? 'default' : 'none';
          var v7 = this.__get__controlPlacement() == 'top' || this.__get__controlPlacement() == 'bottom';
          v3 = {'horizontal': v7, 'controllerPolicy': this._controllerPolicy, 'backgroundStyle': v6, 'activePlayControl': v4};
          this.attachMovie('MediaController', '_controller', 2, v3);
          this.setSize(v5, v8, true);
          this._display.associateController(this._controller);
          this._controller.addEventListener('click', this);
          this._controller.addEventListener('playheadChange', this);
          this._controller.addEventListener('volume', this);
          this._controller.addEventListener('scrubbing', this);
          this._display.addEventListener('change', this);
          this._display.addEventListener('progress', this);
          this._display.addEventListener('start', this);
          this._display.addEventListener('resizeVideo', this);
          this._display.addEventListener('cuePoint', this);
          this._display.addEventListener('complete', this);
          this._enabled = true;
          this.tabEnabled = false;
          this.tabChildren = true;
          this.redraw(true);
        };

        v2.initializeParameters = function () {
          if (this.__get__mediaType() == null) {
            this.__set__mediaType('FLV');
          }
          if (this.__get__totalTime() == null) {
            this.__set__totalTime(0);
          }
          if (this.__get__contentPath() == null) {
            this.__set__contentPath('');
          }
          if (this.__get__autoPlay() == null) {
            this.__set__autoPlay(true);
          }
          if (this.__get__autoSize() == null) {
            this.__set__autoSize(true);
          }
          if (this.__get__aspectRatio() == null) {
            this.__set__aspectRatio(true);
          }
          if (this.__get__controllerPolicy() == null) {
            this.__set__controllerPolicy('auto');
          }
          if (this.__get__controlPlacement() == null) {
            this.__set__controlPlacement('bottom');
          }
        };

        v2.draw = function (Void) {
          if (this._mediaType == 'MP3') {
            this.drawMP3();
          } else {
            this.drawFLV();
          }
        };

        v2.drawMP3 = function () {
          this._display._x = 0;
          this._display._y = 0;
          this._controller._x = 0;
          this._controller._y = 0;
          this._controller.setSize(this.__get__width(), this.__get__height(), true);
          this._controller.__set__backgroundStyle('default');
          this._controller.setOpenUpOrLeft(false);
          this._controller.redraw(true);
          this._chrome.visible = false;
          this._chrome.showToggles = false;
          this._chrome.draw();
        };

        v2.drawFLV = function () {
          this.drawChrome();
          this.drawFLVController();
          this.drawFLVDisplay();
        };

        v2.drawChrome = function () {
          var v3;
          var v2;
          if (this._controller.__get__horizontal()) {
            v2 = this.__get__height() - this._controller.getMinimumOpenHeight() + this._controller.getMinimumClosedHeight();
            v3 = this.width;
          } else {
            v3 = this.__get__width() - this._controller.getMinimumOpenWidth() + this._controller.getMinimumClosedWidth();
            v2 = this.height;
          }
          var v4 = this.__get__width();
          var v5 = this.__get__height();
          var v8 = (this._controllerPolicy == 'on') ? v4 : v3;
          var v7 = (this._controllerPolicy == 'on') ? v5 : v2;
          var v6 = this.isTopControlPlacement() || this.isLeftControlPlacement();
          this._chrome._x = 0;
          this._chrome._y = 0;
          if (this.isTopControlPlacement() && (this._controllerPolicy == 'off' || this._controllerPolicy == 'auto')) {
            this._chrome._y = this._controller.getMinimumOpenHeight() - this._controller.getMinimumClosedHeight();
          } else {
            if (this.isLeftControlPlacement() && (this._controllerPolicy == 'off' || this._controllerPolicy == 'auto')) {
              this._chrome._x = this._controller.getMinimumOpenWidth() - this._controller.getMinimumClosedWidth();
            }
          }
          this._chrome.visible = true;
          this._chrome.showToggles = true;
          this._chrome.setSize(v8, v7);
          this._chrome.draw();
          this.addSecondChrome(this._chrome, v2, v5, v3, v4, v6);
        };

        v2.drawFLVController = function () {
          if (this.isBottomControlPlacement()) {
            this._controller.setSize(this.__get__width(), this._controller.getMinimumOpenHeight(), true);
            this._controller.__set__horizontal(true);
            this._controller._x = 0;
            this._controller._y = this.__get__height() - this._controller.__get__height();
          } else {
            if (this.isTopControlPlacement()) {
              this._controller.setSize(this.__get__width(), this._controller.getMinimumOpenHeight(), true);
              this._controller.__set__horizontal(true);
              this._controller.setOpenUpOrLeft(true);
              this._controller._x = 0;
              if (this._controllerPolicy == 'on') {
                this._controller._y = 0;
              } else {
                this._controller._y = this._controller.__get__height() - this._controller.getMinimumClosedHeight();
              }
            } else {
              if (this.isRightControlPlacement()) {
                this._controller.setSize(this._controller.getMinimumOpenWidth(), this.__get__height(), true);
                this._controller.__set__horizontal(false);
                this._controller._x = this.__get__width() - this._controller.__get__width();
                this._controller._y = 0;
              } else {
                if (this.isLeftControlPlacement()) {
                  this._controller.setSize(this._controller.getMinimumOpenWidth(), this.__get__height(), true);
                  this._controller.__set__horizontal(false);
                  this._controller.setOpenUpOrLeft(true);
                  if (this._controllerPolicy == 'on') {
                    this._controller._x = 0;
                  } else {
                    this._controller._x = this._controller.__get__width() - this._controller.getMinimumClosedWidth();
                  }
                  this._controller._y = 0;
                }
              }
            }
          }
          this._controller.__set__backgroundStyle('none');
          this._controller.invalidate();
        };

        v2.drawFLVDisplay = function () {
          this.displaySetProperSize();
          var v3 = 0;
          var v2 = 0;
          if (this.isTopControlPlacement()) {
            v2 = this._controller.height;
          } else {
            if (this.isLeftControlPlacement()) {
              v3 = this._controller.width;
            }
          }
          this._display._x = v3 + mx.controls.MediaPlayback.H_BORDER;
          this._display._y = v2 + mx.controls.MediaPlayback.V_BORDER;
        };

        v2.displaySetProperSize = function () {
          var v2 = this.__get__width() - mx.controls.MediaPlayback.H_BORDER * 2;
          var v3 = this.__get__height() - mx.controls.MediaPlayback.V_BORDER * 2;
          if (this.isBottomControlPlacement() || this.isTopControlPlacement()) {
            v3 -= this._controller.height;
          } else {
            v2 -= this._controller.width;
          }
          if (this._autoSize && (this._display.__get__preferredWidth() > v2 || this._display.__get__preferredHeight() > v3)) {
            this._display.__set__autoSize(false);
            this._display.__set__aspectRatio(true);
          } else {
            this._display.__set__autoSize(this._autoSize);
            this._display.__set__aspectRatio(this._aspectRatio);
          }
          this._display.setSize(v2, v3, true);
          this._display.invalidate();
        };

        v2.handleEvent = function (ev) {
          ev.target = this;
          this.dispatchEvent(ev);
          if (ev.type == 'start') {
            if (this._mediaType == 'FLV') {
              this._display.makeVideoVisible = true;
              this.redraw(true);
            } else {
              if (this._mediaType == 'MP3') {
                this._controller.setPlaying(this._display.__get__playing());
              }
            }
          }
          if (ev.type == 'resizeVideo') {
            if (this._mediaType == 'FLV') {
              this._display.makeVideoVisible = true;
              this.redraw(true);
            }
          }
        };

        v2.toString = function () {
          return 'MediaPlayback: media=' + this._contentPath;
        };

        v2.getController = function () {
          return this._controller;
        };

        v2.isRtmp = function (mediaUrl) {
          if (this._display != null) {
            return this._display.isRtmp(mediaUrl);
          }
          return false;
        };

        v2.load = function () {
          this._display.load();
        };

        v2.play = function (startingPoint) {
          this._display.play(startingPoint);
          this._controller.setPlaying(true);
        };

        v2.pause = function () {
          this._display.pause();
          this._controller.setPlaying(false);
        };

        v2.stop = function () {
          this._display.stop();
          this._controller.setPlaying(false);
        };

        v2.__get__autoSize = function () {
          if (this._display != null) {
            this._autoSize = this._display.autoSize;
          }
          return this._autoSize;
        };

        v2.__set__autoSize = function (flag) {
          this._autoSize = flag;
          if (this._display != null) {
            this.displaySetProperSize();
            this.invalidate();
          }
          return this.__get__autoSize();
        };

        v2.__get__aspectRatio = function () {
          if (this._display != null) {
            this._aspectRatio = this._display.aspectRatio;
          }
          return this._aspectRatio;
        };

        v2.__set__aspectRatio = function (flag) {
          this._aspectRatio = flag;
          if (this._display != null) {
            this.displaySetProperSize();
            this.invalidate();
          }
          return this.__get__aspectRatio();
        };

        v2.__get__autoPlay = function () {
          if (this._display != null) {
            this._autoPlay = this._display.autoPlay;
          }
          return this._autoPlay;
        };

        v2.__set__autoPlay = function (flag) {
          this._autoPlay = flag;
          if (this._display != null) {
            this._display.__set__autoPlay(flag);
          }
          return this.__get__autoPlay();
        };

        v2.__get__playheadTime = function () {
          return this._display.__get__playheadTime();
        };

        v2.__set__playheadTime = function (position) {
          this._display.__set__playheadTime(position);
          return this.__get__playheadTime();
        };

        v2.__get__contentPath = function () {
          if (this._display != null) {
            this._contentPath = this._display.contentPath;
          }
          return this._contentPath;
        };

        v2.__set__contentPath = function (aUrl) {
          this._contentPath = aUrl;
          if (this._display != null) {
            if (!this._settingMedia) {
              this._display.__set__contentPath(aUrl);
            }
            this._mediaType = this._display.mediaType;
          }
          return this.__get__contentPath();
        };

        v2.__get__volume = function () {
          return this._display.__get__volume();
        };

        v2.__set__volume = function (aVol) {
          this._display.__set__volume(aVol);
          this._controller.__set__volume(aVol);
          return this.__get__volume();
        };

        v2.__get__playing = function () {
          return this._display.__get__playing();
        };

        v2.__get__preferredWidth = function () {
          return this._display.__get__preferredWidth();
        };

        v2.__get__preferredHeight = function () {
          return this._display.__get__preferredHeight();
        };

        v2.__get__bytesLoaded = function () {
          return this._display.__get__bytesLoaded();
        };

        v2.__get__bytesTotal = function () {
          return this._display.__get__bytesTotal();
        };

        v2.__get__mediaType = function () {
          if (this._display != null) {
            this._mediaType = this._display.mediaType;
          }
          return this._mediaType;
        };

        v2.__set__mediaType = function (aType) {
          this._mediaType = aType;
          if (this._display != null) {
            this._display.__set__mediaType(aType);
            if (aType == 'MP3') {
              this._controller.__set__backgroundStyle('none');
              this.removeSecondChrome();
            } else {
              this._controller.__set__backgroundStyle('default');
              this.drawChrome();
            }
            this.invalidate();
          }
          return this.__get__mediaType();
        };

        v2.setMedia = function (aUrl, aType) {
          this._settingMedia = true;
          var v5 = this._mediaType;
          this._display.setMedia(aUrl, aType);
          if (aType == null) {
            var v3 = aUrl.substr(-3);
            if (v3 == 'flv' || v3 == 'FLV') {
              aType = 'FLV';
            } else {
              if (v3 == 'mp3' || v3 == 'MP3') {
                aType = 'MP3';
              } else {
                aType = this._mediaType;
              }
            }
          }
          if (v5 != aType) {
            this.__set__mediaType(aType);
          }
          this.__set__contentPath(aUrl);
          this._settingMedia = false;
        };

        v2.__get__totalTime = function () {
          if (this._display != null) {
            this._totalTime = this._display.totalTime;
          }
          return this._totalTime;
        };

        v2.__set__totalTime = function (aTime) {
          this._totalTime = aTime;
          if (this._display != null) {
            this._display.__set__totalTime(this._totalTime);
          }
          return this.__get__totalTime();
        };

        v2.getCuePoints = function () {
          return this._display.getCuePoints();
        };

        v2.__get__cuePoints = function () {
          return this.getCuePoints();
        };

        v2.setCuePoints = function (cp) {
          var v2 = 0;
          while (v2 < cp.length) {
            cp[v2].playback = this;
            ++v2;
          }
          this._display.__set__cuePoints(cp);
        };

        v2.__set__cuePoints = function (cp) {
          this.setCuePoints(cp);
          return this.__get__cuePoints();
        };

        v2.getCuePoint = function (pointName) {
          return this._display.getCuePoint(pointName);
        };

        v2.addCuePoint = function (aName, aTime) {
          var v2 = new mx.controls.streamingmedia.CuePoint(aName, aTime);
          v2.playback = this;
          this.addCuePointObject(v2);
        };

        v2.addCuePointObject = function (aCuePoint) {
          aCuePoint.playback = this;
          this._display.addCuePointObject(aCuePoint);
        };

        v2.removeCuePoint = function (aCuePoint) {
          this._display.removeCuePoint(aCuePoint);
        };

        v2.removeAllCuePoints = function () {
          this._display.removeAllCuePoints();
        };

        v2.__get__mostRecentCuePoint = function () {
          return this._display.__get__mostRecentCuePoint();
        };

        v2.__get__mostRecentCuePointName = function () {
          return this._display.__get__mostRecentCuePointName();
        };

        v2.__get__mostRecentCuePointTime = function () {
          return this._display.__get__mostRecentCuePointTime();
        };

        v2.__get__controllerPolicy = function () {
          if (this._controller != null) {
            this._controllerPolicy = this._controller.controllerPolicy;
          }
          return this._controllerPolicy;
        };

        v2.__set__controllerPolicy = function (aPolicy) {
          this._controllerPolicy = aPolicy;
          if (this._controller != null) {
            this._controller.__set__controllerPolicy(aPolicy);
          }
          return this.__get__controllerPolicy();
        };

        v2.addSecondChrome = function (theChrome, closedHeight, openHeight, closedWidth, openWidth, fixedEnd) {
          this._controller.addSecondChrome(theChrome, closedHeight, openHeight, closedWidth, openWidth, fixedEnd);
        };

        v2.removeSecondChrome = function () {
          this._controller.removeSecondChrome();
        };

        v2.getMinimumOpenHeight = function () {
          return this._controller.getMinimumOpenHeight();
        };

        v2.getMinimumOpenWidth = function () {
          return this._controller.getMinimumOpenWidth();
        };

        v2.getMinimumClosedHeight = function () {
          return this._controller.getMinimumClosedHeight();
        };

        v2.getMinimumClosedWidth = function () {
          return this._controller.getMinimumClosedWidth();
        };

        v2.expand = function (force) {
          this._controller.expand(force);
        };

        v2.contract = function (force) {
          this._controller.contract(force);
        };

        v2.__get__controlPlacement = function () {
          return this._controlPlacement;
        };

        v2.__set__controlPlacement = function (aPos) {
          this._controlPlacement = aPos;
          if (this._controller != null) {
            var v2 = this.isTopControlPlacement() || this.isLeftControlPlacement();
            this._controller.setOpenUpOrLeft(v2);
            var v3 = this.isTopControlPlacement() || this.isBottomControlPlacement();
            this._controller.__set__horizontal(v3);
            this.invalidate();
          }
          return this.__get__controlPlacement();
        };

        v2.isTopControlPlacement = function () {
          return this._controlPlacement == mx.controls.MediaPlayback.TOP_CONTROL_POSITION;
        };

        v2.isBottomControlPlacement = function () {
          return this._controlPlacement == mx.controls.MediaPlayback.BOTTOM_CONTROL_POSITION;
        };

        v2.isLeftControlPlacement = function () {
          return this._controlPlacement == mx.controls.MediaPlayback.LEFT_CONTROL_POSITION;
        };

        v2.isRightControlPlacement = function () {
          return this._controlPlacement == mx.controls.MediaPlayback.RIGHT_CONTROL_POSITION;
        };

        v2.displayFull = function () {
          var v2 = this._chrome.getOneToggle();
          v2.displayFull(false);
        };

        v2.displayNormal = function () {
          var v2 = this._chrome.getOneToggle();
          v2.displayNormal(false);
        };

        v2.setSize = function (w, h, noEvent) {
          w = Math.max(w, this._controller.getMinimumOpenWidth() + 17);
          h = Math.max(h, this._controller.getMinimumOpenHeight() + 17);
          super.setSize(w, h, noEvent);
          this.invalidate();
        };

        v2.__get__enabled = function () {
          return this._enabled;
        };

        v2.__set__enabled = function (is) {
          this._enabled = is;
          this._display.__set__enabled(is);
          this._controller.__set__enabled(is);
          this._chrome.setEnabled(is);
          return this.__get__enabled();
        };

        v1.symbolName = 'MediaPlayback';
        v1.symbolOwner = mx.controls.MediaPlayback;
        v2.className = 'MediaPlayback';
        v1.version = '2.0.2.126';
        v2.clipParameters = {'mediaType': 'FLV', 'contentPath': '', 'totalTime': 0, 'autoSize': true, 'autoPlay': true, 'controllerPolicy': 'auto', 'initCuePointNames': new Array(), 'initCuePointTimes': new Array(), 'controlPlacement': 'bottom', 'fps': 30};
        v1.TOP_CONTROL_POSITION = 'top';
        v1.BOTTOM_CONTROL_POSITION = 'bottom';
        v1.LEFT_CONTROL_POSITION = 'left';
        v1.RIGHT_CONTROL_POSITION = 'right';
        v1.H_BORDER = 8;
        v1.V_BORDER = 8;
        v2._settingMedia = false;
        v2.addProperty('aspectRatio', v2.__get__aspectRatio, v2.__set__aspectRatio);
        v2.addProperty('autoPlay', v2.__get__autoPlay, v2.__set__autoPlay);
        v2.addProperty('autoSize', v2.__get__autoSize, v2.__set__autoSize);
        v2.addProperty('bytesLoaded', v2.__get__bytesLoaded, function () {});
        v2.addProperty('bytesTotal', v2.__get__bytesTotal, function () {});
        v2.addProperty('contentPath', v2.__get__contentPath, v2.__set__contentPath);
        v2.addProperty('controlPlacement', v2.__get__controlPlacement, v2.__set__controlPlacement);
        v2.addProperty('controllerPolicy', v2.__get__controllerPolicy, v2.__set__controllerPolicy);
        v2.addProperty('cuePoints', v2.__get__cuePoints, v2.__set__cuePoints);
        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        v2.addProperty('mediaType', v2.__get__mediaType, v2.__set__mediaType);
        v2.addProperty('mostRecentCuePoint', v2.__get__mostRecentCuePoint, function () {});
        v2.addProperty('mostRecentCuePointName', v2.__get__mostRecentCuePointName, function () {});
        v2.addProperty('mostRecentCuePointTime', v2.__get__mostRecentCuePointTime, function () {});
        v2.addProperty('playheadTime', v2.__get__playheadTime, v2.__set__playheadTime);
        v2.addProperty('playing', v2.__get__playing, function () {});
        v2.addProperty('preferredHeight', v2.__get__preferredHeight, function () {});
        v2.addProperty('preferredWidth', v2.__get__preferredWidth, function () {});
        v2.addProperty('totalTime', v2.__get__totalTime, v2.__set__totalTime);
        v2.addProperty('volume', v2.__get__volume, v2.__set__volume);
        ASSetPropFlags(mx.controls.MediaPlayback.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 172 __Packages.mx.skins.SkinElement {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.SkinElement) {
        var v1 = function () {
          super();
        };

        mx.skins.SkinElement = v1;
        var v2 = new MovieClip();
        mx.skins.SkinElement.prototype = v2;
        v1.registerElement = function (name, className) {
          Object.registerClass(name, (className == undefined) ? mx.skins.SkinElement : className);
          _global.skinRegistry[name] = true;
        };

        v2.__set__visible = function (visible) {
          this._visible = visible;
        };

        v2.move = function (x, y) {
          this._x = x;
          this._y = y;
        };

        v2.setSize = function (w, h) {
          this._width = w;
          this._height = h;
        };

        ASSetPropFlags(mx.skins.SkinElement.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 173 __Packages.mx.styles.CSSTextStyles {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.styles) {
        _global.mx.styles = new Object();
      }
      if (!_global.mx.styles.CSSTextStyles) {
        var v1 = function () {};

        mx.styles.CSSTextStyles = v1;
        var v2 = v1.prototype;
        v1.addTextStyles = function (o, bColor) {
          o.addProperty('textAlign', function () {
            return this._tf.align;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.align = x;
          });
          o.addProperty('fontWeight', function () {
            return (this._tf.bold != undefined) ? (this._tf.bold ? 'bold' : 'none') : undefined;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.bold = x == 'bold';
          });
          if (bColor) {
            o.addProperty('color', function () {
              return this._tf.color;
            }, function (x) {
              if (this._tf == undefined) {
                this._tf = new TextFormat();
              }
              this._tf.color = x;
            });
          }
          o.addProperty('fontFamily', function () {
            return this._tf.font;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.font = x;
          });
          o.addProperty('textIndent', function () {
            return this._tf.indent;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.indent = x;
          });
          o.addProperty('fontStyle', function () {
            return (this._tf.italic != undefined) ? (this._tf.italic ? 'italic' : 'none') : undefined;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.italic = x == 'italic';
          });
          o.addProperty('marginLeft', function () {
            return this._tf.leftMargin;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.leftMargin = x;
          });
          o.addProperty('marginRight', function () {
            return this._tf.rightMargin;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.rightMargin = x;
          });
          o.addProperty('fontSize', function () {
            return this._tf.size;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.size = x;
          });
          o.addProperty('textDecoration', function () {
            return (this._tf.underline != undefined) ? (this._tf.underline ? 'underline' : 'none') : undefined;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.underline = x == 'underline';
          });
          o.addProperty('embedFonts', function () {
            return this._tf.embedFonts;
          }, function (x) {
            if (this._tf == undefined) {
              this._tf = new TextFormat();
            }
            this._tf.embedFonts = x;
          });
        };

        ASSetPropFlags(mx.styles.CSSTextStyles.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 174 __Packages.mx.styles.StyleManager {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.styles) {
        _global.mx.styles = new Object();
      }
      if (!_global.mx.styles.StyleManager) {
        var v1 = function () {};

        mx.styles.StyleManager = v1;
        var v2 = v1.prototype;
        v1.registerInheritingStyle = function (styleName) {
          mx.styles.StyleManager.inheritingStyles[styleName] = true;
        };

        v1.isInheritingStyle = function (styleName) {
          return mx.styles.StyleManager.inheritingStyles[styleName] == true;
        };

        v1.registerColorStyle = function (styleName) {
          mx.styles.StyleManager.colorStyles[styleName] = true;
        };

        v1.isColorStyle = function (styleName) {
          return mx.styles.StyleManager.colorStyles[styleName] == true;
        };

        v1.registerColorName = function (colorName, colorValue) {
          mx.styles.StyleManager.colorNames[colorName] = colorValue;
        };

        v1.isColorName = function (colorName) {
          return mx.styles.StyleManager.colorNames[colorName] != undefined;
        };

        v1.getColorName = function (colorName) {
          return mx.styles.StyleManager.colorNames[colorName];
        };

        v1.inheritingStyles = {'color': true, 'direction': true, 'fontFamily': true, 'fontSize': true, 'fontStyle': true, 'fontWeight': true, 'textAlign': true, 'textIndent': true};
        v1.colorStyles = {'barColor': true, 'trackColor': true, 'borderColor': true, 'buttonColor': true, 'color': true, 'dateHeaderColor': true, 'dateRollOverColor': true, 'disabledColor': true, 'fillColor': true, 'highlightColor': true, 'scrollTrackColor': true, 'selectedDateColor': true, 'shadowColor': true, 'strokeColor': true, 'symbolBackgroundColor': true, 'symbolBackgroundDisabledColor': true, 'symbolBackgroundPressedColor': true, 'symbolColor': true, 'symbolDisabledColor': true, 'themeColor': true, 'todayIndicatorColor': true, 'shadowCapColor': true, 'borderCapColor': true, 'focusColor': true};
        v1.colorNames = {'black': 0, 'white': 16777215, 'red': 16711680, 'green': 65280, 'blue': 255, 'magenta': 16711935, 'yellow': 16776960, 'cyan': 65535, 'haloGreen': 8453965, 'haloBlue': 2881013, 'haloOrange': 16761344};
        v1.TextFormatStyleProps = {'font': true, 'size': true, 'color': true, 'leftMargin': false, 'rightMargin': false, 'italic': true, 'bold': true, 'align': true, 'indent': true, 'underline': false, 'embedFonts': false};
        v1.TextStyleMap = {'textAlign': true, 'fontWeight': true, 'color': true, 'fontFamily': true, 'textIndent': true, 'fontStyle': true, 'lineHeight': true, 'marginLeft': true, 'marginRight': true, 'fontSize': true, 'textDecoration': true, 'embedFonts': true};
        ASSetPropFlags(mx.styles.StyleManager.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 175 __Packages.mx.styles.CSSStyleDeclaration {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.styles) {
        _global.mx.styles = new Object();
      }
      if (!_global.mx.styles.CSSStyleDeclaration) {
        var v1 = function () {};

        mx.styles.CSSStyleDeclaration = v1;
        var v2 = v1.prototype;
        v2.__getTextFormat = function (tf, bAll) {
          var v5 = false;
          if (this._tf != undefined) {
            var v2;
            for (v2 in mx.styles.StyleManager.TextFormatStyleProps) {
              if (bAll || mx.styles.StyleManager.TextFormatStyleProps[v2]) {
                if (tf[v2] == undefined) {
                  var v3 = this._tf[v2];
                  if (v3 != undefined) {
                    tf[v2] = v3;
                  } else {
                    v5 = true;
                  }
                }
              }
            }
            return v5;
          }
          v5 = true;
          return v5;
        };

        v2.getStyle = function (styleProp) {
          var v2 = this[styleProp];
          var v3 = mx.styles.StyleManager.getColorName(v2);
          return (v3 == undefined) ? v2 : v3;
        };

        v1.classConstruct = function () {
          mx.styles.CSSTextStyles.addTextStyles(mx.styles.CSSStyleDeclaration.prototype, true);
          return true;
        };

        v1.classConstructed = mx.styles.CSSStyleDeclaration.classConstruct();
        v1.CSSTextStylesDependency = mx.styles.CSSTextStyles;
        ASSetPropFlags(mx.styles.CSSStyleDeclaration.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 176 __Packages.mx.controls.streamingmedia.CuePoint {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.CuePoint) {
        var v1 = function (aName, aTime) {
          this.name = aName;
          this.time = aTime;
        };

        mx.controls.streamingmedia.CuePoint = v1;
        var v2 = v1.prototype;
        v2.toString = function () {
          return 'CuePoint: ' + this.name + ' at ' + this.time + ' seconds';
        };

        ASSetPropFlags(mx.controls.streamingmedia.CuePoint.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 177 __Packages.mx.controls.streamingmedia.FullScreenToggle {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.FullScreenToggle) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.FullScreenToggle = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.FullScreenToggle.prototype = v2;
        v2.init = function () {
          this._player = this._parent._parent;
          this._isFull = false;
          this.setEnabled(this._player.__get__enabled());
        };

        v2.isFullScreen = function () {
          return this._isFull;
        };

        v2.displayFull = function (noAction) {
          this.gotoAndStop('big');
          this._isFull = true;
          if (!noAction) {
            this._originalPlayerX = this._player._x;
            this._originalPlayerY = this._player._y;
            this._originalPlayerWidth = this._player.width;
            this._originalPlayerHeight = this._player.height;
            this._originalAutosize = this._player.autoSize;
            var v7 = this._player.getController();
            if (v7.__get__controllerPolicy() == 'auto' && v7.__get__expanded()) {
              mx.controls.streamingmedia.Tracer.trace('FullScreenToggle.displayFull: about to call contract');
              v7.contract();
            }
            v7.setNotAnimating(false);
            this._player.__set__autoSize(false);
            var v4 = this.getContainerInfo();
            this._player.setSize(v4.width, v4.height);
            if (v4.origin) {
              var v5 = mx.managers.SystemManager.__get__screen();
              mx.controls.streamingmedia.Tracer.trace('FullScreenToggle.displayFull: scr=(' + v5.x + ',' + v5.y + ')');
              this._player._x = v5.x;
              this._player._y = v5.y;
            }
            var v6 = this._player.getBounds(v4.container);
            mx.controls.streamingmedia.Tracer.trace('FullScreenToggle.displayFull: bounds=(' + v6.xMin + ',' + v6.yMin + ')');
            if (v4.origin) {
              this._player._x += v5.x;
              this._player._y += v5.y;
            } else {
              this._player._x += v4.x;
              this._player._y += v4.y;
            }
            this._player._x -= v6.xMin;
            this._player._y -= v6.yMin;
            this._waited = false;
            this.onEnterFrame = this.delayedBarRefresh;
            var v3 = this.getOtherToggles();
            var v2 = 0;
            while (v2 < v3.length) {
              v3[v2].displayFull(true);
              ++v2;
            }
          }
        };

        v2.getContainerInfo = function () {
          var v4;
          var v6 = this.getScrollViewAncestor(this._player);
          if (v6 == null) {
            var v5 = mx.managers.SystemManager.__get__screen();
            v4 = {'container': _root, 'width': v5.width, 'height': v5.height, 'x': 0, 'y': 0, 'origin': true};
            return v4;
          }
          var v3 = v6.getViewMetrics();
          v4 = {'container': v6, 'width': v6.width - v3.left - v3.right, 'height': v6.height - v3.top - v3.bottom, 'x': v3.left, 'y': v3.top, 'origin': false};
          return v4;
        };

        v2.getScrollViewAncestor = function (anMC) {
          var v3;
          if (anMC == _root) {
            v3 = null;
            return v3;
          }
          if (anMC instanceof mx.core.ScrollView) {
            v3 = anMC;
            return v3;
          }
          v3 = this.getScrollViewAncestor(anMC._parent);
          return v3;
        };

        v2.delayedBarRefresh = function () {
          if (!this._waited) {
            this._waited = true;
          } else {
            delete this.onEnterFrame;
            (this._player.getController()).refreshBars();
          }
        };

        v2.displayNormal = function (noAction) {
          this.gotoAndStop('small');
          this._isFull = false;
          if (!noAction) {
            var v4 = this._player.getController();
            if (v4.__get__controllerPolicy() == 'auto' && v4.__get__expanded()) {
              mx.controls.streamingmedia.Tracer.trace('FullScreenToggle.displayNormal: about to call contract');
              v4.contract();
            }
            v4.setNotAnimating(false);
            this._player.__set__autoSize(this._originalAutosize);
            this._player.setSize(this._originalPlayerWidth, this._originalPlayerHeight);
            this._player._x = this._originalPlayerX;
            this._player._y = this._originalPlayerY;
            this._waited = false;
            this.onEnterFrame = this.delayedBarRefresh;
            var v3 = this.getOtherToggles();
            var v2 = 0;
            while (v2 < v3.length) {
              v3[v2].displayNormal(true);
              ++v2;
            }
          }
        };

        v2.toggleDisplay = function () {
          if (this._isFull) {
            this.displayNormal();
          } else {
            this.displayFull();
          }
        };

        v2.getAllToggles = function () {
          return this._parent.getAllToggles();
        };

        v2.getOtherToggles = function () {
          var v3 = this.getAllToggles();
          var v2 = 0;
          while (v2 < v3.length) {
            if (v3[v2] == this) {
              v3.splice(v2, 1);
              break;
            }
            ++v2;
          }
          return v3;
        };

        v2.getPlayer = function () {
          return this._player;
        };

        v2.getEnabled = function () {
          return this._player.__get__enabled();
        };

        v2.setEnabled = function (is) {
          mx.controls.streamingmedia.Tracer.trace('FullScreenToggle.setEnabled: ' + is);
          this._maximize.setEnabled(is);
          this._minimize.setEnabled(is);
        };

        ASSetPropFlags(mx.controls.streamingmedia.FullScreenToggle.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 178 __Packages.mx.controls.MediaDisplay {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.MediaDisplay) {
        var v1 = function () {
          super();
        };

        mx.controls.MediaDisplay = v1;
        var v2 = new mx.core.UIComponent();
        mx.controls.MediaDisplay.prototype = v2;
        v2.init = function (Void) {
          this.initializeParameters();
          var v3 = this._width;
          var v4 = this._height;
          this._deadPreview._visible = false;
          super.init();
          this.setSize(v3, v4, true);
          this.initCuePoints();
          this._startingTime = 0;
          this._playingBeforeDisabled = false;
          this._started = false;
          this._sendCompleteEvent = false;
          this._fullyLoaded = false;
          this.makeVideoVisible = false;
          this.tabEnabled = false;
          this.tabChildren = false;
          this._screenAccommodator = new mx.controls.streamingmedia.ScreenAccommodator(this);
        };

        v2.initializeParameters = function () {
          if (this.__get__mediaType() == null) {
            this.__set__mediaType('FLV');
          }
          if (this.__get__totalTime() == null) {
            this.__set__totalTime(0);
          }
          if (this.__get__contentPath() == null) {
            this.__set__contentPath('');
          }
          if (this.__get__autoPlay() == null) {
            this.__set__autoPlay(true);
          }
          if (this.__get__autoSize() == null) {
            this.__set__autoSize(true);
          }
          if (this.__get__aspectRatio() == null) {
            this.__set__aspectRatio(true);
          }
        };

        v2.initCuePoints = function () {
          this._cuePoints = new Array();
          var v2 = 0;
          for (;;) {
            if (!(v2 < this.initCuePointNames.length && v2 < this.initCuePointTimes.length)) break;
            this.addCuePoint(this.initCuePointNames[v2], this.initCuePointTimes[v2]);
            ++v2;
          }
          delete this.initCuePointNames;
          delete this.initCuePointTimes;
          this._mostRecentCuePoint = undefined;
        };

        v2.initMedia = function (switchType) {
          if (this.isLivePreview()) {
            return undefined;
          }
          var v2 = this.__get__volume();
          if (switchType) {
            this._playerImpl.stop();
          }
          if (this.isFLV()) {
            if (this.isRtmp(this._contentPath)) {
              this._playerImpl = new mx.controls.streamingmedia.RTMPPlayer(this._contentPath, mx.controls.streamingmedia.StreamingMediaConstants.FLV_MEDIA_TYPE, this._videoHolder, this._totalTime);
            } else {
              this._playerImpl = new mx.controls.streamingmedia.FLVPlayer(this._contentPath, this._videoHolder, this._totalTime);
            }
          } else {
            if (this.isMP3()) {
              if (switchType) {
                this.releaseVideo();
              }
              if (this.isRtmp(this._contentPath)) {
                this._playerImpl = new mx.controls.streamingmedia.RTMPPlayer(this._contentPath, mx.controls.streamingmedia.StreamingMediaConstants.MP3_MEDIA_TYPE, this._videoHolder, this._totalTime);
              } else {
                this.createEmptyMovieClip('_soundHolder', 10);
                this._playerImpl = new mx.controls.streamingmedia.MP3Player(this._contentPath, this._soundHolder);
              }
            } else {}
          }
          if (v2 != undefined) {
            this.__set__volume(v2);
          }
          this.redraw(true);
          this._playerImpl.removeAllListeners();
          this._playerImpl.addListener(this);
          this._started = false;
          if (!switchType) {
            if (this._autoPlay) {
              this.play();
            } else {
              this.load();
            }
            this.poll(true);
            if (this._pollId != null) {
              clearInterval(this._pollId);
            }
            this._pollId = setInterval(this, 'poll', 250);
          }
        };

        v2.draw = function () {
          if (this.isFLV()) {
            if (this.makeVideoVisible) {
              this._videoHolder._visible = true;
              this.makeVideoVisible = false;
            }
            if (this._autoSize) {
              this.assignPreferredSize();
            } else {
              if (this._aspectRatio) {
                var v4 = this.__get__preferredWidth();
                var v3 = this.__get__preferredHeight();
                var v2 = Math.min(this.__get__width() / v4, this.__get__height() / v3);
                this.setVideoDisplaySize(v2 * v4, v2 * v3);
              } else {
                this.setVideoDisplaySize(this.__get__width(), this.__get__height());
              }
            }
          }
        };

        v2.setVideoDisplaySize = function (w, h) {
          if (this.isFLV()) {
            var v2 = this._videoHolder._video;
            v2._width = w;
            v2._height = h;
            v2._x = (this.__get__width() - v2._width) / 2;
            v2._y = (this.__get__height() - v2._height) / 2;
          }
        };

        v2.__get__videoWidth = function () {
          var v2;
          if (this.isMP3()) {
            v2 = 0;
            return v2;
          }
          v2 = this._videoHolder._video._width;
          return v2;
        };

        v2.__get__videoHeight = function () {
          var v2;
          if (this.isMP3()) {
            v2 = 0;
            return v2;
          }
          v2 = this._videoHolder._video._height;
          return v2;
        };

        v2.__get__preferredWidth = function () {
          var v2;
          if (this.isMP3()) {
            v2 = 0;
            return v2;
          }
          v2 = this._videoHolder._video.width;
          return v2;
        };

        v2.__get__preferredHeight = function () {
          var v2;
          if (this.isMP3()) {
            v2 = 0;
            return v2;
          }
          v2 = this._videoHolder._video.height;
          return v2;
        };

        v2.assignPreferredSize = function () {
          this.setVideoDisplaySize(this.__get__preferredWidth(), this.__get__preferredHeight(), true);
        };

        v2.handlePlayer = function (player, status) {
          if (status == 'start' || status == 'resizeVideo') {
            if (this._parent instanceof mx.controls.MediaPlayback) {
            } else {
              this.makeVideoVisible = true;
              this.draw();
            }
            if (this._started) {
              var v2 = {'target': this, 'type': 'resizeVideo'};
              this.dispatchEvent(v2);
            } else {
              var v2 = {'target': this, 'type': 'start'};
              this.dispatchEvent(v2);
              if (this.isRtmp(this._contentPath)) {
                v2 = {'target': this, 'type': 'progress'};
                this.dispatchEvent(v2);
              }
              this._started = true;
            }
          } else {
            if (status == 'complete') {
              this._sendCompleteEvent = true;
            }
          }
        };

        v2.toString = function () {
          return 'MediaDisplay: media=' + this._contentPath;
        };

        v2.load = function () {
          this._playerImpl.load();
        };

        v2.play = function (startingPoint) {
          if (startingPoint != undefined) {
            this._startingTime = startingPoint;
          }
          if (this.__get__enabled()) {
            this._playerImpl.play(startingPoint);
          } else {
            this._playingBeforeDisabled = true;
          }
        };

        v2.pause = function () {
          this._playerImpl.pause();
        };

        v2.stop = function () {
          this._playerImpl.stop();
        };

        v2.__get__autoSize = function () {
          return this._autoSize;
        };

        v2.__set__autoSize = function (flag) {
          if (this._autoSize != flag) {
            this._autoSize = flag;
            this.invalidate();
          }
          return this.__get__autoSize();
        };

        v2.__get__aspectRatio = function () {
          return this._aspectRatio;
        };

        v2.__set__aspectRatio = function (flag) {
          if (this._aspectRatio != flag) {
            this._aspectRatio = flag;
            this.invalidate();
          }
          return this.__get__aspectRatio();
        };

        v2.__get__autoPlay = function () {
          return this._autoPlay;
        };

        v2.__set__autoPlay = function (flag) {
          this._autoPlay = flag;
          return this.__get__autoPlay();
        };

        v2.__get__playheadTime = function () {
          return this._playerImpl.getPlayheadTime();
        };

        v2.__set__playheadTime = function (position) {
          if (position != undefined) {
            this._startingTime = position;
          }
          this._playerImpl.setPlayheadTime(position);
          return this.__get__playheadTime();
        };

        v2.__get__contentPath = function () {
          return this._contentPath;
        };

        v2.__set__contentPath = function (aUrl) {
          this.setMedia(aUrl);
          return this.__get__contentPath();
        };

        v2.setMedia = function (aUrl, aType) {
          this._fireCuePoints = false;
          if (aType == null) {
            aType = this.deduceMediaType(aUrl);
          } else {
            if (aType != mx.controls.streamingmedia.StreamingMediaConstants.FLV_MEDIA_TYPE && aType != mx.controls.streamingmedia.StreamingMediaConstants.MP3_MEDIA_TYPE) {
            }
          }
          var v5 = this._mediaType;
          this._mediaType = aType;
          var v7 = this.isRtmp(this._contentPath);
          var v6 = this.isRtmp(aUrl);
          this._contentPath = aUrl;
          this._fullyLoaded = false;
          this._startingTime = 0;
          if (!this.isLivePreview()) {
            if (this._contentPath == '') {
              this.releaseVideo();
            } else {
              if (this._playerImpl == null) {
                this.initMedia();
              } else {
                if (v5 != this._mediaType || v7 != v6) {
                  var v4 = this._playerImpl.isPlaying();
                  this.initMedia(true);
                  if (v4) {
                    this._playerImpl.play(0);
                  } else {
                    this._playerImpl.load();
                  }
                } else {
                  this._playerImpl.setMediaUrl(aUrl);
                  this._started = false;
                }
              }
            }
          }
        };

        v2.deduceMediaType = function (aUrl) {
          var v2 = aUrl.substr(-3);
          if (v2 == 'flv' || v2 == 'FLV') {
            return 'FLV';
          }
          if (v2 == 'mp3' || v2 == 'MP3') {
            return 'MP3';
          }
          return this._mediaType;
        };

        v2.releaseVideo = function () {
          this._playerImpl.close();
          this._playerImpl = null;
        };

        v2.isLivePreview = function () {
          return _root.contents.obj != null;
        };

        v2.__get__volume = function () {
          return this._playerImpl.getVolume();
        };

        v2.__set__volume = function (aVol) {
          this._playerImpl.setVolume(aVol);
          return this.__get__volume();
        };

        v2.__get__playing = function () {
          return this._playerImpl.isPlaying();
        };

        v2.__get__bytesLoaded = function () {
          return this._playerImpl.getMediaBytesLoaded();
        };

        v2.__get__bytesTotal = function () {
          return this._playerImpl.getMediaBytesTotal();
        };

        v2.isFLV = function () {
          return this._mediaType == mx.controls.streamingmedia.StreamingMediaConstants.FLV_MEDIA_TYPE;
        };

        v2.isMP3 = function () {
          return this._mediaType == mx.controls.streamingmedia.StreamingMediaConstants.MP3_MEDIA_TYPE;
        };

        v2.__get__mediaType = function () {
          return this._mediaType;
        };

        v2.__set__mediaType = function (aType) {
          this._mediaType = aType;
          return this.__get__mediaType();
        };

        v2.__get__totalTime = function () {
          var v2;
          if (this._playerImpl == null) {
            v2 = this._totalTime;
            return v2;
          }
          v2 = this._playerImpl.getTotalTime();
          return v2;
        };

        v2.__set__totalTime = function (aTime) {
          this._totalTime = aTime;
          if (this._playerImpl instanceof mx.controls.streamingmedia.FLVPlayer) {
            this._playerImpl.setTotalTime(aTime);
          } else {
            if (this._playerImpl instanceof mx.controls.streamingmedia.RTMPPlayer) {
              this._playerImpl.setTotalTime(aTime);
            }
          }
          return this.__get__totalTime();
        };

        v2.getCuePoints = function () {
          return this._cuePoints;
        };

        v2.__get__cuePoints = function () {
          return this.getCuePoints();
        };

        v2.setCuePoints = function (cp) {
          this._cuePoints = cp;
          var v2 = 0;
          while (v2 < this._cuePoints.length) {
            this._cuePoints[v2].display = this;
            ++v2;
          }
        };

        v2.__set__cuePoints = function (cp) {
          this.setCuePoints(cp);
          return this.__get__cuePoints();
        };

        v2.getCuePoint = function (pointName) {
          var v3 = null;
          var v2 = this.getCuePointIndex(pointName);
          if (v2 > -1) {
            v3 = this._cuePoints[v2];
          }
          return v3;
        };

        v2.addCuePoint = function (aName, aTime) {
          var v2 = new mx.controls.streamingmedia.CuePoint(aName, aTime);
          this.addCuePointObject(v2);
        };

        v2.addCuePointObject = function (aCuePoint) {
          aCuePoint.display = this;
          this._cuePoints.push(aCuePoint);
        };

        v2.removeCuePoint = function (aCuePoint) {
          var v2 = this.getCuePointIndex(aCuePoint.name);
          if (v2 > -1) {
            this._cuePoints.splice(v2, 1);
          }
        };

        v2.removeAllCuePoints = function () {
          this._cuePoints.length = 0;
          this._mostRecentCuePoint = undefined;
        };

        v2.__get__mostRecentCuePoint = function () {
          return this._mostRecentCuePoint;
        };

        v2.__get__mostRecentCuePointName = function () {
          return this._mostRecentCuePoint.name;
        };

        v2.__get__mostRecentCuePointTime = function () {
          return this._mostRecentCuePoint.time;
        };

        v2.handleEvent = function (ev) {
          if (ev.type == 'click' && ev.detail == 'play') {
            this.handlePlayEvent(ev);
          } else {
            if (ev.type == 'click' && ev.detail == 'pause') {
              this.handlePauseEvent(ev);
            } else {
              if (ev.type == 'playheadChange') {
                this.handlePlayheadChangeEvent(ev);
              } else {
                if (ev.type == 'volume') {
                  this.handleVolumeEvent(ev);
                } else {
                  if (ev.type == 'scrubbing') {
                    this.handleScrubbingEvent(ev);
                  } else {
                    this.handleUnrecognizedEvent(ev);
                  }
                }
              }
            }
          }
        };

        v2.handlePlayEvent = function (ev) {
          this.play();
        };

        v2.handleStopEvent = function (ev) {
          this.stop();
        };

        v2.handlePauseEvent = function (ev) {
          this.pause();
        };

        v2.handleRewindEvent = function (ev) {
          this.__set__playheadTime(0);
        };

        v2.handleFastForwardEvent = function (ev) {
          var v2 = this.__get__totalTime();
          this.__set__playheadTime(v2);
        };

        v2.handlePlayheadChangeEvent = function (ev) {
          var v3 = ev.detail;
          var v2 = (v3 / 100) * this.__get__totalTime();
          this._fireCuePoints = this._scrubbing;
          this.__set__playheadTime(v2);
        };

        v2.handleVolumeEvent = function (ev) {
          var v2 = ev.detail;
          this.__set__volume(v2);
        };

        v2.handleScrubbingEvent = function (ev) {
          this._scrubbing = ev.detail;
        };

        v2.handleUnrecognizedEvent = function (ev) {};

        v2.getCuePointIndex = function (pointName) {
          var v3 = -1;
          var v2 = 0;
          for (;;) {
            if (!(v2 < this._cuePoints.length && v3 == -1)) break;
            if (this._cuePoints[v2].name == pointName) {
              v3 = v2;
            }
            ++v2;
          }
          return v3;
        };

        v2.poll = function (first) {
          var v4 = this.__get__playheadTime();
          var v8 = this.__get__bytesLoaded();
          if (v4 != this._priorTime) {
            if (this._mediaType == 'MP3' && this._playerImpl.isPlaying() && !this._started) {
              this._playerImpl.playStarted();
              var v9 = this.__get__playheadTime();
              if (this._startingTime - 0.1 < v9 && v9 < this._startingTime + 0.1) {
                this._started = true;
                var v10 = {'target': this, 'type': 'start'};
                this.dispatchEvent(v10);
              }
            }
            v10 = {'type': 'change', 'target': this};
            this.dispatchEvent(v10);
          }
          var v7 = false;
          if (!this._fullyLoaded && this.__get__bytesLoaded() >= this.__get__bytesTotal() - 100) {
            this._fullyLoaded = true;
            this._playerImpl.mediaLoaded();
            v7 = true;
          } else {
            if (first || v8 != this._priorBytesLoaded) {
              v7 = true;
            }
          }
          if (v7) {
            v10 = {'type': 'progress', 'target': this};
            this.dispatchEvent(v10);
          }
          var v2 = null;
          var v3 = 0;
          for (;;) {
            if (!(this._fireCuePoints && v3 < this._cuePoints.length)) break;
            v2 = this._cuePoints[v3];
            if (this._priorTime < v2.time && v4 >= v2.time || this._priorTime > v2.time && v4 <= v2.time) {
              this._mostRecentCuePoint = v2;
              v10 = {'type': 'cuePoint', 'target': this, 'cuePointName': v2.name, 'cuePointTime': v2.time};
              this.dispatchEvent(v10);
            }
            ++v3;
          }
          this._fireCuePoints = true;
          if (this._sendCompleteEvent) {
            this._sendCompleteEvent = false;
            v10 = {'type': 'complete', 'target': this};
            this.dispatchEvent(v10);
          }
          this._priorTime = v4;
          this._priorBytesLoaded = v8;
        };

        v2.isRtmp = function (mediaUrl) {
          if (mediaUrl != null) {
            var v1;
            v1 = mediaUrl.toLowerCase();
            return v1.indexOf('rtmp') == 0;
          }
          return false;
        };

        v2.associateController = function (c) {
          c.addEventListener('click', this);
          c.addEventListener('playheadChange', this);
          c.addEventListener('volume', this);
          c.addEventListener('scrubbing', this);
          this.addEventListener('change', c);
          this.addEventListener('progress', c);
          this.addEventListener('complete', c);
        };

        v2.setSize = function (w, h, noEvent) {
          super.setSize(w, h, noEvent);
          this.invalidate();
        };

        v2.__get__enabled = function () {
          return this._enabled;
        };

        v2.__set__enabled = function (is) {
          if (this._enabled == is) {
            return undefined;
          }
          this._enabled = is;
          if (is) {
            if (this._playingBeforeDisabled) {
              this.play();
              this._playingBeforeDisabled = false;
            }
          } else {
            this._playingBeforeDisabled = this.playing;
            if (this._playingBeforeDisabled && this._playerImpl instanceof mx.controls.streamingmedia.MP3Player) {
              this._playingBeforeDisabled = !this._playerImpl.willStop();
            }
            this.pause();
          }
          return this.__get__enabled();
        };

        v2.onUnload = function () {
          this._playerImpl.close();
        };

        v1.symbolName = 'MediaDisplay';
        v1.symbolOwner = mx.controls.MediaDisplay;
        v2.className = 'MediaDisplay';
        v1.version = '2.0.2.126';
        v2.clipParameters = {'mediaType': 'FLV', 'contentPath': '', 'totalTime': 0, 'autoSize': true, 'autoPlay': true, 'initCuePointNames': new Array(), 'initCuePointTimes': new Array(), 'fps': 30};
        v2._priorTime = 0;
        v2._priorBytesLoaded = 0;
        v2._scrubbing = false;
        v2._fireCuePoints = true;
        v2._enabled = true;
        v2.makeVideoVisible = false;
        v2.addProperty('aspectRatio', v2.__get__aspectRatio, v2.__set__aspectRatio);
        v2.addProperty('autoPlay', v2.__get__autoPlay, v2.__set__autoPlay);
        v2.addProperty('autoSize', v2.__get__autoSize, v2.__set__autoSize);
        v2.addProperty('bytesLoaded', v2.__get__bytesLoaded, function () {});
        v2.addProperty('bytesTotal', v2.__get__bytesTotal, function () {});
        v2.addProperty('contentPath', v2.__get__contentPath, v2.__set__contentPath);
        v2.addProperty('cuePoints', v2.__get__cuePoints, v2.__set__cuePoints);
        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        v2.addProperty('mediaType', v2.__get__mediaType, v2.__set__mediaType);
        v2.addProperty('mostRecentCuePoint', v2.__get__mostRecentCuePoint, function () {});
        v2.addProperty('mostRecentCuePointName', v2.__get__mostRecentCuePointName, function () {});
        v2.addProperty('mostRecentCuePointTime', v2.__get__mostRecentCuePointTime, function () {});
        v2.addProperty('playheadTime', v2.__get__playheadTime, v2.__set__playheadTime);
        v2.addProperty('playing', v2.__get__playing, function () {});
        v2.addProperty('preferredHeight', v2.__get__preferredHeight, function () {});
        v2.addProperty('preferredWidth', v2.__get__preferredWidth, function () {});
        v2.addProperty('totalTime', v2.__get__totalTime, v2.__set__totalTime);
        v2.addProperty('videoHeight', v2.__get__videoHeight, function () {});
        v2.addProperty('videoWidth', v2.__get__videoWidth, function () {});
        v2.addProperty('volume', v2.__get__volume, v2.__set__volume);
        ASSetPropFlags(mx.controls.MediaDisplay.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 179 __Packages.mx.controls.MediaController {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.MediaController) {
        var v1 = function () {
          super();
        };

        mx.controls.MediaController = v1;
        var v2 = new mx.core.UIComponent();
        mx.controls.MediaController.prototype = v2;
        v2.__get__lastProgressMediaType = function () {
          return this._lastProgressMediaType;
        };

        v2.init = function (Void) {
          mx.controls.streamingmedia.Tracer.trace('MediaController.init: start: policy=' + this._controllerPolicy);
          this.initializeParameters();
          mx.controls.streamingmedia.Tracer.trace('MediaController.init: after initializeParameters: policy=' + this._controllerPolicy);
          var v3 = this._width;
          var v4 = this._height;
          super.init();
          if (this._horizontal) {
            v3 = Math.max(mx.controls.MediaController.MINIMUM_HORIZONTAL_WIDTH, v3);
            v4 = Math.max(mx.controls.MediaController.MINIMUM_HORIZONTAL_OPEN_HEIGHT, v4);
          } else {
            v3 = Math.max(mx.controls.MediaController.MINIMUM_VERTICAL_OPEN_WIDTH, v3);
            v4 = Math.max(mx.controls.MediaController.MINIMUM_VERTICAL_HEIGHT, v4);
          }
          this.setSize(v3, v4, true);
          mx.controls.streamingmedia.Tracer.trace('MediaController.init: after setSize ' + this.__get__width() + 'x' + this.__get__height() + ' at (' + this._x + ',' + this._y + ')');
          this._priorPolicy = this._controllerPolicy;
          this.createDefaultStrings();
          mx.controls.streamingmedia.Tracer.trace('MediaController.init: Initialized properties:');
          mx.controls.streamingmedia.Tracer.trace('  controllerPolicy=' + this._controllerPolicy);
          mx.controls.streamingmedia.Tracer.trace('  horizontal=' + this._horizontal);
          mx.controls.streamingmedia.Tracer.trace('  activePlayControl=' + this._activePlayControl);
          mx.controls.streamingmedia.Tracer.trace('  backgroundStyle=' + this._backgroundStyle);
          if (this._controllerPolicy == 'auto') {
            this._isOpen = false;
            this._priorMouseOver = false;
            this._closeId = null;
            this._openId = null;
            Mouse.addListener(this);
            this.gotoAndStop(this.getClosedFrameName());
          } else {
            if (this._controllerPolicy == 'on') {
              this._isOpen = true;
              this.gotoAndStop(this.getOpenFrameName());
            } else {
              if (this._controllerPolicy == 'off') {
                this._isOpen = false;
                this.gotoAndStop(this.getClosedFrameName());
              }
            }
          }
          this._isPlaying = this._activePlayControl == 'pause';
          this._playPercent = 0;
          this._playTime = 0;
          this._volume = mx.controls.streamingmedia.StreamingMediaConstants.DEFAULT_VOLUME;
          this.setOpenUpOrLeft(false);
          this.setListeningForPlayheadMoveEvent(true);
          this.tabEnabled = false;
          this.tabChildren = true;
          this.playAtBeginning = false;
          this._screenAccommodator = new mx.controls.streamingmedia.ScreenAccommodator(this);
          this.redraw(true);
        };

        v2.initializeParameters = function () {
          if (this.__get__horizontal() == null) {
            this.__set__horizontal(true);
          }
          if (this.__get__controllerPolicy() == null) {
            this.__set__controllerPolicy('auto');
          }
          if (this.__get__backgroundStyle() == null) {
            this.__set__backgroundStyle('default');
          }
          if (this.__get__activePlayControl() == null) {
            this.__set__activePlayControl('pause');
          }
        };

        v2.getOpenFrameName = function () {
          return this._horizontal ? 'openHorizontal' : 'openVertical';
        };

        v2.getClosedFrameName = function () {
          return this._horizontal ? 'closedHorizontal' : 'closedVertical';
        };

        v2.draw = function (Void) {
          if (this._isOpen) {
            this.gotoAndStop(this.getOpenFrameName());
            this._playBar.draw();
          } else {
            this.gotoAndStop(this.getClosedFrameName());
            this._miniPlayBar.draw();
          }
          this._loadBar.draw();
          if (this._horizontal) {
            this.positionControlsHorizontal();
          } else {
            this.positionControlsVertical();
          }
          this.drawChrome();
        };

        v2.positionControlsVertical = function () {
          if (this._isOpen) {
            this._volumeControl._x = (this.__get__width() - this._volumeControl._width) / 2;
            this._volumeControl._y = this.__get__height() - this._volumeControl._height - 8;
            this._buttons._x = (this.__get__width() - this._buttons._width) / 2;
            this._buttons._y = this.__get__height() - this._buttons._height - this._volumeControl._height - 16;
            this._playBar._x = (this.__get__width() - this._playBar._width) / 2;
            this._loadBar._x = this._playBar._x + this._playBar._width - 4;
          } else {
            this._loadBar._x = mx.controls.MediaController.LOADBAR_VERTICAL_CLOSED_X;
            this._miniPlayBar._x = mx.controls.MediaController.MINIPLAYBAR_VERTICAL_CLOSED_X;
          }
        };

        v2.positionControlsHorizontal = function () {
          if (this._isOpen) {
            this._loadBar._y = mx.controls.MediaController.LOADBAR_HORIZONTAL_OPEN_Y;
            this._buttons._x = 8;
            this._buttons._y = this.__get__height() - this._buttons._height - 8;
            this._volumeControl._x = this.__get__width() - this._volumeControl._width - 8;
            this._volumeControl._y = this.__get__height() - this._volumeControl._height - 8;
          } else {
            this._loadBar._y = mx.controls.MediaController.LOADBAR_HORIZONTAL_CLOSED_Y;
          }
        };

        v2.drawChrome = function (wi, he) {
          if (wi == null) {
            if (this._horizontal) {
              wi = this.width;
            } else {
              wi = this._isOpen ? this.__get__width() : mx.controls.MediaController.CLOSED_VERTICAL_WIDTH;
            }
          }
          if (he == null) {
            if (this._horizontal) {
              he = this._isOpen ? this.__get__height() : mx.controls.MediaController.CLOSED_HORIZONTAL_HEIGHT;
            } else {
              he = this.height;
            }
          }
          this._chrome.visible = this.__get__backgroundStyle() == 'default';
          this._chrome.showToggles = false;
          this._chrome.setSize(wi, he);
          this._chrome.draw();
        };

        v2.addSecondChrome = function (theChrome, closedHeight, openHeight, closedWidth, openWidth, fixedEnd) {
          this._secondChrome = theChrome;
          this._secondChromeClosedHeight = closedHeight;
          this._secondChromeOpenHeight = openHeight;
          this._secondChromeClosedWidth = closedWidth;
          this._secondChromeOpenWidth = openWidth;
          this._secondChromeFixedEnd = fixedEnd;
        };

        v2.removeSecondChrome = function () {
          this._secondChrome = null;
        };

        v2.__get__expanded = function () {
          return this._isOpen;
        };

        v2.onMouseMove = function () {
          var v5 = _root._xmouse;
          var v4 = _root._ymouse;
          var v3 = this.hitTest(v5, v4, true);
          if (v3 && this._closeId != null || this.isNotAnimating()) {
            clearInterval(this._closeId);
            this._closeId = null;
          }
          if (!v3 && this._openId != null || this.isNotAnimating()) {
            clearInterval(this._openId);
            this._openId = null;
          }
          if (v3 && !this._isOpen && this._controllerPolicy == 'auto' && this._openId == null && !this.isNotAnimating()) {
            this._openId = setInterval(this, 'expand', mx.controls.MediaController.OPEN_DELAY);
          } else {
            if (!v3 && this._isOpen && this._controllerPolicy == 'auto' && this._closeId == null && !this.isNotAnimating()) {
              this._closeId = setInterval(this, 'contract', mx.controls.MediaController.CLOSE_DELAY);
            }
          }
          this._priorMouseOver = v3;
        };

        v2.expand = function (force) {
          clearInterval(this._openId);
          this._openId = null;
          if (this._controllerPolicy == 'auto' || force) {
            this._isOpen = true;
            this._animationStart = getTimer();
            this._animationOpen = true;
            this._priorMouseOver = true;
            this.onEnterFrame = this.animate;
          }
        };

        v2.contract = function (force) {
          mx.controls.streamingmedia.Tracer.trace('MediaController.contract: force=' + force + ', animating=' + this._animating + ', opening=' + this._animationOpen);
          if (this._animating && !this._animationOpen) {
            return undefined;
          }
          clearInterval(this._closeId);
          this._closeId = null;
          if (this._controllerPolicy == 'auto' || force) {
            this._isOpen = false;
            this._animationStart = getTimer();
            this._animationOpen = false;
            this._priorMouseOver = false;
            this.gotoAndStop(this.getClosedFrameName());
            this.animate();
            this.onEnterFrame = this.animate;
          }
        };

        v2.animate = function () {
          this._animating = true;
          var v4 = getTimer() - this._animationStart;
          var v3 = Math.min(1, v4 / mx.controls.MediaController.ANIMATION_TIME);
          mx.controls.streamingmedia.Tracer.trace('MediaController.animate: _animationStart=' + this._animationStart + ', elapsed=' + v4 + ', portion=' + v3 + ', ANIMATION_TIME=' + mx.controls.MediaController.ANIMATION_TIME);
          this.sizeMainChrome(v3);
          if (this._secondChrome != null) {
            this.sizeSecondChrome(v3);
          }
          this.animateBars(v3);
          if (v4 >= mx.controls.MediaController.ANIMATION_TIME || _global.isLivePreview) {
            this.animationDone();
          }
        };

        v2.animationDone = function () {
          mx.controls.streamingmedia.Tracer.trace('MediaController.animationDone');
          this._animating = false;
          delete this.onEnterFrame;
          this.refreshBars();
          if (this._animationOpen) {
            this.gotoAndStop(this.getOpenFrameName());
          } else {}
          this.redraw(true);
        };

        v2.sizeMainChrome = function (portion) {
          var v2 = this.__get__height();
          var v3 = this.__get__width();
          if (this._horizontal) {
            var v4 = (this.__get__height() - mx.controls.MediaController.CLOSED_HORIZONTAL_HEIGHT) * portion;
            if (this._animationOpen) {
              v2 = mx.controls.MediaController.CLOSED_HORIZONTAL_HEIGHT + v4;
            } else {
              v2 = this.__get__height() - v4;
            }
          } else {
            var v4 = (this.__get__width() - mx.controls.MediaController.CLOSED_VERTICAL_WIDTH) * portion;
            if (this._animationOpen) {
              v3 = mx.controls.MediaController.CLOSED_VERTICAL_WIDTH + v4;
            } else {
              v3 = this.__get__width() - v4;
            }
          }
          if (this.isOpenUpOrLeft()) {
            var v6 = this._chrome.width - v3;
            var v5 = this._chrome.height - v2;
            this._x += v6;
            this._y += v5;
          }
          this.drawChrome(v3, v2);
        };

        v2.sizeSecondChrome = function (portion) {
          var v3;
          var v4;
          var v2;
          if (this._horizontal) {
            v4 = this._secondChromeClosedWidth;
            v2 = (this._secondChromeOpenHeight - this._secondChromeClosedHeight) * portion;
            v3 = this._animationOpen ? this._secondChromeClosedHeight + v2 : this._secondChromeOpenHeight - v2;
            if (this._secondChromeFixedEnd) {
              this._secondChrome._y = this._secondChrome._y - v3 + this._secondChrome.height;
            }
          } else {
            v3 = this._secondChromeClosedHeight;
            v2 = (this._secondChromeOpenWidth - this._secondChromeClosedWidth) * portion;
            v4 = this._animationOpen ? this._secondChromeClosedWidth + v2 : this._secondChromeOpenWidth - v2;
            if (this._secondChromeFixedEnd) {
              this._secondChrome._x = this._secondChrome._x - v4 + this._secondChrome.width;
            }
          }
          this._secondChrome.setSize(v4, v3);
          this._secondChrome.draw();
        };

        v2.animateBars = function (portion) {
          var v2;
          if (this._horizontal) {
            v2 = (mx.controls.MediaController.LOADBAR_HORIZONTAL_OPEN_Y - mx.controls.MediaController.LOADBAR_HORIZONTAL_CLOSED_Y) * portion;
            var v8 = this._animationOpen ? mx.controls.MediaController.LOADBAR_HORIZONTAL_CLOSED_Y + v2 : mx.controls.MediaController.LOADBAR_HORIZONTAL_OPEN_Y - v2;
            this._loadBar._y = v8;
          } else {
            var v5 = this._chrome.width / 2;
            v2 = (v5 - mx.controls.MediaController.MINIPLAYBAR_VERTICAL_CLOSED_X) * portion;
            v2 = Math.max(0, v2);
            var v9 = this._animationOpen ? mx.controls.MediaController.MINIPLAYBAR_VERTICAL_CLOSED_X + v2 : v5 - v2;
            this._miniPlayBar._x = v9;
            this._loadBar._x = this._miniPlayBar._x + this._miniPlayBar._width;
            var v3 = this._loadBar.getClosedHeight();
            var v4 = this._loadBar.getOpenHeight();
            v2 = (v3 - v4) * portion;
            var v6 = this._animationOpen ? v3 - v2 : v4 + v2;
            this._loadBar.draw(v6);
            this._miniPlayBar.draw(v6);
          }
        };

        v2.getLoadBar = function () {
          return this._loadBar;
        };

        v2.refreshBars = function () {
          mx.controls.streamingmedia.Tracer.trace('MediaController.refreshBars: load=' + this._loadPercent + ', play=' + this._playPercent);
          this._loadBar.setCompletionPercentage(this._loadPercent);
          this._playBar.setCompletionPercentage(this._playPercent);
          this._miniPlayBar.setCompletionPercentage(this._playPercent);
        };

        v2.getLoadPercent = function () {
          return this._loadPercent;
        };

        v2.getMinimumOpenHeight = function () {
          if (!this._horizontal) {
            var v2 = mx.controls.MediaController.MINIMUM_VERTICAL_HEIGHT;
            return v2;
          }
          var v2 = mx.controls.MediaController.MINIMUM_HORIZONTAL_OPEN_HEIGHT;
          return v2;
        };

        v2.getMinimumClosedHeight = function () {
          if (!this._horizontal) {
            var v2 = mx.controls.MediaController.MINIMUM_VERTICAL_HEIGHT;
            return v2;
          }
          var v2 = mx.controls.MediaController.CLOSED_HORIZONTAL_HEIGHT;
          return v2;
        };

        v2.getMinimumOpenWidth = function () {
          if (!this._horizontal) {
            var v2 = mx.controls.MediaController.MINIMUM_VERTICAL_OPEN_WIDTH;
            return v2;
          }
          var v2 = mx.controls.MediaController.MINIMUM_HORIZONTAL_WIDTH;
          return v2;
        };

        v2.getMinimumClosedWidth = function () {
          if (!this._horizontal) {
            var v2 = mx.controls.MediaController.CLOSED_VERTICAL_WIDTH;
            return v2;
          }
          var v2 = mx.controls.MediaController.MINIMUM_HORIZONTAL_WIDTH;
          return v2;
        };

        v2.__get__controllerPolicy = function () {
          return this._controllerPolicy;
        };

        v2.__set__controllerPolicy = function (aPolicy) {
          mx.controls.streamingmedia.Tracer.trace('MediaController.set controllerPolicy: old=' + this._controllerPolicy + ', new=' + aPolicy);
          if (aPolicy == this._controllerPolicy) {
            return undefined;
          }
          this._controllerPolicy = aPolicy;
          if (this._controllerPolicy == 'on') {
            Mouse.removeListener(this);
            if (!this._isOpen) {
              this.expand(true);
            }
          } else {
            if (this._controllerPolicy == 'off') {
              Mouse.removeListener(this);
              if (this._isOpen) {
                mx.controls.streamingmedia.Tracer.trace('MediaController.set controllerPolicy(off): about to call contract');
                this.contract(true);
              }
            } else {
              if (this._controllerPolicy == 'auto') {
                this._closeId = null;
                this._openId = null;
                Mouse.addListener(this);
                var v3 = this.hitTest(_root._xmouse, _root._ymouse, true);
                if (this._isOpen && !v3) {
                  mx.controls.streamingmedia.Tracer.trace('MediaController.set controllerPolicy(auto): about to call contract');
                  this.contract();
                } else {
                  if (!this._isOpen && v3) {
                    this.expand();
                  }
                }
              } else {}
            }
          }
          return this.__get__controllerPolicy();
        };

        v2.__get__horizontal = function () {
          return this._horizontal;
        };

        v2.__set__horizontal = function (isHoriz) {
          if (isHoriz != this._horizontal) {
            this._horizontal = isHoriz;
            var v2 = this.__get__height();
            var v3 = this.__get__width();
            if (isHoriz) {
              v2 = Math.max(v2, mx.controls.MediaController.MINIMUM_HORIZONTAL_WIDTH);
              v3 = Math.max(v3, mx.controls.MediaController.MINIMUM_HORIZONTAL_OPEN_HEIGHT);
            } else {
              v2 = Math.max(v2, mx.controls.MediaController.MINIMUM_VERTICAL_OPEN_WIDTH);
              v3 = Math.max(v3, mx.controls.MediaController.MINIMUM_VERTICAL_HEIGHT);
            }
            this.setSize(v2, v3);
            this.invalidate();
          } else {
            this._horizontal = isHoriz;
          }
          return this.__get__horizontal();
        };

        v2.__get__volume = function () {
          return this._volume;
        };

        v2.__set__volume = function (vol) {
          this._volume = vol;
          (this._volumeControl.getHandle()).setVolume(vol);
          return this.__get__volume();
        };

        v2.__get__backgroundStyle = function () {
          return this._backgroundStyle;
        };

        v2.__set__backgroundStyle = function (aStyle) {
          this._backgroundStyle = aStyle;
          this.drawChrome();
          return this.__get__backgroundStyle();
        };

        v2.broadcastEvent = function (eventType, detailArg) {
          var v2 = {'type': eventType, 'target': this, 'detail': detailArg};
          if (eventType == 'volume') {
            this._volume = detailArg;
          }
          this.dispatchEvent(v2);
        };

        v2.handleEvent = function (ev) {
          if (ev.type == 'change') {
            this.playAtBeginning = false;
            if (this.isListeningForPlayheadMoveEvent()) {
              this.handleChangeEvent(ev);
            }
          } else {
            if (ev.type == 'progress') {
              this.handleProgressEvent(ev);
            } else {
              if (ev.type == 'complete') {
                this.handleCompleteEvent(ev);
              } else {
                if (ev.type == 'scrubbing') {
                  this.handleScrubbingEvent(ev);
                } else {
                  this.handleUnrecognizedEvent(ev);
                }
              }
            }
          }
        };

        v2.isListeningForPlayheadMoveEvent = function () {
          return this._listenForPlayheadMoveEvent;
        };

        v2.setListeningForPlayheadMoveEvent = function (listen) {
          this._listenForPlayheadMoveEvent = listen;
        };

        v2.isNotAnimating = function () {
          return this._notAnimating;
        };

        v2.setNotAnimating = function (still) {
          this._notAnimating = still;
        };

        v2.__get__activePlayControl = function () {
          return this._activePlayControl;
        };

        v2.__set__activePlayControl = function (aControl) {
          this._activePlayControl = aControl;
          return this.__get__activePlayControl();
        };

        v2.__get__playing = function () {
          return this.isPlaying();
        };

        v2.__set__playing = function (playFlag) {
          this.setPlaying(playFlag);
          return this.__get__playing();
        };

        v2.isPlaying = function () {
          return this._isPlaying;
        };

        v2.setPlaying = function (playFlag) {
          this._isPlaying = playFlag;
          this._playBar.setIsPlaying(playFlag);
          if (playFlag) {
            this._buttons.playPauseButtons.showPauseButton();
          } else {
            this._buttons.playPauseButtons.showPlayButton();
          }
        };

        v2.handleChangeEvent = function (ev) {
          var v2 = ev.target;
          this._playTime = v2.playheadTime;
          var v3 = v2.__get__totalTime();
          this._playPercent = 100 * this._playTime / v3;
          if (this._isOpen) {
            this._playBar.setCompletionPercentage(this._playPercent);
            this._playBar.setTime(this._playTime);
          } else {
            this._miniPlayBar.setCompletionPercentage(this._playPercent);
          }
        };

        v2.handleProgressEvent = function (ev) {
          if (ev.target.isRtmp(ev.target.contentPath)) {
            this._loadPercent = 100;
          } else {
            var v4 = ev.target.bytesLoaded;
            var v3 = ev.target.bytesTotal;
            this._loadPercent = 100 * v4 / v3;
          }
          this.refreshBars();
          this._lastProgressMediaType = ev.target.mediaType;
          this.evaluateToEnd();
        };

        v2.evaluateToEnd = function () {
          if (!this._isOpen) {
            return undefined;
          }
          var v2 = false;
          if (this._loadPercent >= 99 && this.__get__enabled()) {
            if (this._lastProgressMediaType == 'MP3') {
              v2 = true;
            } else {
              if (this._lastProgressMediaType == 'FLV' && !mx.controls.streamingmedia.StreamingMediaConstants.DISABLE_FLV_TOEND) {
                v2 = true;
              }
            }
          }
          this._buttons.toEndButton.enabled = v2;
        };

        v2.handleCompleteEvent = function (ev) {
          if (!this.isScrubbing() && !this._animating) {
            var v2 = ev.target;
            this._playTime = v2.totalTime;
            this._playPercent = 100;
            if (this._isOpen) {
              this._playBar.setCompletionPercentage(this._playPercent);
              this._playBar.setTime(this._playTime);
            } else {
              this._miniPlayBar.setCompletionPercentage(this._playPercent);
            }
            this.setPlaying(false);
            mx.controls.streamingmedia.Tracer.trace('MediaController.handleCompleteEvent: playAtBeginning=true');
            this.playAtBeginning = true;
          }
        };

        v2.handleScrubbingEvent = function (ev) {
          this._listenForPlayheadMoveEvent = !ev.detail;
        };

        v2.handleUnrecognizedEvent = function (ev) {
          mx.controls.streamingmedia.Tracer.trace('received an unrecognized event of type ' + ev.type + ' with target ' + ev.target);
        };

        v2.createDefaultStrings = function () {
          this._strings = new Object();
          this._strings.paused = 'PAUSED';
          this._strings.streaming = 'STREAMING';
        };

        v2.getLocalizedString = function (id) {
          var v2 = this._strings[id];
          return v2;
        };

        v2.__get__playTime = function () {
          return this._playTime;
        };

        v2.__set__playTime = function (aTime) {
          this._playTime = aTime;
          return this.__get__playTime();
        };

        v2.__get__playPercent = function () {
          return this._playPercent;
        };

        v2.__set__playPercent = function (aPercent) {
          this._playPercent = aPercent;
          return this.__get__playPercent();
        };

        v2.isOpenUpOrLeft = function () {
          return this._openUpOrLeft;
        };

        v2.setOpenUpOrLeft = function (is) {
          this._openUpOrLeft = is;
        };

        v2.associateDisplay = function (d) {
          d.associateController(this);
        };

        v2.setSize = function (w, h, noEvent) {
          super.setSize(w, h, noEvent);
          this.invalidate();
        };

        v2.__get__enabled = function () {
          return this._enabled;
        };

        v2.__set__enabled = function (is) {
          mx.controls.streamingmedia.Tracer.trace('MediaController.set enabled to ' + is);
          this._enabled = is;
          this._buttons.toStartButton.enabled = is;
          this._buttons.toEndButton.enabled = is;
          this._buttons.playPauseButtons.enabled = is;
          this._volumeControl._muteButton.muteSimpleButton.enabled = is;
          this._volumeControl._loudButton.loudSimpleButton.enabled = is;
          this._playBar.__set__enabled(is);
          (this._volumeControl.getHandle()).__set__enabled(is);
          if (is) {
            if (this._priorPolicy != null) {
              this.__set__controllerPolicy(this._priorPolicy);
            }
          } else {
            this._priorPolicy = this.controllerPolicy;
            if (this.__get__controllerPolicy() == 'auto') {
              this.__set__controllerPolicy('off');
            }
          }
          return this.__get__enabled();
        };

        v2.isScrubbing = function () {
          return this._playBar.isScrubbing();
        };

        v1.symbolName = 'MediaController';
        v1.symbolOwner = mx.controls.MediaController;
        v2.className = 'MediaController';
        v1.version = '2.0.2.126';
        v2.clipParameters = {'controllerPolicy': 'auto', 'horizontal': true, 'activePlayControl': 'pause', 'backgroundStyle': 'default'};
        v1.MINIMUM_HORIZONTAL_WIDTH = 202;
        v1.CLOSED_HORIZONTAL_HEIGHT = 25;
        v1.MINIMUM_HORIZONTAL_OPEN_HEIGHT = 63;
        v1.LOADBAR_HORIZONTAL_CLOSED_Y = 14;
        v1.LOADBAR_HORIZONTAL_OPEN_Y = 24;
        v1.MINIMUM_VERTICAL_HEIGHT = 202;
        v1.CLOSED_VERTICAL_WIDTH = 25;
        v1.MINIMUM_VERTICAL_OPEN_WIDTH = 80;
        v1.LOADBAR_VERTICAL_CLOSED_X = 14;
        v1.MINIPLAYBAR_VERTICAL_CLOSED_X = 8;
        v1.ANIMATION_TIME = 250;
        v1.CLOSE_DELAY = 1000;
        v1.OPEN_DELAY = 100;
        v1.LOCALIZED_FILE = 'streamingmediacontroller.xml';
        v1.H_BORDER = 8;
        v1.V_BORDER = 8;
        v2._animating = false;
        v2._enabled = true;
        v2.addProperty('activePlayControl', v2.__get__activePlayControl, v2.__set__activePlayControl);
        v2.addProperty('backgroundStyle', v2.__get__backgroundStyle, v2.__set__backgroundStyle);
        v2.addProperty('controllerPolicy', v2.__get__controllerPolicy, v2.__set__controllerPolicy);
        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        v2.addProperty('expanded', v2.__get__expanded, function () {});
        v2.addProperty('horizontal', v2.__get__horizontal, v2.__set__horizontal);
        v2.addProperty('lastProgressMediaType', v2.__get__lastProgressMediaType, function () {});
        v2.addProperty('playPercent', v2.__get__playPercent, v2.__set__playPercent);
        v2.addProperty('playTime', v2.__get__playTime, v2.__set__playTime);
        v2.addProperty('playing', v2.__get__playing, v2.__set__playing);
        v2.addProperty('volume', v2.__get__volume, v2.__set__volume);
        ASSetPropFlags(mx.controls.MediaController.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 180 __Packages.mx.controls.streamingmedia.LoadBar {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.LoadBar) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.LoadBar = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.LoadBar.prototype = v2;
        v2.init = function () {
          this._controller = this._parent;
          this.draw();
        };

        v2.isVertical = function () {
          return !this._controller.__get__horizontal();
        };

        v2.getCompletionPercentage = function () {
          var v2;
          if (this.isVertical()) {
            v2 = this.yToPercent(this._fill._height);
            return v2;
          }
          v2 = this.xToPercent(this._fill._width);
          return v2;
        };

        v2.setCompletionPercentage = function (aPercentage) {
          aPercentage = Math.floor(aPercentage);
          if (aPercentage < 0) {
            aPercentage = 0;
          } else {
            if (aPercentage > 100) {
              aPercentage = 100;
            }
          }
          if (this.isVertical()) {
            this._fill._height = this.percentToY(aPercentage);
            this._fill._y = this.getActualHeight() - this._fill._height - 1;
          } else {
            this._fill._width = this.percentToX(aPercentage);
          }
        };

        v2.draw = function (size) {
          var v3 = this.getCompletionPercentage();
          if (this.isVertical()) {
            if (size == null) {
              size = this.getHeight();
            }
            this._y = 8;
            this._border._height = size;
            this._background._height = size - 2;
          } else {
            if (size == null) {
              size = this.getWidth();
            }
            this._x = 8;
            this._border._width = size;
            this._background._width = size - 2;
          }
          this.setCompletionPercentage(v3);
        };

        v2.getWidth = function () {
          var v2;
          if (this.isVertical()) {
            v2 = 3;
            return v2;
          }
          v2 = this._controller.__get__width() - 16;
          return v2;
        };

        v2.getHeight = function () {
          var v2;
          if (this.isVertical()) {
            if (this._controller.__get__expanded()) {
              v2 = this.getOpenHeight();
            } else {
              v2 = this.getClosedHeight();
            }
            return v2;
          }
          v2 = 3;
          return v2;
        };

        v2.getActualHeight = function () {
          return this._border._height;
        };

        v2.getActualWidth = function () {
          return this._border._width;
        };

        v2.getOpenHeight = function () {
          return this._controller.__get__height() - 90;
        };

        v2.getClosedHeight = function () {
          return this._controller.__get__height() - 16;
        };

        v2.xToPercent = function (x) {
          var v2 = 100 * x / (this.getActualWidth() - 2);
          return v2;
        };

        v2.percentToX = function (percent) {
          var v2 = (this.getWidth() - 2) * (percent / 100);
          return v2;
        };

        v2.yToPercent = function (y) {
          var v2 = 100 * (y - 0) / (this.getActualHeight() - 2);
          return v2;
        };

        v2.percentToY = function (percent) {
          var v2 = (this.getActualHeight() - 2) * (percent / 100);
          return v2;
        };

        ASSetPropFlags(mx.controls.streamingmedia.LoadBar.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 181 __Packages.mx.controls.streamingmedia.PlayBar {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.PlayBar) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.PlayBar = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.PlayBar.prototype = v2;
        v2.init = function () {
          this._controller = this._parent;
          this.setCompletionPercentage(this._controller.__get__playPercent());
          this.setTime(this._controller.__get__playTime());
          this.draw();
        };

        v2.isVertical = function () {
          return !this._controller.__get__horizontal();
        };

        v2.getCompletionPercentage = function () {
          var v2;
          if (this.isVertical()) {
            v2 = this.yToPercent(this._thumb._y);
            return v2;
          }
          v2 = this.xToPercent(this._thumb._x);
          return v2;
        };

        v2.setCompletionPercentage = function (aPercentage) {
          aPercentage = Math.floor(aPercentage);
          if (aPercentage < 1) {
            aPercentage = 1;
          } else {
            if (aPercentage > 100) {
              aPercentage = 100;
            }
          }
          if (this.isVertical()) {
            var v3 = this.percentToY(aPercentage);
            this._thumb._y = this.getHeight() - v3 - 9;
          } else {
            var v4 = this.percentToX(aPercentage);
            this._thumb._x = v4;
          }
          this.updateHiliteToMatchThumb();
        };

        v2.updateHiliteToMatchThumb = function () {
          if (this.isVertical()) {
            this._hilite._height = this.getHeight() - this._thumb._y - 6;
            this._hilite._y = this.getHeight() - this._hilite._height - 1;
          } else {
            this._hilite._width = this._thumb._x + 4;
          }
        };

        v2.setTime = function (aTime) {
          var v7 = Math.floor(aTime / 3600);
          var v3 = aTime % 3600;
          var v6 = Math.floor(v3 / 60);
          v3 %= 60;
          var v5 = Math.floor(v3);
          v3 %= 1;
          var v2 = Math.round(v3 * 1000);
          var v4 = v7 + ':' + (v6 < 10 ? '0' : '') + v6 + ':' + (v5 < 10 ? '0' : '') + v5 + '.';
          if (v2 < 10) {
            v4 += '00' + String(v2);
          } else {
            if (v2 < 100) {
              v4 += '0' + String(v2);
            } else {
              v4 += String(v2);
            }
          }
          this._timeTextField.text = v4;
        };

        v2.setIsPlaying = function (isPlaying) {
          if (isPlaying) {
            this._statusTextField.text = this._controller.getLocalizedString(mx.controls.streamingmedia.PlayBar.STREAMING_ID);
            delete this.onEnterFrame;
            this.setDarkText();
          } else {
            this._statusTextField.text = this._controller.getLocalizedString(mx.controls.streamingmedia.PlayBar.PAUSED_ID);
            this._darkenText = false;
            this._textPulseTime = getTimer();
            this.onEnterFrame = this.pulseText;
          }
        };

        v2.getController = function () {
          return this._controller;
        };

        v2.draw = function () {
          var v2 = this.getCompletionPercentage();
          if (this.isVertical()) {
            this._x = (this._controller.__get__width() - this.getWidth()) / 2;
            this._y = 8;
            this._tray.setHeight(this.getHeight());
            this._statusTextField._y = this.getHeight() - 4;
          } else {
            this._x = 8;
            this._tray.setWidth(this.getWidth());
            this._timeTextField._x = this.getWidth() - this._timeTextField._width - 3;
          }
          this.setIsPlaying(this._controller.isPlaying());
          this.setCompletionPercentage(v2);
        };

        v2.getWidth = function () {
          if (!this.isVertical()) {
            var v2 = this._controller.__get__width() - 16;
            return v2;
          }
          var v2 = 20;
          return v2;
        };

        v2.getHeight = function () {
          if (!this.isVertical()) {
            var v2 = 20;
            return v2;
          }
          var v2 = this._controller.__get__height() - 90;
          return v2;
        };

        v2.xToPercent = function (x) {
          var v2 = 100 * ((x + 3) / (this.getWidth() - 3));
          return v2;
        };

        v2.percentToX = function (percent) {
          var v2 = (this.getWidth() - 3) * (percent / 100) - 3;
          return v2;
        };

        v2.yToPercent = function (y) {
          var v2 = 100 * ((this.getHeight() - 3 - y) / this.getHeight());
          return v2;
        };

        v2.percentToY = function (percent) {
          var v2 = (this.getHeight() - 3) * (percent / 100) - 3;
          return v2;
        };

        v2.pulseText = function () {
          var v2 = getTimer() - this._textPulseTime;
          var v5 = Math.min(1, v2 / mx.controls.streamingmedia.PlayBar.PULSE_DURATION);
          var v7 = mx.controls.streamingmedia.PlayBar.PULSE_DURATION * mx.controls.streamingmedia.PlayBar.ACTIVE_PULSE_PORTION;
          var v6 = Math.min(1, v2 / v7);
          var v4 = v6 * (mx.controls.streamingmedia.PlayBar.TEXT_ALPHA_DARK - mx.controls.streamingmedia.PlayBar.TEXT_ALPHA_LIGHT);
          var v3 = this._darkenText ? mx.controls.streamingmedia.PlayBar.TEXT_ALPHA_LIGHT + v4 : mx.controls.streamingmedia.PlayBar.TEXT_ALPHA_DARK - v4;
          this._statusTextField._alpha = v3;
          this._timeTextField._alpha = v3;
          if (v5 >= 1) {
            this._darkenText = !this._darkenText;
            this._textPulseTime = getTimer();
          }
        };

        v2.setDarkText = function () {
          this._statusTextField._alpha = mx.controls.streamingmedia.PlayBar.TEXT_ALPHA_DARK;
          this._timeTextField._alpha = mx.controls.streamingmedia.PlayBar.TEXT_ALPHA_DARK;
        };

        v2.setLightText = function () {
          this._statusTextField._alpha = mx.controls.streamingmedia.PlayBar.TEXT_ALPHA_LIGHT;
          this._timeTextField._alpha = mx.controls.streamingmedia.PlayBar.TEXT_ALPHA_LIGHT;
        };

        v2.__get__enabled = function () {
          return this._thumb.__get__enabled();
        };

        v2.__set__enabled = function (is) {
          this._thumb.__set__enabled(is);
          return this.__get__enabled();
        };

        v2.isScrubbing = function () {
          return this._thumb.isScrubbing();
        };

        v1.TEXT_ALPHA_DARK = 100;
        v1.TEXT_ALPHA_LIGHT = 50;
        v1.PULSE_DURATION = 1400;
        v1.ACTIVE_PULSE_PORTION = 0.4;
        v1.STREAMING_ID = 'streaming';
        v1.PAUSED_ID = 'paused';
        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        ASSetPropFlags(mx.controls.streamingmedia.PlayBar.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 182 __Packages.mx.controls.streamingmedia.StreamingMediaConstants {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.StreamingMediaConstants) {
        var v1 = function () {};

        mx.controls.streamingmedia.StreamingMediaConstants = v1;
        var v2 = v1.prototype;
        v1.FLV_MEDIA_TYPE = 'FLV';
        v1.MP3_MEDIA_TYPE = 'MP3';
        v1.PLAY_PLAY_CONTROL = 'play';
        v1.PAUSE_PLAY_CONTROL = 'pause';
        v1.DEFAULT_VOLUME = 75;
        v1.SCRUBBING = true;
        v1.DISABLE_FLV_TOEND = true;
        ASSetPropFlags(mx.controls.streamingmedia.StreamingMediaConstants.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 183 __Packages.mx.controls.streamingmedia.PlayBarThumb {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.PlayBarThumb) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.PlayBarThumb = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.PlayBarThumb.prototype = v2;
        v2.init = function () {
          this._playBar = this._parent;
          this.__set__enabled((this._playBar.getController()).enabled);
        };

        v2.isVertical = function () {
          return this._playBar.isVertical();
        };

        v2.handlePress = function () {
          this.startThumbDrag();
        };

        v2.startThumbDrag = function () {
          this._dragging = true;
          var v2 = this._playBar.getController();
          v2.broadcastEvent('scrubbing', true);
          this._wasPlaying = v2.isPlaying();
          if (this._wasPlaying) {
            v2.broadcastEvent('click', 'pause');
          }
          this.onMouseMove = this.handleMouseMove;
        };

        v2.onUnload = function () {
          if (this._dragging) {
            this.stopThumbDrag();
          }
        };

        v2.handleRelease = function () {
          if (this._dragging) {
            this.stopThumbDrag();
          }
        };

        v2.handleReleaseOutside = function () {
          if (this._dragging) {
            this.stopThumbDrag();
          }
        };

        v2.stopThumbDrag = function () {
          this._dragging = false;
          var v2 = this._playBar.getController();
          if (this._wasPlaying) {
            v2.broadcastEvent('click', 'play');
          }
          v2.broadcastEvent('scrubbing', false);
          delete this.onMouseMove;
        };

        v2.handleMouseMove = function () {
          var v2 = this._playBar.getController();
          var v8 = (v2.getLoadBar()).getCompletionPercentage() / 100;
          if (this.isVertical()) {
            var v6 = this._playBar.getHeight() - 8;
            var v9 = v6 * (1 - v8) - 2;
            var v3 = this._playBar._ymouse;
            if (v3 < v9) {
              v3 = v9;
            } else {
              if (v3 > v6) {
                v3 = v6;
              }
            }
            this._y = v3;
          } else {
            var v10 = (this._playBar.getWidth() - 6) * v8;
            var v4 = this._playBar._xmouse;
            if (v4 < 0) {
              v4 = 0;
            } else {
              if (v4 > v10) {
                v4 = v10;
              }
            }
            this._x = v4;
          }
          this._playBar.updateHiliteToMatchThumb();
          var v5 = this.isVertical() ? this._playBar.yToPercent(this._y) : this._playBar.xToPercent(this._x);
          if (mx.controls.streamingmedia.StreamingMediaConstants.SCRUBBING) {
            v2.broadcastEvent('playheadChange', v5);
          }
          var v11 = v2.__get__playTime() * 100 / v2.__get__playPercent();
          var v7 = v11 * v5 / 100;
          this._playBar.setTime(v7);
          v2.__set__playPercent(v5);
          v2.__set__playTime(v7);
        };

        v2.__get__enabled = function () {
          return this._enabled;
        };

        v2.__set__enabled = function (is) {
          this._enabled = is;
          if (is) {
            this.onPress = this.handlePress;
            this.onRelease = this.handleRelease;
            this.onReleaseOutside = this.handleReleaseOutside;
          } else {
            if (this._dragging) {
              this.stopThumbDrag();
            }
            delete this.onPress;
            delete this.onRelease;
            delete this.onReleaseOutside;
          }
          return this.__get__enabled();
        };

        v2.isScrubbing = function () {
          return this._dragging;
        };

        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        ASSetPropFlags(mx.controls.streamingmedia.PlayBarThumb.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 184 __Packages.mx.controls.streamingmedia.MiniPlayBar {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.MiniPlayBar) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.MiniPlayBar = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.MiniPlayBar.prototype = v2;
        v2.init = function () {
          this._controller = this._parent;
          this.draw();
        };

        v2.isVertical = function () {
          return !this._controller.__get__horizontal();
        };

        v2.getCompletionPercentage = function () {
          var v2;
          if (this.isVertical()) {
            v2 = this.yToPercent(this._thumb._y);
            return v2;
          }
          v2 = this.xToPercent(this._thumb._x);
          return v2;
        };

        v2.setCompletionPercentage = function (aPercentage) {
          aPercentage = Math.floor(aPercentage);
          if (aPercentage < 1) {
            aPercentage = 1;
          } else {
            if (aPercentage > 100) {
              aPercentage = 100;
            }
          }
          if (this.isVertical()) {
            var v3 = this.percentToY(aPercentage);
            this._thumb._y = this.getActualHeight() - v3 - 1;
            this._hilite._height = v3 - 1;
            this._hilite._y = this.getActualHeight() - v3 - 2;
          } else {
            var v4 = this.percentToX(aPercentage);
            this._thumb._x = v4;
            this._hilite._width = v4 - 1;
          }
        };

        v2.getController = function () {
          return this._controller;
        };

        v2.draw = function (h) {
          if (this.isVertical()) {
            this._y = 8;
            if (h == null) {
              h = this.getHeight();
            }
            this._tray.setHeight(h);
          } else {
            var v3 = this.getWidth();
            this._x = 8;
            this._tray.setWidth(this.getWidth());
          }
          this.setCompletionPercentage(this._controller.__get__playPercent());
        };

        v2.getWidth = function () {
          if (!this.isVertical()) {
            var v2 = this._controller.__get__width() - 16;
            return v2;
          }
          var v2 = 6;
          return v2;
        };

        v2.getHeight = function () {
          if (!this.isVertical()) {
            var v2 = 6;
            return v2;
          }
          var v2 = this._controller.__get__height() - 16;
          return v2;
        };

        v2.getActualHeight = function () {
          var v2 = this._tray.getHeight();
          return v2;
        };

        v2.xToPercent = function (x) {
          var v2 = 100 * x / (this.getWidth() - 2);
          return v2;
        };

        v2.percentToX = function (percent) {
          var v2 = (this.getWidth() - 2) * (percent / 100);
          return v2;
        };

        v2.yToPercent = function (y) {
          var v2 = 100 * (y - 1) / (this.getActualHeight() - 3);
          return v2;
        };

        v2.percentToY = function (percent) {
          var v2 = (this.getActualHeight() - 3) * (percent / 100) + 1;
          return v2;
        };

        ASSetPropFlags(mx.controls.streamingmedia.MiniPlayBar.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 185 __Packages.mx.controls.streamingmedia.VolumeControl {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.VolumeControl) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.VolumeControl = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.VolumeControl.prototype = v2;
        v2.init = function () {
          this.tabEnabled = false;
          this.tabChildren = true;
        };

        v2.getHandle = function () {
          return this._handle;
        };

        ASSetPropFlags(mx.controls.streamingmedia.VolumeControl.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 186 __Packages.mx.controls.streamingmedia.VolumeControlHandle {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.VolumeControlHandle) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.VolumeControlHandle = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.VolumeControlHandle.prototype = v2;
        v2.init = function () {
          this._volumeControl = this._parent;
          this._controller = this._parent._parent;
          this.setVolume(this._controller.__get__volume());
          this.__set__enabled(this._controller.enabled);
          this.tabEnabled = false;
          this.tabChildren = false;
        };

        v2.isVertical = function () {
          return !this._controller.__get__horizontal();
        };

        v2.setVolume = function (aVolume) {
          if (aVolume < 0) {
            aVolume = 0;
          } else {
            if (aVolume > 100) {
              aVolume = 100;
            }
          }
          this._x = this.volumeToX(aVolume);
        };

        v2.setMute = function () {
          this.setVolume(0);
        };

        v2.setLoud = function () {
          this.setVolume(100);
        };

        v2.handlePress = function () {
          this.startThumbDrag();
        };

        v2.handleRelease = function () {
          this.stopThumbDrag();
        };

        v2.handleReleaseOutside = function () {
          this.stopThumbDrag();
        };

        v2.startThumbDrag = function () {
          this.startDrag(false, 12, 3, 12 + this.getRange(), 3);
          this.onMouseMove = this.handleMouseMove;
        };

        v2.stopThumbDrag = function () {
          this.stopDrag();
          delete this.onMouseMove;
          this.broadcastEvent();
        };

        v2.handleMouseMove = function () {
          this.broadcastEvent();
        };

        v2.broadcastEvent = function () {
          this._controller.broadcastEvent('volume', this.xToVolume(this._x));
        };

        v2.xToVolume = function (x) {
          return (x - 12) * (100 / this.getRange());
        };

        v2.volumeToX = function (aVol) {
          return aVol / (100 / this.getRange()) + 12;
        };

        v2.getRange = function () {
          if (!this.isVertical()) {
            var v2 = 50;
            return v2;
          }
          var v2 = 27;
          return v2;
        };

        v2.__get__enabled = function () {
          return this._enabled;
        };

        v2.__set__enabled = function (is) {
          this._enabled = is;
          if (is) {
            this.onPress = this.handlePress;
            this.onRelease = this.handleRelease;
            this.onReleaseOutside = this.handleReleaseOutside;
          } else {
            delete this.onPress;
            delete this.onRelease;
            delete this.onReleaseOutside;
          }
          return this.__get__enabled();
        };

        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        ASSetPropFlags(mx.controls.streamingmedia.VolumeControlHandle.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 187 __Packages.mx.controls.SimpleButton {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.SimpleButton) {
        var v1 = function () {
          super();
        };

        mx.controls.SimpleButton = v1;
        var v2 = new mx.core.UIComponent();
        mx.controls.SimpleButton.prototype = v2;
        v2.init = function (Void) {
          super.init();
          if (this.preset == undefined) {
            this.boundingBox_mc._visible = false;
            this.boundingBox_mc._height = 0;
            this.boundingBox_mc._width = 0;
          }
          this.useHandCursor = false;
        };

        v2.createChildren = function (Void) {
          if (this.preset != undefined) {
            var v2 = this[this.idNames[this.preset]];
            this[this.refNames[this.preset]] = v2;
            this.skinName = v2;
            if (this.falseOverSkin.length == 0) {
              this.rolloverSkin = this.fus;
            }
            if (this.falseOverIcon.length == 0) {
              this.rolloverIcon = this.fui;
            }
            this.initializing = false;
          } else {
            if (this.__state == true) {
              this.setStateVar(true);
            } else {
              if (this.falseOverSkin.length == 0) {
                this.rolloverSkin = this.fus;
              }
              if (this.falseOverIcon.length == 0) {
                this.rolloverIcon = this.fui;
              }
            }
          }
        };

        v2.setIcon = function (tag, linkageName) {
          return this.setSkin(tag + 8, linkageName);
        };

        v2.changeIcon = function (tag, linkageName) {
          this.linkLength = linkageName.length;
          var v2 = this.stateNames[tag] + 'Icon';
          this[v2] = linkageName;
          this[this.idNames[tag + 8]] = v2;
          this.setStateVar(this.getState());
        };

        v2.changeSkin = function (tag, linkageName) {
          var v2 = this.stateNames[tag] + 'Skin';
          this[v2] = linkageName;
          this[this.idNames[tag]] = v2;
          this.setStateVar(this.getState());
        };

        v2.viewIcon = function (varName) {
          var v4 = varName + 'Icon';
          var v3 = this[v4];
          if (typeof v3 == 'string') {
            var v5 = v3;
            if (this.__emphasized) {
              if (this[v3 + 'Emphasized'].length > 0) {
                v3 += 'Emphasized';
              }
            }
            if (this[v3].length == 0) {
              return undefined;
            }
            v3 = this.setIcon(this.tagMap[v5], this[v3]);
            if (v3 == undefined && _global.isLivePreview) {
              v3 = this.setIcon(0, 'ButtonIcon');
            }
            this[v4] = v3;
          }
          this.iconName._visible = false;
          this.iconName = v3;
          this.iconName._visible = true;
        };

        v2.removeIcons = function () {
          var v3 = 0;
          while (v3 < 2) {
            var v2 = 8;
            while (v2 < 16) {
              this.destroyObject(this.idNames[v2]);
              this[this.stateNames[v2 - 8] + 'Icon'] = '';
              ++v2;
            }
            ++v3;
          }
          this.refresh();
        };

        v2.setSkin = function (tag, linkageName, initobj) {
          if (initobj == undefined) {
            var v3 = super.setSkin(tag, linkageName, {'styleName': this});
            this.calcSize(tag, v3);
            return v3;
          }
          var v3 = super.setSkin(tag, linkageName, initobj);
          this.calcSize(tag, v3);
          return v3;
        };

        v2.calcSize = function (Void) {
          this.__width = this._width;
          this.__height = this._height;
        };

        v2.viewSkin = function (varName, initObj) {
          var v3 = varName + 'Skin';
          var v2 = this[v3];
          if (typeof v2 == 'string') {
            var v4 = v2;
            if (this.__emphasized) {
              if (this[v2 + 'Emphasized'].length > 0) {
                v2 += 'Emphasized';
              }
            }
            if (this[v2].length == 0) {
              return undefined;
            }
            v2 = this.setSkin(this.tagMap[v4], this[v2], (initObj != undefined) ? initObj : {'styleName': this});
            this[v3] = v2;
          }
          this.skinName._visible = false;
          this.skinName = v2;
          this.skinName._visible = true;
        };

        v2.showEmphasized = function (e) {
          if (e && !this.__emphatic) {
            if (mx.controls.SimpleButton.emphasizedStyleDeclaration != undefined) {
              this.__emphaticStyleName = this.styleName;
              this.styleName = mx.controls.SimpleButton.emphasizedStyleDeclaration;
            }
            this.__emphatic = true;
          } else {
            if (this.__emphatic) {
              this.styleName = this.__emphaticStyleName;
            }
            this.__emphatic = false;
          }
        };

        v2.refresh = function (Void) {
          var v2 = this.getState();
          if (this.enabled == false) {
            this.viewIcon('disabled');
            this.viewSkin('disabled');
          } else {
            this.viewSkin(this.phase);
            this.viewIcon(this.phase);
          }
          this.setView(this.phase == 'down');
          this.iconName.enabled = this.enabled;
        };

        v2.setView = function (offset) {
          if (this.iconName == undefined) {
            return undefined;
          }
          var v2 = offset ? this.btnOffset : 0;
          this.iconName._x = (this.__width - this.iconName._width) / 2 + v2;
          this.iconName._y = (this.__height - this.iconName._height) / 2 + v2;
        };

        v2.setStateVar = function (state) {
          if (state) {
            if (this.trueOverSkin.length == 0) {
              this.rolloverSkin = this.tus;
            } else {
              this.rolloverSkin = this.trs;
            }
            if (this.trueOverIcon.length == 0) {
              this.rolloverIcon = this.tui;
            } else {
              this.rolloverIcon = this.tri;
            }
            this.upSkin = this.tus;
            this.downSkin = this.tds;
            this.disabledSkin = this.dts;
            this.upIcon = this.tui;
            this.downIcon = this.tdi;
            this.disabledIcon = this.dti;
          } else {
            if (this.falseOverSkin.length == 0) {
              this.rolloverSkin = this.fus;
            } else {
              this.rolloverSkin = this.frs;
            }
            if (this.falseOverIcon.length == 0) {
              this.rolloverIcon = this.fui;
            } else {
              this.rolloverIcon = this.fri;
            }
            this.upSkin = this.fus;
            this.downSkin = this.fds;
            this.disabledSkin = this.dfs;
            this.upIcon = this.fui;
            this.downIcon = this.fdi;
            this.disabledIcon = this.dfi;
          }
          this.__state = state;
        };

        v2.setState = function (state) {
          if (state != this.__state) {
            this.setStateVar(state);
            this.invalidate();
          }
        };

        v2.size = function (Void) {
          this.refresh();
        };

        v2.draw = function (Void) {
          if (this.initializing) {
            this.initializing = false;
            this.skinName.visible = true;
            this.iconName.visible = true;
          }
          this.size();
        };

        v2.getState = function (Void) {
          return this.__state;
        };

        v2.setToggle = function (val) {
          this.__toggle = val;
          if (this.__toggle == false) {
            this.setState(false);
          }
        };

        v2.getToggle = function (Void) {
          return this.__toggle;
        };

        v2.__set__toggle = function (val) {
          this.setToggle(val);
          return this.__get__toggle();
        };

        v2.__get__toggle = function () {
          return this.getToggle();
        };

        v2.__set__value = function (val) {
          this.setSelected(val);
          return this.__get__value();
        };

        v2.__get__value = function () {
          return this.getSelected();
        };

        v2.__set__selected = function (val) {
          this.setSelected(val);
          return this.__get__selected();
        };

        v2.__get__selected = function () {
          return this.getSelected();
        };

        v2.setSelected = function (val) {
          if (this.__toggle) {
            this.setState(val);
          } else {
            this.setState(this.initializing ? val : this.__state);
          }
        };

        v2.getSelected = function () {
          return this.__state;
        };

        v2.setEnabled = function (val) {
          if (this.enabled != val) {
            super.setEnabled(val);
            this.invalidate();
          }
        };

        v2.onPress = function (Void) {
          this.pressFocus();
          this.phase = 'down';
          this.refresh();
          this.dispatchEvent({'type': 'buttonDown'});
          if (this.autoRepeat) {
            this.interval = setInterval(this, 'onPressDelay', this.getStyle('repeatDelay'));
          }
        };

        v2.onPressDelay = function (Void) {
          this.dispatchEvent({'type': 'buttonDown'});
          if (this.autoRepeat) {
            clearInterval(this.interval);
            this.interval = setInterval(this, 'onPressRepeat', this.getStyle('repeatInterval'));
          }
        };

        v2.onPressRepeat = function (Void) {
          this.dispatchEvent({'type': 'buttonDown'});
          updateAfterEvent();
        };

        v2.onRelease = function (Void) {
          this.releaseFocus();
          this.phase = 'rollover';
          if (this.interval != undefined) {
            clearInterval(this.interval);
            delete this.interval;
          }
          if (this.getToggle()) {
            this.setState(!this.getState());
          } else {
            this.refresh();
          }
          this.dispatchEvent({'type': 'click'});
        };

        v2.onDragOut = function (Void) {
          this.phase = 'up';
          this.refresh();
          this.dispatchEvent({'type': 'buttonDragOut'});
        };

        v2.onDragOver = function (Void) {
          if (this.phase != 'up') {
            this.onPress();
            return undefined;
          } else {
            this.phase = 'down';
            this.refresh();
          }
        };

        v2.onReleaseOutside = function (Void) {
          this.releaseFocus();
          this.phase = 'up';
          if (this.interval != undefined) {
            clearInterval(this.interval);
            delete this.interval;
          }
        };

        v2.onRollOver = function (Void) {
          this.phase = 'rollover';
          this.refresh();
        };

        v2.onRollOut = function (Void) {
          this.phase = 'up';
          this.refresh();
        };

        v2.getLabel = function (Void) {
          return this.fui.text;
        };

        v2.setLabel = function (val) {
          if (typeof this.fui == 'string') {
            this.createLabel('fui', 8, val);
            this.fui.styleName = this;
          } else {
            this.fui.text = val;
          }
          var v4 = this.fui._getTextFormat();
          var v2 = v4.getTextExtent2(val);
          this.fui._width = v2.width + 5;
          this.fui._height = v2.height + 5;
          this.iconName = this.fui;
          this.setView(this.__state);
        };

        v2.__get__emphasized = function () {
          return this.__emphasized;
        };

        v2.__set__emphasized = function (val) {
          this.__emphasized = val;
          var v2 = 0;
          while (v2 < 8) {
            this[this.idNames[v2]] = this.stateNames[v2] + 'Skin';
            if (typeof this[this.idNames[v2 + 8]] == 'movieclip') {
              this[this.idNames[v2 + 8]] = this.stateNames[v2] + 'Icon';
            }
            ++v2;
          }
          this.showEmphasized(this.__emphasized);
          this.setStateVar(this.__state);
          this.invalidateStyle();
          return this.__get__emphasized();
        };

        v2.keyDown = function (e) {
          if (e.code == 32) {
            this.onPress();
          }
        };

        v2.keyUp = function (e) {
          if (e.code == 32) {
            this.onRelease();
          }
        };

        v2.onKillFocus = function (newFocus) {
          super.onKillFocus();
          if (this.phase != 'up') {
            this.phase = 'up';
            this.refresh();
          }
        };

        v1.symbolName = 'SimpleButton';
        v1.symbolOwner = mx.controls.SimpleButton;
        v1.version = '2.0.2.127';
        v2.className = 'SimpleButton';
        v2.style3dInset = 4;
        v2.btnOffset = 1;
        v2.__toggle = false;
        v2.__state = false;
        v2.__emphasized = false;
        v2.__emphatic = false;
        v1.falseUp = 0;
        v1.falseDown = 1;
        v1.falseOver = 2;
        v1.falseDisabled = 3;
        v1.trueUp = 4;
        v1.trueDown = 5;
        v1.trueOver = 6;
        v1.trueDisabled = 7;
        v2.falseUpSkin = 'SimpleButtonUp';
        v2.falseDownSkin = 'SimpleButtonIn';
        v2.falseOverSkin = '';
        v2.falseDisabledSkin = 'SimpleButtonUp';
        v2.trueUpSkin = 'SimpleButtonIn';
        v2.trueDownSkin = '';
        v2.trueOverSkin = '';
        v2.trueDisabledSkin = 'SimpleButtonIn';
        v2.falseUpIcon = '';
        v2.falseDownIcon = '';
        v2.falseOverIcon = '';
        v2.falseDisabledIcon = '';
        v2.trueUpIcon = '';
        v2.trueDownIcon = '';
        v2.trueOverIcon = '';
        v2.trueDisabledIcon = '';
        v2.phase = 'up';
        v2.fui = 'falseUpIcon';
        v2.fus = 'falseUpSkin';
        v2.fdi = 'falseDownIcon';
        v2.fds = 'falseDownSkin';
        v2.frs = 'falseOverSkin';
        v2.fri = 'falseOverIcon';
        v2.dfi = 'falseDisabledIcon';
        v2.dfs = 'falseDisabledSkin';
        v2.tui = 'trueUpIcon';
        v2.tus = 'trueUpSkin';
        v2.tdi = 'trueDownIcon';
        v2.tds = 'trueDownSkin';
        v2.trs = 'trueOverSkin';
        v2.tri = 'trueOverIcon';
        v2.dts = 'trueDisabledSkin';
        v2.dti = 'trueDisabledIcon';
        v2.rolloverSkin = mx.controls.SimpleButton.prototype.frs;
        v2.rolloverIcon = mx.controls.SimpleButton.prototype.fri;
        v2.upSkin = mx.controls.SimpleButton.prototype.fus;
        v2.downSkin = mx.controls.SimpleButton.prototype.fds;
        v2.disabledSkin = mx.controls.SimpleButton.prototype.dfs;
        v2.upIcon = mx.controls.SimpleButton.prototype.fui;
        v2.downIcon = mx.controls.SimpleButton.prototype.fdi;
        v2.disabledIcon = mx.controls.SimpleButton.prototype.dfi;
        v2.initializing = true;
        v2.idNames = ['fus', 'fds', 'frs', 'dfs', 'tus', 'tds', 'trs', 'dts', 'fui', 'fdi', 'fri', 'dfi', 'tui', 'tdi', 'tri', 'dti'];
        v2.stateNames = ['falseUp', 'falseDown', 'falseOver', 'falseDisabled', 'trueUp', 'trueDown', 'trueOver', 'trueDisabled'];
        v2.refNames = ['upSkin', 'downSkin', 'rolloverSkin', 'disabledSkin'];
        v2.tagMap = {'falseUpSkin': 0, 'falseDownSkin': 1, 'falseOverSkin': 2, 'falseDisabledSkin': 3, 'trueUpSkin': 4, 'trueDownSkin': 5, 'trueOverSkin': 6, 'trueDisabledSkin': 7, 'falseUpIcon': 0, 'falseDownIcon': 1, 'falseOverIcon': 2, 'falseDisabledIcon': 3, 'trueUpIcon': 4, 'trueDownIcon': 5, 'trueOverIcon': 6, 'trueDisabledIcon': 7};
        v2.addProperty('emphasized', v2.__get__emphasized, v2.__set__emphasized);
        v2.addProperty('selected', v2.__get__selected, v2.__set__selected);
        v2.addProperty('toggle', v2.__get__toggle, v2.__set__toggle);
        v2.addProperty('value', v2.__get__value, v2.__set__value);
        ASSetPropFlags(mx.controls.SimpleButton.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 188 __Packages.mx.controls.streamingmedia.MuteButton {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.MuteButton) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.MuteButton = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.MuteButton.prototype = v2;
        v2.init = function () {
          this.attachMovie('SimpleButton', 'muteSimpleButton', 1, {'falseUpSkin': 'Mute-False-Up', 'falseOverSkin': 'Mute-False-Over', 'falseDownSkin': 'Mute-False-Down', 'falseDisabledSkin': 'Mute-False-Disabled'});
          this.muteSimpleButton.addEventListener('click', this);
          this.muteSimpleButton.enabled = this._parent._parent.enabled;
          this.tabEnabled = false;
          this.tabChildren = true;
        };

        v2.click = function (ev) {
          this._parent._parent.broadcastEvent('volume', 0);
          (this._parent.getHandle()).setMute();
        };

        ASSetPropFlags(mx.controls.streamingmedia.MuteButton.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 189 __Packages.mx.controls.streamingmedia.LoudButton {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.LoudButton) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.LoudButton = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.LoudButton.prototype = v2;
        v2.init = function () {
          this.attachMovie('SimpleButton', 'loudSimpleButton', 1, {'falseUpSkin': 'Loud-False-Up', 'falseOverSkin': 'Loud-False-Over', 'falseDownSkin': 'Loud-False-Down', 'falseDisabledSkin': 'Loud-False-Disabled'});
          this.loudSimpleButton.addEventListener('click', this);
          this.loudSimpleButton.enabled = this._parent._parent.enabled;
          this.tabEnabled = false;
          this.tabChildren = true;
        };

        v2.click = function (ev) {
          this._parent._parent.broadcastEvent('volume', 100);
          (this._parent.getHandle()).setLoud();
        };

        ASSetPropFlags(mx.controls.streamingmedia.LoudButton.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 190 __Packages.mx.controls.streamingmedia.Tracer {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.Tracer) {
        var v1 = function () {};

        mx.controls.streamingmedia.Tracer = v1;
        var v2 = v1.prototype;
        v1.trace = function (message) {
          if (mx.controls.streamingmedia.Tracer.DEBUG) {
            trace(message);
          }
        };

        v1.DEBUG = false;
        ASSetPropFlags(mx.controls.streamingmedia.Tracer.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 191 __Packages.mx.controls.streamingmedia.Chrome {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.Chrome) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.Chrome = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.Chrome.prototype = v2;
        v2.init = function () {
          if (this.visible == null) {
            this.visible = true;
          }
          if (this.width != null && this.height != null) {
            this.draw();
          }
          mx.controls.streamingmedia.Tracer.trace('Chrome.init: setting enabled to ' + this._parent.enabled);
          this.setEnabled(this._parent.enabled);
        };

        v2.setSize = function (w, h) {
          this.width = w;
          this.height = h;
        };

        v2.draw = function () {
          if (this.visible) {
            this._alpha = 100;
          } else {
            this._alpha = 0;
          }
          this._chromeEdge._width = this.width;
          this._chromeEdge._height = this.height;
          this._chromeEdge._x = 0;
          this._chromeEdge._y = 0;
          this._chromeHilite._width = this.width - 2;
          this._chromeHilite._x = 1;
          this._chromeHilite._y = 1;
          this._chromeFill._width = this.width - 2;
          this._chromeFill._height = this.height - 3;
          this._chromeFill._x = 1;
          this._chromeFill._y = 2;
          if (this.visible && this.showToggles) {
            this._toggleNW._visible = true;
            this._toggleSW._visible = true;
            this._toggleNE._visible = true;
            this._toggleSE._visible = true;
            this._toggleNW._x = 0;
            this._toggleNW._y = 0;
            this._toggleNE._x = this.width;
            this._toggleNE._y = 0;
            this._toggleSW._x = 0;
            this._toggleSW._y = this.height;
            this._toggleSE._x = this.width;
            this._toggleSE._y = this.height;
          } else {
            this._toggleNW._visible = false;
            this._toggleSW._visible = false;
            this._toggleNE._visible = false;
            this._toggleSE._visible = false;
          }
        };

        v2.getAllToggles = function () {
          return [this._toggleNW, this._toggleNE, this._toggleSW, this._toggleSE];
        };

        v2.getOneToggle = function () {
          return this._toggleNE;
        };

        v2.getEnabled = function () {
          return this._parent.enabled;
        };

        v2.setEnabled = function (is) {
          mx.controls.streamingmedia.Tracer.trace('Chrome.setEnabled: ' + is);
          this._toggleNW.setEnabled(is);
          this._toggleNE.setEnabled(is);
          this._toggleSW.setEnabled(is);
          this._toggleSE.setEnabled(is);
        };

        ASSetPropFlags(mx.controls.streamingmedia.Chrome.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 192 __Packages.mx.skins.Border {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.Border) {
        var v1 = function () {
          super();
        };

        mx.skins.Border = v1;
        var v2 = new mx.core.UIObject();
        mx.skins.Border.prototype = v2;
        v2.init = function (Void) {
          super.init();
        };

        v1.symbolName = 'Border';
        v1.symbolOwner = mx.skins.Border;
        v2.className = 'Border';
        v2.tagBorder = 0;
        v2.idNames = new Array('border_mc');
        ASSetPropFlags(mx.skins.Border.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 193 __Packages.mx.skins.RectBorder {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.RectBorder) {
        var v1 = function () {
          super();
        };

        mx.skins.RectBorder = v1;
        var v2 = new mx.skins.Border();
        mx.skins.RectBorder.prototype = v2;
        v2.__get__width = function () {
          return this.__width;
        };

        v2.__get__height = function () {
          return this.__height;
        };

        v2.init = function (Void) {
          super.init();
        };

        v2.draw = function (Void) {
          this.size();
        };

        v2.getBorderMetrics = function (Void) {
          var v2 = this.offset;
          if (this.__borderMetrics == undefined) {
            this.__borderMetrics = {'left': v2, 'top': v2, 'right': v2, 'bottom': v2};
            return this.__borderMetrics;
          }
          this.__borderMetrics.left = v2;
          this.__borderMetrics.top = v2;
          this.__borderMetrics.right = v2;
          this.__borderMetrics.bottom = v2;
          return this.__borderMetrics;
        };

        v2.__get__borderMetrics = function () {
          return this.getBorderMetrics();
        };

        v2.drawBorder = function (Void) {};

        v2.size = function (Void) {
          this.drawBorder();
        };

        v2.setColor = function (Void) {
          this.drawBorder();
        };

        v1.symbolName = 'RectBorder';
        v1.symbolOwner = mx.skins.RectBorder;
        v1.version = '2.0.2.127';
        v2.className = 'RectBorder';
        v2.borderStyleName = 'borderStyle';
        v2.borderColorName = 'borderColor';
        v2.shadowColorName = 'shadowColor';
        v2.highlightColorName = 'highlightColor';
        v2.buttonColorName = 'buttonColor';
        v2.backgroundColorName = 'backgroundColor';
        v2.addProperty('borderMetrics', v2.__get__borderMetrics, function () {});
        v2.addProperty('height', v2.__get__height, function () {});
        v2.addProperty('width', v2.__get__width, function () {});
        ASSetPropFlags(mx.skins.RectBorder.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 194 __Packages.mx.managers.DepthManager {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.managers) {
        _global.mx.managers = new Object();
      }
      if (!_global.mx.managers.DepthManager) {
        var v1 = function () {
          MovieClip.prototype.createClassChildAtDepth = this.createClassChildAtDepth;
          MovieClip.prototype.createChildAtDepth = this.createChildAtDepth;
          MovieClip.prototype.setDepthTo = this.setDepthTo;
          MovieClip.prototype.setDepthAbove = this.setDepthAbove;
          MovieClip.prototype.setDepthBelow = this.setDepthBelow;
          MovieClip.prototype.findNextAvailableDepth = this.findNextAvailableDepth;
          MovieClip.prototype.shuffleDepths = this.shuffleDepths;
          MovieClip.prototype.getDepthByFlag = this.getDepthByFlag;
          MovieClip.prototype.buildDepthTable = this.buildDepthTable;
          _global.ASSetPropFlags(MovieClip.prototype, 'createClassChildAtDepth', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'createChildAtDepth', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'setDepthTo', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'setDepthAbove', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'setDepthBelow', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'findNextAvailableDepth', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'shuffleDepths', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'getDepthByFlag', 1);
          _global.ASSetPropFlags(MovieClip.prototype, 'buildDepthTable', 1);
        };

        mx.managers.DepthManager = v1;
        var v2 = v1.prototype;
        v1.sortFunction = function (a, b) {
          if (a.getDepth() > b.getDepth()) {
            return 1;
          }
          return -1;
        };

        v1.test = function (depth) {
          if (depth == mx.managers.DepthManager.reservedDepth) {
            return false;
          } else {
            return true;
          }
        };

        v1.createClassObjectAtDepth = function (className, depthSpace, initObj) {
          var v1;
          switch (depthSpace) {
            case mx.managers.DepthManager.kCursor:
              v1 = mx.managers.DepthManager.holder.createClassChildAtDepth(className, mx.managers.DepthManager.kTopmost, initObj);
              return v1;
            case mx.managers.DepthManager.kTooltip:
              v1 = mx.managers.DepthManager.holder.createClassChildAtDepth(className, mx.managers.DepthManager.kTop, initObj);
              return v1;
          }
          return v1;
        };

        v1.createObjectAtDepth = function (linkageName, depthSpace, initObj) {
          var v1;
          switch (depthSpace) {
            case mx.managers.DepthManager.kCursor:
              v1 = mx.managers.DepthManager.holder.createChildAtDepth(linkageName, mx.managers.DepthManager.kTopmost, initObj);
              return v1;
            case mx.managers.DepthManager.kTooltip:
              v1 = mx.managers.DepthManager.holder.createChildAtDepth(linkageName, mx.managers.DepthManager.kTop, initObj);
              return v1;
          }
          return v1;
        };

        v2.createClassChildAtDepth = function (className, depthFlag, initObj) {
          if (this._childCounter == undefined) {
            this._childCounter = 0;
          }
          var v3 = this.buildDepthTable();
          var v2 = this.getDepthByFlag(depthFlag, v3);
          var v6 = 'down';
          if (depthFlag == mx.managers.DepthManager.kBottom) {
            v6 = 'up';
          }
          var v5;
          if (v3[v2] != undefined) {
            v5 = v2;
            v2 = this.findNextAvailableDepth(v2, v3, v6);
          }
          var v4 = this.createClassObject(className, 'depthChild' + this._childCounter++, v2, initObj);
          if (v5 != undefined) {
            v3[v2] = v4;
            this.shuffleDepths(v4, v5, v3, v6);
          }
          if (depthFlag == mx.managers.DepthManager.kTopmost) {
            v4._topmost = true;
          }
          return v4;
        };

        v2.createChildAtDepth = function (linkageName, depthFlag, initObj) {
          if (this._childCounter == undefined) {
            this._childCounter = 0;
          }
          var v3 = this.buildDepthTable();
          var v2 = this.getDepthByFlag(depthFlag, v3);
          var v6 = 'down';
          if (depthFlag == mx.managers.DepthManager.kBottom) {
            v6 = 'up';
          }
          var v5;
          if (v3[v2] != undefined) {
            v5 = v2;
            v2 = this.findNextAvailableDepth(v2, v3, v6);
          }
          var v4 = this.createObject(linkageName, 'depthChild' + this._childCounter++, v2, initObj);
          if (v5 != undefined) {
            v3[v2] = v4;
            this.shuffleDepths(v4, v5, v3, v6);
          }
          if (depthFlag == mx.managers.DepthManager.kTopmost) {
            v4._topmost = true;
          }
          return v4;
        };

        v2.setDepthTo = function (depthFlag) {
          var v2 = this._parent.buildDepthTable();
          var v3 = this._parent.getDepthByFlag(depthFlag, v2);
          if (v2[v3] != undefined) {
            this.shuffleDepths(this, v3, v2, undefined);
          } else {
            this.swapDepths(v3);
          }
          if (depthFlag == mx.managers.DepthManager.kTopmost) {
            this._topmost = true;
          } else {
            delete this._topmost;
          }
        };

        v2.setDepthAbove = function (targetInstance) {
          if (targetInstance._parent != this._parent) {
            return undefined;
          }
          var v2 = targetInstance.getDepth() + 1;
          var v3 = this._parent.buildDepthTable();
          if (v3[v2] != undefined && this.getDepth() < v2) {
            v2 -= 1;
          }
          if (v2 > mx.managers.DepthManager.highestDepth) {
            v2 = mx.managers.DepthManager.highestDepth;
          }
          if (v2 == mx.managers.DepthManager.highestDepth) {
            this._parent.shuffleDepths(this, v2, v3, 'down');
          } else {
            if (v3[v2] != undefined) {
              this._parent.shuffleDepths(this, v2, v3, undefined);
            } else {
              this.swapDepths(v2);
            }
          }
        };

        v2.setDepthBelow = function (targetInstance) {
          if (targetInstance._parent != this._parent) {
            return undefined;
          }
          var v6 = targetInstance.getDepth() - 1;
          var v3 = this._parent.buildDepthTable();
          if (v3[v6] != undefined && this.getDepth() > v6) {
            v6 += 1;
          }
          var v4 = mx.managers.DepthManager.lowestDepth + mx.managers.DepthManager.numberOfAuthortimeLayers;
          var v5;
          for (v5 in v3) {
            var v2 = v3[v5];
            if (v2._parent != undefined) {
              v4 = Math.min(v4, v2.getDepth());
            }
          }
          if (v6 < v4) {
            v6 = v4;
          }
          if (v6 == v4) {
            this._parent.shuffleDepths(this, v6, v3, 'up');
          } else {
            if (v3[v6] != undefined) {
              this._parent.shuffleDepths(this, v6, v3, undefined);
            } else {
              this.swapDepths(v6);
            }
          }
        };

        v2.findNextAvailableDepth = function (targetDepth, depthTable, direction) {
          var v5 = mx.managers.DepthManager.lowestDepth + mx.managers.DepthManager.numberOfAuthortimeLayers;
          if (targetDepth < v5) {
            targetDepth = v5;
          }
          if (depthTable[targetDepth] == undefined) {
            return targetDepth;
          }
          var v2 = targetDepth;
          var v1 = targetDepth;
          if (direction == 'down') {
            while (depthTable[v1] != undefined) {
              --v1;
            }
            return v1;
          }
          while (depthTable[v2] != undefined) {
            ++v2;
          }
          return v2;
        };

        v2.shuffleDepths = function (subject, targetDepth, depthTable, direction) {
          var v9 = mx.managers.DepthManager.lowestDepth + mx.managers.DepthManager.numberOfAuthortimeLayers;
          var v8 = v9;
          var v5;
          for (v5 in depthTable) {
            var v7 = depthTable[v5];
            if (v7._parent != undefined) {
              v9 = Math.min(v9, v7.getDepth());
            }
          }
          if (direction == undefined) {
            if (subject.getDepth() > targetDepth) {
              direction = 'up';
            } else {
              direction = 'down';
            }
          }
          var v1 = new Array();
          for (v5 in depthTable) {
            v7 = depthTable[v5];
            if (v7._parent != undefined) {
              v1.push(v7);
            }
          }
          v1.sort(mx.managers.DepthManager.sortFunction);
          if (direction == 'up') {
            var v3;
            var v11;
            while (v1.length > 0) {
              v3 = v1.pop();
              if (v3 == subject) {
                break;
              }
            }
            while (v1.length > 0) {
              v11 = subject.getDepth();
              v3 = v1.pop();
              var v4 = v3.getDepth();
              if (v11 > v4 + 1) {
                if (v4 >= 0) {
                  subject.swapDepths(v4 + 1);
                } else {
                  if (v11 > v8 && v4 < v8) {
                    subject.swapDepths(v8);
                  }
                }
              }
              subject.swapDepths(v3);
              if (v4 == targetDepth) {
                break;
              }
            }
          } else {
            if (direction == 'down') {
              var v3;
              while (v1.length > 0) {
                v3 = v1.shift();
                if (v3 == subject) {
                  break;
                }
              }
              while (v1.length > 0) {
                var v11 = v3.getDepth();
                v3 = v1.shift();
                var v4 = v3.getDepth();
                if (v11 < v4 - 1 && v4 > 0) {
                  subject.swapDepths(v4 - 1);
                }
                subject.swapDepths(v3);
                if (v4 == targetDepth) {
                  break;
                }
              }
            }
          }
        };

        v2.getDepthByFlag = function (depthFlag, depthTable) {
          var v2 = 0;
          if (depthFlag == mx.managers.DepthManager.kTop || depthFlag == mx.managers.DepthManager.kNotopmost) {
            var v5 = 0;
            var v7 = false;
            var v8;
            for (v8 in depthTable) {
              var v9 = depthTable[v8];
              var v3 = typeof v9;
              if (v3 == 'movieclip' || v3 == 'object' && v9.__getTextFormat != undefined) {
                if (v9.getDepth() <= mx.managers.DepthManager.highestDepth) {
                  if (!v9._topmost) {
                    v2 = Math.max(v2, v9.getDepth());
                  } else {
                    if (!v7) {
                      v5 = v9.getDepth();
                      v7 = true;
                    } else {
                      v5 = Math.min(v5, v9.getDepth());
                    }
                  }
                }
              }
            }
            v2 += 20;
            if (v7) {
              if (v2 >= v5) {
                v2 = v5 - 1;
              }
            }
          } else {
            if (depthFlag == mx.managers.DepthManager.kBottom) {
              for (var v8 in depthTable) {
                var v9 = depthTable[v8];
                var v3 = typeof v9;
                if (v3 == 'movieclip' || v3 == 'object' && v9.__getTextFormat != undefined) {
                  if (v9.getDepth() <= mx.managers.DepthManager.highestDepth) {
                    v2 = Math.min(v2, v9.getDepth());
                  }
                }
              }
              v2 -= 20;
            } else {
              if (depthFlag == mx.managers.DepthManager.kTopmost) {
                for (var v8 in depthTable) {
                  var v9 = depthTable[v8];
                  var v3 = typeof v9;
                  if (v3 == 'movieclip' || v3 == 'object' && v9.__getTextFormat != undefined) {
                    if (v9.getDepth() <= mx.managers.DepthManager.highestDepth) {
                      v2 = Math.max(v2, v9.getDepth());
                    }
                  }
                }
                v2 += 100;
              }
            }
          }
          if (v2 >= mx.managers.DepthManager.highestDepth) {
            v2 = mx.managers.DepthManager.highestDepth;
          }
          var v6 = mx.managers.DepthManager.lowestDepth + mx.managers.DepthManager.numberOfAuthortimeLayers;
          for (v9 in depthTable) {
            var v4 = depthTable[v9];
            if (v4._parent != undefined) {
              v6 = Math.min(v6, v4.getDepth());
            }
          }
          if (v2 <= v6) {
            v2 = v6;
          }
          return v2;
        };

        v2.buildDepthTable = function (Void) {
          var v5 = new Array();
          var v4;
          for (v4 in this) {
            var v2 = this[v4];
            var v3 = typeof v2;
            if (v3 == 'movieclip' || v3 == 'object' && v2.__getTextFormat != undefined) {
              if (v2._parent == this) {
                v5[v2.getDepth()] = v2;
              }
            }
          }
          return v5;
        };

        v1.reservedDepth = 1048575;
        v1.highestDepth = 1048574;
        v1.lowestDepth = -16383;
        v1.numberOfAuthortimeLayers = 383;
        v1.kCursor = 101;
        v1.kTooltip = 102;
        v1.kTop = 201;
        v1.kBottom = 202;
        v1.kTopmost = 203;
        v1.kNotopmost = 204;
        v1.holder = _root.createEmptyMovieClip('reserved', mx.managers.DepthManager.reservedDepth);
        v1.__depthManager = new mx.managers.DepthManager();
        ASSetPropFlags(mx.managers.DepthManager.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 195 __Packages.mx.core.View {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.core) {
        _global.mx.core = new Object();
      }
      if (!_global.mx.core.View) {
        var v1 = function () {
          super();
        };

        mx.core.View = v1;
        var v2 = new mx.core.UIComponent();
        mx.core.View.prototype = v2;
        v2.init = function () {
          super.init();
          this.tabChildren = true;
          this.tabEnabled = false;
          this.boundingBox_mc._visible = false;
          this.boundingBox_mc._height = 0;
          this.boundingBox_mc._width = 0;
        };

        v2.size = function () {
          this.border_mc.move(0, 0);
          this.border_mc.setSize(this.__get__width(), this.__get__height());
          this.doLayout();
        };

        v2.draw = function () {
          this.size();
        };

        v2.__get__numChildren = function () {
          var v3 = mx.core.View.childNameBase;
          var v2 = 0;
          while (!false) {
            if (this[v3 + v2] == undefined) {
              return v2;
            }
            ++v2;
          }
          return -1;
        };

        v2.__get__tabIndex = function () {
          return this.tabEnabled ? this.__tabIndex : undefined;
        };

        v2.__set__tabIndex = function (n) {
          this.__tabIndex = n;
          return this.__get__tabIndex();
        };

        v2.addLayoutObject = function (object) {};

        v2.createChild = function (className, instanceName, initProps) {
          if (this.depth == undefined) {
            this.depth = 1;
          }
          var v2;
          if (typeof className == 'string') {
            v2 = this.createObject(className, instanceName, this.depth++, initProps);
          } else {
            v2 = this.createClassObject(className, instanceName, this.depth++, initProps);
          }
          if (v2 == undefined) {
            v2 = this.loadExternal(className, this._loadExternalClass, instanceName, this.depth++, initProps);
            this.addLayoutObject(v2);
            return v2;
          }
          this[mx.core.View.childNameBase + this.__get__numChildren()] = v2;
          v2._complete = true;
          this.childLoaded(v2);
          this.addLayoutObject(v2);
          return v2;
        };

        v2.getChildAt = function (childIndex) {
          return this[mx.core.View.childNameBase + childIndex];
        };

        v2.destroyChildAt = function (childIndex) {
          if (!(childIndex >= 0 && childIndex < this.__get__numChildren())) {
            return undefined;
          }
          var v4 = mx.core.View.childNameBase + childIndex;
          var v6 = this.__get__numChildren();
          var v3;
          for (v3 in this) {
            if (v3 == v4) {
              v4 = '';
              this.destroyObject(v3);
              break;
            }
          }
                    var v2 = Number(childIndex);
          while (v2 < v6 - 1) {
            this[mx.core.View.childNameBase + v2] = this[mx.core.View.childNameBase + (v2 + 1)];
            ++v2;
          }
          delete this[mx.core.View.childNameBase + (v6 - 1)];
          --this.depth;
        };

        v2.initLayout = function () {
          if (!this.hasBeenLayedOut) {
            this.doLayout();
          }
        };

        v2.doLayout = function () {
          this.hasBeenLayedOut = true;
        };

        v2.createChildren = function () {
          if (this.border_mc == undefined) {
            this.border_mc = this.createClassChildAtDepth(_global.styles.rectBorderClass, mx.managers.DepthManager.kBottom, {'styleName': this});
          }
          this.doLater(this, 'initLayout');
        };

        v2.convertToUIObject = function (obj) {};

        v2.childLoaded = function (obj) {
          this.convertToUIObject(obj);
        };

        v1.extension = function () {
          mx.core.ExternalContent.enableExternalContent();
        };

        v1.symbolName = 'View';
        v1.symbolOwner = mx.core.View;
        v1.version = '2.0.2.127';
        v2.className = 'View';
        v1.childNameBase = '_child';
        v2.hasBeenLayedOut = false;
        v2._loadExternalClass = 'UIComponent';
        v2.addProperty('numChildren', v2.__get__numChildren, function () {});
        v2.addProperty('tabIndex', v2.__get__tabIndex, v2.__set__tabIndex);
        ASSetPropFlags(mx.core.View.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 196 __Packages.mx.events.EventDispatcher {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.events) {
        _global.mx.events = new Object();
      }
      if (!_global.mx.events.EventDispatcher) {
        var v1 = function () {};

        mx.events.EventDispatcher = v1;
        var v2 = v1.prototype;
        v1._removeEventListener = function (queue, event, handler) {
          if (queue != undefined) {
            var v4 = queue.length;
            var v1;
            v1 = 0;
            while (v1 < v4) {
              var v2 = queue[v1];
              if (v2 == handler) {
                queue.splice(v1, 1);
                return undefined;
              }
              ++v1;
            }
          }
        };

        v1.initialize = function (object) {
          if (mx.events.EventDispatcher._fEventDispatcher == undefined) {
            mx.events.EventDispatcher._fEventDispatcher = new mx.events.EventDispatcher();
          }
          object.addEventListener = mx.events.EventDispatcher._fEventDispatcher.addEventListener;
          object.removeEventListener = mx.events.EventDispatcher._fEventDispatcher.removeEventListener;
          object.dispatchEvent = mx.events.EventDispatcher._fEventDispatcher.dispatchEvent;
          object.dispatchQueue = mx.events.EventDispatcher._fEventDispatcher.dispatchQueue;
        };

        v2.dispatchQueue = function (queueObj, eventObj) {
          var v7 = '__q_' + eventObj.type;
          var v4 = queueObj[v7];
          if (v4 != undefined) {
            var v5;
            for (v5 in v4) {
              var v1 = v4[v5];
              var v3 = typeof v1;
              if (v3 == 'object' || v3 == 'movieclip') {
                if (v1.handleEvent != undefined) {
                  v1.handleEvent(eventObj);
                }
                if (v1[eventObj.type] != undefined) {
                  if (mx.events.EventDispatcher.exceptions[eventObj.type] == undefined) {
                    v1[eventObj.type](eventObj);
                  }
                }
              } else {
                v1.apply(queueObj, [eventObj]);
              }
            }
          }
        };

        v2.dispatchEvent = function (eventObj) {
          if (eventObj.target == undefined) {
            eventObj.target = this;
          }
          this[eventObj.type + 'Handler'](eventObj);
          this.dispatchQueue(this, eventObj);
        };

        v2.addEventListener = function (event, handler) {
          var v3 = '__q_' + event;
          if (this[v3] == undefined) {
            this[v3] = new Array();
          }
          _global.ASSetPropFlags(this, v3, 1);
          mx.events.EventDispatcher._removeEventListener(this[v3], event, handler);
          this[v3].push(handler);
        };

        v2.removeEventListener = function (event, handler) {
          var v2 = '__q_' + event;
          mx.events.EventDispatcher._removeEventListener(this[v2], event, handler);
        };

        v1._fEventDispatcher = undefined;
        v1.exceptions = {'move': 1, 'draw': 1, 'load': 1};
        ASSetPropFlags(mx.events.EventDispatcher.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 197 __Packages.mx.events.UIEventDispatcher {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.events) {
        _global.mx.events = new Object();
      }
      if (!_global.mx.events.UIEventDispatcher) {
        var v1 = function () {
          super();
        };

        mx.events.UIEventDispatcher = v1;
        var v2 = new mx.events.EventDispatcher();
        mx.events.UIEventDispatcher.prototype = v2;
        v1.addKeyEvents = function (obj) {
          if (obj.keyHandler == undefined) {
            obj.keyHandler = new Object();
            var v1 = obj.keyHandler;
            v1.owner = obj;
            v1.onKeyDown = mx.events.UIEventDispatcher._fEventDispatcher.onKeyDown;
            v1.onKeyUp = mx.events.UIEventDispatcher._fEventDispatcher.onKeyUp;
          }
          Key.addListener(obj.keyHandler);
        };

        v1.removeKeyEvents = function (obj) {
          Key.removeListener(obj.keyHandler);
        };

        v1.addLoadEvents = function (obj) {
          if (obj.onLoad == undefined) {
            obj.onLoad = mx.events.UIEventDispatcher._fEventDispatcher.onLoad;
            obj.onUnload = mx.events.UIEventDispatcher._fEventDispatcher.onUnload;
            if (obj.getBytesTotal() == obj.getBytesLoaded()) {
              obj.doLater(obj, 'onLoad');
            }
          }
        };

        v1.removeLoadEvents = function (obj) {
          delete obj.onLoad;
          delete obj.onUnload;
        };

        v1.initialize = function (obj) {
          if (mx.events.UIEventDispatcher._fEventDispatcher == undefined) {
            mx.events.UIEventDispatcher._fEventDispatcher = new mx.events.UIEventDispatcher();
          }
          obj.addEventListener = mx.events.UIEventDispatcher._fEventDispatcher.__addEventListener;
          obj.__origAddEventListener = mx.events.UIEventDispatcher._fEventDispatcher.addEventListener;
          obj.removeEventListener = mx.events.UIEventDispatcher._fEventDispatcher.removeEventListener;
          obj.dispatchEvent = mx.events.UIEventDispatcher._fEventDispatcher.dispatchEvent;
          obj.dispatchQueue = mx.events.UIEventDispatcher._fEventDispatcher.dispatchQueue;
        };

        v2.dispatchEvent = function (eventObj) {
          if (eventObj.target == undefined) {
            eventObj.target = this;
          }
          this[eventObj.type + 'Handler'](eventObj);
          this.dispatchQueue(mx.events.EventDispatcher, eventObj);
          this.dispatchQueue(this, eventObj);
        };

        v2.onKeyDown = function (Void) {
          this.owner.dispatchEvent({'type': 'keyDown', 'code': Key.getCode(), 'ascii': Key.getAscii(), 'shiftKey': Key.isDown(16), 'ctrlKey': Key.isDown(17)});
        };

        v2.onKeyUp = function (Void) {
          this.owner.dispatchEvent({'type': 'keyUp', 'code': Key.getCode(), 'ascii': Key.getAscii(), 'shiftKey': Key.isDown(16), 'ctrlKey': Key.isDown(17)});
        };

        v2.onLoad = function (Void) {
          if (this.__sentLoadEvent != true) {
            this.dispatchEvent({'type': 'load'});
          }
          this.__sentLoadEvent = true;
        };

        v2.onUnload = function (Void) {
          this.dispatchEvent({'type': 'unload'});
        };

        v2.__addEventListener = function (event, handler) {
          this.__origAddEventListener(event, handler);
          var v3 = mx.events.UIEventDispatcher.lowLevelEvents;
          for (var v5 in v3) {
            if (mx.events.UIEventDispatcher[v5][event] != undefined) {
              var v2 = v3[v5][0];
              mx.events.UIEventDispatcher[v2](this);
            }
          }
        };

        v2.removeEventListener = function (event, handler) {
          var v6 = '__q_' + event;
          mx.events.EventDispatcher._removeEventListener(this[v6], event, handler);
          if (this[v6].length == 0) {
            var v2 = mx.events.UIEventDispatcher.lowLevelEvents;
            for (var v5 in v2) {
              if (mx.events.UIEventDispatcher[v5][event] != undefined) {
                var v3 = v2[v5][1];
                mx.events.UIEventDispatcher[v2[v5][1]](this);
              }
            }
          }
        };

        v1.keyEvents = {'keyDown': 1, 'keyUp': 1};
        v1.loadEvents = {'load': 1, 'unload': 1};
        v1.lowLevelEvents = {'keyEvents': ['addKeyEvents', 'removeKeyEvents'], 'loadEvents': ['addLoadEvents', 'removeLoadEvents']};
        v1._fEventDispatcher = undefined;
        ASSetPropFlags(mx.events.UIEventDispatcher.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 198 __Packages.mx.core.ExternalContent {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.core) {
        _global.mx.core = new Object();
      }
      if (!_global.mx.core.ExternalContent) {
        var v1 = function () {};

        mx.core.ExternalContent = v1;
        var v2 = v1.prototype;
        v2.loadExternal = function (url, placeholderClassName, instanceName, depth, initProps) {
          var v2;
          v2 = this.createObject(placeholderClassName, instanceName, depth, initProps);
          this[mx.core.View.childNameBase + this.numChildren] = v2;
          if (this.prepList == undefined) {
            this.prepList = new Object();
          }
          this.prepList[instanceName] = {'obj': v2, 'url': url, 'complete': false, 'initProps': initProps};
          this.prepareToLoadMovie(v2);
          return v2;
        };

        v2.prepareToLoadMovie = function (obj) {
          obj.unloadMovie();
          this.doLater(this, 'waitForUnload');
        };

        v2.waitForUnload = function () {
          var v3;
          for (v3 in this.prepList) {
            var v2 = this.prepList[v3];
            if (v2.obj.getBytesTotal() == 0) {
              if (this.loadList == undefined) {
                this.loadList = new Object();
              }
              this.loadList[v3] = v2;
              v2.obj.loadMovie(v2.url);
              delete this.prepList[v3];
              this.doLater(this, 'checkLoadProgress');
            } else {
              this.doLater(this, 'waitForUnload');
            }
          }
        };

        v2.checkLoadProgress = function () {
          var v8 = false;
          var v3;
          for (v3 in this.loadList) {
            var v2 = this.loadList[v3];
            v2.loaded = v2.obj.getBytesLoaded();
            v2.total = v2.obj.getBytesTotal();
            if (v2.total > 0) {
              v2.obj._visible = false;
              this.dispatchEvent({'type': 'progress', 'target': v2.obj, 'current': v2.loaded, 'total': v2.total});
              if (v2.loaded == v2.total) {
                if (this.loadedList == undefined) {
                  this.loadedList = new Object();
                }
                this.loadedList[v3] = v2;
                delete this.loadList[v3];
                this.doLater(this, 'contentLoaded');
              }
            } else {
              if (v2.total == -1) {
                if (v2.failedOnce != undefined) {
                  ++v2.failedOnce;
                  if (v2.failedOnce > 3) {
                    this.dispatchEvent({'type': 'complete', 'target': v2.obj, 'current': v2.loaded, 'total': v2.total});
                    delete this.loadList[v3];
                    false;
                  }
                } else {
                  v2.failedOnce = 0;
                }
              }
            }
            v8 = true;
          }
          if (v8) {
            this.doLater(this, 'checkLoadProgress');
          }
        };

        v2.contentLoaded = function () {
          var v4;
          for (v4 in this.loadedList) {
            var v2 = this.loadedList[v4];
            v2.obj._visible = true;
            v2.obj._complete = true;
            var v3;
            for (v3 in v2.initProps) {
              v2.obj[v3] = v2.initProps[v3];
            }
            this.childLoaded(v2.obj);
            this.dispatchEvent({'type': 'complete', 'target': v2.obj, 'current': v2.loaded, 'total': v2.total});
            delete this.loadedList[v4];
            false;
          }
        };

        v2.convertToUIObject = function (obj) {
          if (obj.setSize == undefined) {
            var v2 = mx.core.UIObject.prototype;
            obj.addProperty('width', v2.__get__width, null);
            obj.addProperty('height', v2.__get__height, null);
            obj.addProperty('left', v2.__get__left, null);
            obj.addProperty('x', v2.__get__x, null);
            obj.addProperty('top', v2.__get__top, null);
            obj.addProperty('y', v2.__get__y, null);
            obj.addProperty('right', v2.__get__right, null);
            obj.addProperty('bottom', v2.__get__bottom, null);
            obj.addProperty('visible', v2.__get__visible, v2.__set__visible);
            obj.move = mx.core.UIObject.prototype.move;
            obj.setSize = mx.core.UIObject.prototype.setSize;
            obj.size = mx.core.UIObject.prototype.size;
            mx.events.UIEventDispatcher.initialize(obj);
          }
        };

        v1.enableExternalContent = function () {};

        v1.classConstruct = function () {
          var v1 = mx.core.View.prototype;
          var v2 = mx.core.ExternalContent.prototype;
          v1.loadExternal = v2.loadExternal;
          v1.prepareToLoadMovie = v2.prepareToLoadMovie;
          v1.waitForUnload = v2.waitForUnload;
          v1.checkLoadProgress = v2.checkLoadProgress;
          v1.contentLoaded = v2.contentLoaded;
          v1.convertToUIObject = v2.convertToUIObject;
          return true;
        };

        v1.classConstructed = mx.core.ExternalContent.classConstruct();
        v1.ViewDependency = mx.core.View;
        ASSetPropFlags(mx.core.ExternalContent.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 199 __Packages.mx.controls.Loader {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.Loader) {
        var v1 = function () {
          super();
        };

        mx.controls.Loader = v1;
        var v2 = new mx.core.View();
        mx.controls.Loader.prototype = v2;
        v2.init = function () {
          super.init();
        };

        v2.setSize = function (w, h, noEvent) {
          this._origWidth = w;
          this._origHeight = h;
          super.setSize(w, h, noEvent);
          if (_global.isLivePreview) {
            this.livePreview._width = this.__width - 1;
            this.livePreview._height = this.__height - 1;
          }
        };

        v2.draw = function () {
          this.size();
        };

        v2.size = function () {
          super.size();
          if (this.__scaleContent) {
            this.doScaleContent();
          } else {
            this.doScaleLoader();
          }
        };

        v2.createChildren = function () {
          super.createChildren();
          if (_global.isLivePreview) {
            this.createTextField('livePreview', -1000, 0, 0, 99, 99);
            this.livePreview.text = 'mx.controls.Loader';
            this.livePreview.border = true;
          }
          if (this.__autoLoad) {
            this.load();
          }
        };

        v2.getAutoLoad = function () {
          return this.__autoLoad;
        };

        v2.__get__autoLoad = function () {
          return this.getAutoLoad();
        };

        v2.setAutoLoad = function (b) {
          if (this.__autoLoad != b) {
            this.__autoLoad = b;
            if (this.__autoLoad && !this[mx.core.View.childNameBase + 0]._complete) {
              this.load();
            }
          }
        };

        v2.__set__autoLoad = function (b) {
          this.setAutoLoad(b);
          return this.__get__autoLoad();
        };

        v2.getBytesLoaded = function () {
          return this.__bytesLoaded;
        };

        v2.__get__bytesLoaded = function () {
          return this.getBytesLoaded();
        };

        v2.getBytesTotal = function () {
          return this.__bytesTotal;
        };

        v2.__get__bytesTotal = function () {
          return this.getBytesTotal();
        };

        v2.getContent = function () {
          return this.contentHolder;
        };

        v2.__get__content = function () {
          return this.getContent();
        };

        v2.getContentPath = function () {
          return this.__contentPath;
        };

        v2.__get__contentPath = function () {
          return this.getContentPath();
        };

        v2.setContentPath = function (url) {
          if (this.__contentPath != url) {
            this.__contentPath = url;
            if (this.childrenCreated) {
              if (this.__autoLoad) {
                this.load();
              }
            }
          }
        };

        v2.__set__contentPath = function (c) {
          this.setContentPath(c);
          return this.__get__contentPath();
        };

        v2.getPercentLoaded = function () {
          var v2 = 100 * (this.__bytesLoaded / this.__bytesTotal);
          if (isNaN(v2)) {
            v2 = 0;
          }
          return v2;
        };

        v2.__get__percentLoaded = function () {
          return this.getPercentLoaded();
        };

        v2.__get__scaleContent = function () {
          return this.getScaleContent();
        };

        v2.getScaleContent = function () {
          return this.__scaleContent;
        };

        v2.setScaleContent = function (b) {
          if (this.__scaleContent != b) {
            this.__scaleContent = b;
            if (this.__scaleContent) {
              this.doScaleContent();
            } else {
              this.doScaleLoader();
            }
          }
        };

        v2.__set__scaleContent = function (b) {
          this.setScaleContent(b);
          return this.__get__scaleContent();
        };

        v2.load = function (url) {
          if (url != undefined) {
            this.__contentPath = url;
          }
          if (this[mx.core.View.childNameBase + 0] != undefined) {
            if (this[mx.core.View.childNameBase + 0]._complete) {
              this.setSize(this._origWidth, this._origHeight);
            }
            this.destroyChildAt(0);
          }
          if (this.__contentPath == undefined || this.__contentPath == '') {
            return undefined;
          }
          this.createChild(this.__contentPath, 'contentHolder');
        };

        v2.childLoaded = function (obj) {
          super.childLoaded(obj);
          obj._rotation = 0;
          this._origWidth = this.__width;
          this._origHeight = this.__height;
          if (this.__scaleContent) {
            this.doScaleContent();
          } else {
            this.doScaleLoader();
          }
        };

        v2.dispatchEvent = function (obj) {
          if (obj.type == 'progress' || obj.type == 'complete') {
            obj.target = this;
            this.__bytesTotal = obj.total;
            this.__bytesLoaded = obj.current;
          }
          super.dispatchEvent(obj);
        };

        v2.doScaleContent = function () {
          if (!this[mx.core.View.childNameBase + 0]._complete) {
            return undefined;
          }
          this.unScaleContent();
          var v2 = this.border_mc.__get__borderMetrics();
          var v7 = this._origWidth - v2.left - v2.right;
          var v6 = this._origHeight - v2.top - v2.bottom;
          var v9 = v2.left;
          var v8 = v2.top;
          var v5 = v7 / this.contentHolder._width;
          var v3 = v6 / this.contentHolder._height;
          var v4;
          if (v5 > v3) {
            v9 = v2.left + Math.floor((v7 - this.contentHolder._width * v3) / 2);
            v4 = v3;
          } else {
            v8 = v2.top + Math.floor((v6 - this.contentHolder._height * v5) / 2);
            v4 = v5;
          }
          v4 *= 100;
          this.contentHolder._yscale = v4;
          this.contentHolder._xscale = this.contentHolder._yscale;
          this.contentHolder._x = v9;
          this.contentHolder._y = v8;
          if (this.__width != this._origWidth || this.__height != this._origHeight) {
            this.setSize(this._origWidth, this._origHeight);
          }
        };

        v2.doScaleLoader = function () {
          if (!this[mx.core.View.childNameBase + 0]._complete) {
            return undefined;
          }
          this.unScaleContent();
          var v2 = this.border_mc.__get__borderMetrics();
          var v4 = this.contentHolder._width + v2.left + v2.right;
          var v3 = this.contentHolder._height + v2.top + v2.bottom;
          if (this.__width != v4 || this.__height != v3) {
            this.setSize(v4, v3);
          }
          this.contentHolder._x = v2.left;
          this.contentHolder._y = v2.top;
        };

        v2.unScaleContent = function () {
          this.contentHolder._yscale = 100;
          this.contentHolder._xscale = 100;
          this.contentHolder._y = 0;
          this.contentHolder._x = 0;
        };

        v1.symbolName = 'Loader';
        v1.symbolOwner = mx.controls.Loader;
        v1.version = '2.0.2.127';
        v2.className = 'Loader';
        v2.clipParameters = {'autoLoad': 1, 'scaleContent': 1, 'contentPath': 1};
        v1.mergedClipParameters = mx.core.UIObject.mergeClipParameters(mx.controls.Loader.prototype.clipParameters, mx.core.View.prototype.clipParameters);
        v2.__autoLoad = true;
        v2.__bytesLoaded = undefined;
        v2.__bytesTotal = undefined;
        v2.__contentPath = undefined;
        v2.__scaleContent = true;
        v2.addProperty('autoLoad', v2.__get__autoLoad, v2.__set__autoLoad);
        v2.addProperty('bytesLoaded', v2.__get__bytesLoaded, function () {});
        v2.addProperty('bytesTotal', v2.__get__bytesTotal, function () {});
        v2.addProperty('content', v2.__get__content, function () {});
        v2.addProperty('contentPath', v2.__get__contentPath, v2.__set__contentPath);
        v2.addProperty('percentLoaded', v2.__get__percentLoaded, function () {});
        v2.addProperty('scaleContent', v2.__get__scaleContent, v2.__set__scaleContent);
        ASSetPropFlags(mx.controls.Loader.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 200 __Packages.mx.skins.ColoredSkinElement {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.ColoredSkinElement) {
        var v1 = function () {};

        mx.skins.ColoredSkinElement = v1;
        var v2 = v1.prototype;
        v2.setColor = function (c) {
          if (c != undefined) {
            var v2 = new Color(this);
            v2.setRGB(c);
          }
        };

        v2.draw = function (Void) {
          this.setColor(this.getStyle(this._color));
          this.onEnterFrame = undefined;
        };

        v2.invalidateStyle = function (Void) {
          this.onEnterFrame = this.draw;
        };

        v1.setColorStyle = function (p, colorStyle) {
          if (p._color == undefined) {
            p._color = colorStyle;
          }
          p.setColor = mx.skins.ColoredSkinElement.mixins.setColor;
          p.invalidateStyle = mx.skins.ColoredSkinElement.mixins.invalidateStyle;
          p.draw = mx.skins.ColoredSkinElement.mixins.draw;
          p.setColor(p.getStyle(colorStyle));
        };

        v1.mixins = new mx.skins.ColoredSkinElement();
        ASSetPropFlags(mx.skins.ColoredSkinElement.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 201 __Packages.mx.core.ext.UIObjectExtensions {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.core) {
        _global.mx.core = new Object();
      }
      if (!_global.mx.core.ext) {
        _global.mx.core.ext = new Object();
      }
      if (!_global.mx.core.ext.UIObjectExtensions) {
        var v1 = function () {};

        mx.core.ext.UIObjectExtensions = v1;
        var v2 = v1.prototype;
        v1.addGeometry = function (tf, ui) {
          tf.addProperty('width', ui.__get__width, null);
          tf.addProperty('height', ui.__get__height, null);
          tf.addProperty('left', ui.__get__left, null);
          tf.addProperty('x', ui.__get__x, null);
          tf.addProperty('top', ui.__get__top, null);
          tf.addProperty('y', ui.__get__y, null);
          tf.addProperty('right', ui.__get__right, null);
          tf.addProperty('bottom', ui.__get__bottom, null);
          tf.addProperty('visible', ui.__get__visible, ui.__set__visible);
        };

        v1.Extensions = function () {
          if (mx.core.ext.UIObjectExtensions.bExtended == true) {
            return true;
          }
          mx.core.ext.UIObjectExtensions.bExtended = true;
          var v6 = mx.core.UIObject.prototype;
          var v9 = mx.skins.SkinElement.prototype;
          mx.core.ext.UIObjectExtensions.addGeometry(v9, v6);
          mx.events.UIEventDispatcher.initialize(v6);
          var v13 = mx.skins.ColoredSkinElement;
          mx.styles.CSSTextStyles.addTextStyles(v6);
          var v5 = MovieClip.prototype;
          v5.getTopLevel = v6.getTopLevel;
          v5.createLabel = v6.createLabel;
          v5.createObject = v6.createObject;
          v5.createClassObject = v6.createClassObject;
          v5.createEmptyObject = v6.createEmptyObject;
          v5.destroyObject = v6.destroyObject;
          _global.ASSetPropFlags(v5, 'getTopLevel', 1);
          _global.ASSetPropFlags(v5, 'createLabel', 1);
          _global.ASSetPropFlags(v5, 'createObject', 1);
          _global.ASSetPropFlags(v5, 'createClassObject', 1);
          _global.ASSetPropFlags(v5, 'createEmptyObject', 1);
          _global.ASSetPropFlags(v5, 'destroyObject', 1);
          v5.__getTextFormat = v6.__getTextFormat;
          v5._getTextFormat = v6._getTextFormat;
          v5.getStyleName = v6.getStyleName;
          v5.getStyle = v6.getStyle;
          _global.ASSetPropFlags(v5, '__getTextFormat', 1);
          _global.ASSetPropFlags(v5, '_getTextFormat', 1);
          _global.ASSetPropFlags(v5, 'getStyleName', 1);
          _global.ASSetPropFlags(v5, 'getStyle', 1);
          var v7 = TextField.prototype;
          mx.core.ext.UIObjectExtensions.addGeometry(v7, v6);
          v7.addProperty('enabled', function () {
            return this.__enabled;
          }, function (x) {
            this.__enabled = x;
            this.invalidateStyle();
          });
          v7.move = v9.move;
          v7.setSize = v9.setSize;
          v7.invalidateStyle = function () {
            this.invalidateFlag = true;
          };

          v7.draw = function () {
            if (this.invalidateFlag) {
              this.invalidateFlag = false;
              var v2 = this._getTextFormat();
              this.setTextFormat(v2);
              this.setNewTextFormat(v2);
              this.embedFonts = v2.embedFonts == true;
              if (this.__text != undefined) {
                if (this.text == '') {
                  this.text = this.__text;
                }
                delete this.__text;
              }
              this._visible = true;
            }
          };

          v7.setColor = function (color) {
            this.textColor = color;
          };

          v7.getStyle = v5.getStyle;
          v7.__getTextFormat = v6.__getTextFormat;
          v7.setValue = function (v) {
            this.text = v;
          };

          v7.getValue = function () {
            return this.text;
          };

          v7.addProperty('value', function () {
            return this.getValue();
          }, function (v) {
            this.setValue(v);
          });
          v7._getTextFormat = function () {
            var v2 = this.stylecache.tf;
            if (v2 != undefined) {
              return v2;
            }
            v2 = new TextFormat();
            this.__getTextFormat(v2);
            this.stylecache.tf = v2;
            if (this.__enabled == false) {
              if (this.enabledColor == undefined) {
                var v4 = this.getTextFormat();
                this.enabledColor = v4.color;
              }
              var v3 = this.getStyle('disabledColor');
              v2.color = v3;
              return v2;
            }
            if (this.enabledColor != undefined) {
              if (v2.color == undefined) {
                v2.color = this.enabledColor;
              }
            }
            return v2;
          };

          v7.getPreferredWidth = function () {
            this.draw();
            return this.textWidth + 4;
          };

          v7.getPreferredHeight = function () {
            this.draw();
            return this.textHeight + 4;
          };

          TextFormat.prototype.getTextExtent2 = function (s) {
            var v3 = _root._getTextExtent;
            if (v3 == undefined) {
              _root.createTextField('_getTextExtent', -2, 0, 0, 1000, 100);
              v3 = _root._getTextExtent;
              v3._visible = false;
            }
            _root._getTextExtent.text = s;
            var v4 = this.align;
            this.align = 'left';
            _root._getTextExtent.setTextFormat(this);
            this.align = v4;
            return {'width': v3.textWidth, 'height': v3.textHeight};
          };

          if (_global.style == undefined) {
            _global.style = new mx.styles.CSSStyleDeclaration();
            _global.cascadingStyles = true;
            _global.styles = new Object();
            _global.skinRegistry = new Object();
            if (_global._origWidth == undefined) {
              _global.origWidth = Stage.width;
              _global.origHeight = Stage.height;
            }
          }
          var v4 = _root;
          while (v4._parent != undefined) {
            v4 = v4._parent;
          }
          v4.addProperty('width', function () {
            return Stage.width;
          }, null);
          v4.addProperty('height', function () {
            return Stage.height;
          }, null);
          _global.ASSetPropFlags(v4, 'width', 1);
          _global.ASSetPropFlags(v4, 'height', 1);
          return true;
        };

        v1.bExtended = false;
        v1.UIObjectExtended = mx.core.ext.UIObjectExtensions.Extensions();
        v1.UIObjectDependency = mx.core.UIObject;
        v1.SkinElementDependency = mx.skins.SkinElement;
        v1.CSSTextStylesDependency = mx.styles.CSSTextStyles;
        v1.UIEventDispatcherDependency = mx.events.UIEventDispatcher;
        ASSetPropFlags(mx.core.ext.UIObjectExtensions.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 202 __Packages.mx.managers.SystemManager {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.managers) {
        _global.mx.managers = new Object();
      }
      if (!_global.mx.managers.SystemManager) {
        var v1 = function () {};

        mx.managers.SystemManager = v1;
        var v2 = v1.prototype;
        v1.init = function (Void) {
          if (mx.managers.SystemManager._initialized == false) {
            mx.managers.SystemManager._initialized = true;
            mx.events.EventDispatcher.initialize(mx.managers.SystemManager);
            Mouse.addListener(mx.managers.SystemManager);
            Stage.addListener(mx.managers.SystemManager);
            mx.managers.SystemManager._xAddEventListener = mx.managers.SystemManager.addEventListener;
            mx.managers.SystemManager.addEventListener = mx.managers.SystemManager.__addEventListener;
            mx.managers.SystemManager._xRemoveEventListener = mx.managers.SystemManager.removeEventListener;
            mx.managers.SystemManager.removeEventListener = mx.managers.SystemManager.__removeEventListener;
          }
        };

        v1.addFocusManager = function (f) {
          mx.managers.SystemManager.form = f;
          f.focusManager.activate();
        };

        v1.removeFocusManager = function (f) {};

        v1.onMouseDown = function (Void) {
          var v1 = mx.managers.SystemManager.form;
          v1.focusManager._onMouseDown();
        };

        v1.onResize = function (Void) {
          var v7 = Stage.width;
          var v6 = Stage.height;
          var v9 = _global.origWidth;
          var v8 = _global.origHeight;
          var v3 = Stage.align;
          var v5 = (v9 - v7) / 2;
          var v4 = (v8 - v6) / 2;
          if (v3 == 'T') {
            v4 = 0;
          } else {
            if (v3 == 'B') {
              v4 = v8 - v6;
            } else {
              if (v3 == 'L') {
                v5 = 0;
              } else {
                if (v3 == 'R') {
                  v5 = v9 - v7;
                } else {
                  if (v3 == 'LT') {
                    v4 = 0;
                    v5 = 0;
                  } else {
                    if (v3 == 'TR') {
                      v4 = 0;
                      v5 = v9 - v7;
                    } else {
                      if (v3 == 'LB') {
                        v4 = v8 - v6;
                        v5 = 0;
                      } else {
                        if (v3 == 'RB') {
                          v4 = v8 - v6;
                          v5 = v9 - v7;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (mx.managers.SystemManager.__screen == undefined) {
            mx.managers.SystemManager.__screen = new Object();
          }
          mx.managers.SystemManager.__screen.x = v5;
          mx.managers.SystemManager.__screen.y = v4;
          mx.managers.SystemManager.__screen.width = v7;
          mx.managers.SystemManager.__screen.height = v6;
          _root.focusManager.relocate();
          mx.managers.SystemManager.dispatchEvent({'type': 'resize'});
        };

        v1.__get__screen = function () {
          mx.managers.SystemManager.init();
          if (mx.managers.SystemManager.__screen == undefined) {
            mx.managers.SystemManager.onResize();
          }
          return mx.managers.SystemManager.__screen;
        };

        v1._initialized = false;
        v1.idleFrames = 0;
        v1.isMouseDown = false;
        v1.forms = new Array();
        v1.addProperty('screen', v1.__get__screen, function () {});
        ASSetPropFlags(mx.managers.SystemManager.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 203 __Packages.mx.managers.OverlappedWindows {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.managers) {
        _global.mx.managers = new Object();
      }
      if (!_global.mx.managers.OverlappedWindows) {
        var v1 = function () {};

        mx.managers.OverlappedWindows = v1;
        var v2 = v1.prototype;
        v1.checkIdle = function (Void) {
          if (mx.managers.SystemManager.idleFrames > 10) {
            mx.managers.SystemManager.dispatchEvent({'type': 'idle'});
          } else {
            ++mx.managers.SystemManager.idleFrames;
          }
        };

        v1.__addEventListener = function (e, o, l) {
          if (e == 'idle') {
            if (mx.managers.SystemManager.interval == undefined) {
              mx.managers.SystemManager.interval = setInterval(mx.managers.SystemManager.checkIdle, 100);
            }
          }
          mx.managers.SystemManager._xAddEventListener(e, o, l);
        };

        v1.__removeEventListener = function (e, o, l) {
          if (e == 'idle') {
            if (mx.managers.SystemManager._xRemoveEventListener(e, o, l) == 0) {
              clearInterval(mx.managers.SystemManager.interval);
            }
          } else {
            mx.managers.SystemManager._xRemoveEventListener(e, o, l);
          }
        };

        v1.onMouseDown = function (Void) {
          mx.managers.SystemManager.idleFrames = 0;
          mx.managers.SystemManager.isMouseDown = true;
          var v5 = _root;
          var v3;
          var v8 = _root._xmouse;
          var v7 = _root._ymouse;
          if (mx.managers.SystemManager.form.modalWindow == undefined) {
            if (mx.managers.SystemManager.forms.length > 1) {
              var v6 = mx.managers.SystemManager.forms.length;
              var v4;
              v4 = 0;
              while (v4 < v6) {
                var v2 = mx.managers.SystemManager.forms[v4];
                if (v2._visible) {
                  if (v2.hitTest(v8, v7)) {
                    if (v3 == undefined) {
                      v3 = v2.getDepth();
                      v5 = v2;
                    } else {
                      if (v3 < v2.getDepth()) {
                        v3 = v2.getDepth();
                        v5 = v2;
                      }
                    }
                  }
                }
                ++v4;
              }
              if (v5 != mx.managers.SystemManager.form) {
                mx.managers.SystemManager.activate(v5);
              }
            }
          }
          var v9 = mx.managers.SystemManager.form;
          v9.focusManager._onMouseDown();
        };

        v1.onMouseMove = function (Void) {
          mx.managers.SystemManager.idleFrames = 0;
        };

        v1.onMouseUp = function (Void) {
          mx.managers.SystemManager.isMouseDown = false;
          mx.managers.SystemManager.idleFrames = 0;
        };

        v1.activate = function (f) {
          if (mx.managers.SystemManager.form != undefined) {
            if (mx.managers.SystemManager.form != f && mx.managers.SystemManager.forms.length > 1) {
              var v1 = mx.managers.SystemManager.form;
              v1.focusManager.deactivate();
            }
          }
          mx.managers.SystemManager.form = f;
          f.focusManager.activate();
        };

        v1.deactivate = function (f) {
          if (mx.managers.SystemManager.form != undefined) {
            if (mx.managers.SystemManager.form == f && mx.managers.SystemManager.forms.length > 1) {
              var v5 = mx.managers.SystemManager.form;
              v5.focusManager.deactivate();
              var v3 = mx.managers.SystemManager.forms.length;
              var v1;
              var v2;
              v1 = 0;
              while (v1 < v3) {
                if (mx.managers.SystemManager.forms[v1] == f) {
                  v1 += 1;
                  while (v1 < v3) {
                    if (mx.managers.SystemManager.forms[v1]._visible == true) {
                      v2 = mx.managers.SystemManager.forms[v1];
                    }
                    ++v1;
                  }
                  mx.managers.SystemManager.form = v2;
                  break;
                } else {
                  if (mx.managers.SystemManager.forms[v1]._visible == true) {
                    v2 = mx.managers.SystemManager.forms[v1];
                  }
                }
                ++v1;
              }
              v5 = mx.managers.SystemManager.form;
              v5.focusManager.activate();
            }
          }
        };

        v1.addFocusManager = function (f) {
          mx.managers.SystemManager.forms.push(f);
          mx.managers.SystemManager.activate(f);
        };

        v1.removeFocusManager = function (f) {
          var v3 = mx.managers.SystemManager.forms.length;
          var v1;
          v1 = 0;
          while (v1 < v3) {
            if (mx.managers.SystemManager.forms[v1] == f) {
              if (mx.managers.SystemManager.form == f) {
                mx.managers.SystemManager.deactivate(f);
              }
              mx.managers.SystemManager.forms.splice(v1, 1);
              return undefined;
            }
            ++v1;
          }
        };

        v1.enableOverlappedWindows = function () {
          if (!mx.managers.OverlappedWindows.initialized) {
            mx.managers.OverlappedWindows.initialized = true;
            mx.managers.SystemManager.checkIdle = mx.managers.OverlappedWindows.checkIdle;
            mx.managers.SystemManager.__addEventListener = mx.managers.OverlappedWindows.__addEventListener;
            mx.managers.SystemManager.__removeEventListener = mx.managers.OverlappedWindows.__removeEventListener;
            mx.managers.SystemManager.onMouseDown = mx.managers.OverlappedWindows.onMouseDown;
            mx.managers.SystemManager.onMouseMove = mx.managers.OverlappedWindows.onMouseMove;
            mx.managers.SystemManager.onMouseUp = mx.managers.OverlappedWindows.onMouseUp;
            mx.managers.SystemManager.activate = mx.managers.OverlappedWindows.activate;
            mx.managers.SystemManager.deactivate = mx.managers.OverlappedWindows.deactivate;
            mx.managers.SystemManager.addFocusManager = mx.managers.OverlappedWindows.addFocusManager;
            mx.managers.SystemManager.removeFocusManager = mx.managers.OverlappedWindows.removeFocusManager;
          }
        };

        v1.initialized = false;
        v1.SystemManagerDependency = mx.managers.SystemManager;
        ASSetPropFlags(mx.managers.OverlappedWindows.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 204 __Packages.mx.managers.FocusManager {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.managers) {
        _global.mx.managers = new Object();
      }
      if (!_global.mx.managers.FocusManager) {
        var v1 = function () {
          super();
        };

        mx.managers.FocusManager = v1;
        var v2 = new mx.core.UIComponent();
        mx.managers.FocusManager.prototype = v2;
        v2.__get__defaultPushButton = function () {
          return this.__defaultPushButton;
        };

        v2.__set__defaultPushButton = function (x) {
          if (x != this.__defaultPushButton) {
            this.__defaultPushButton.__set__emphasized(false);
            this.__defaultPushButton = x;
            this.defPushButton = x;
            x.__set__emphasized(true);
          }
          return this.__get__defaultPushButton();
        };

        v2.getMaxTabIndex = function (o) {
          var v3 = 0;
          var v6;
          for (v6 in o) {
            var v2 = o[v6];
            if (v2._parent == o) {
              if (v2.tabIndex != undefined) {
                if (v2.tabIndex > v3) {
                  v3 = v2.tabIndex;
                }
              }
              if (v2.tabChildren == true) {
                var v4 = this.getMaxTabIndex(v2);
                if (v4 > v3) {
                  v3 = v4;
                }
              }
            }
          }
          return v3;
        };

        v2.getNextTabIndex = function (Void) {
          return this.getMaxTabIndex(this.form) + 1;
        };

        v2.__get__nextTabIndex = function () {
          return this.getNextTabIndex();
        };

        v2.relocate = function (Void) {
          var v2 = mx.managers.SystemManager.__get__screen();
          this.move(v2.x - 1, v2.y - 1);
        };

        v2.init = function (Void) {
          super.init();
          this.tabEnabled = false;
          this._height = 1;
          this._width = 1;
          this._y = -1;
          this._x = -1;
          this._alpha = 0;
          this._parent.focusManager = this;
          this._parent.tabChildren = true;
          this._parent.tabEnabled = false;
          this.form = this._parent;
          this._parent.addEventListener('hide', this);
          this._parent.addEventListener('reveal', this);
          mx.managers.SystemManager.init();
          mx.managers.SystemManager.addFocusManager(this.form);
          this.tabCapture.tabIndex = 0;
          this.watch('enabled', this.enabledChanged);
          Selection.addListener(this);
          this.lastMouse = new Object();
          _global.ASSetPropFlags(this._parent, 'focusManager', 1);
          _global.ASSetPropFlags(this._parent, 'tabChildren', 1);
          _global.ASSetPropFlags(this._parent, 'tabEnabled', 1);
        };

        v2.enabledChanged = function (id, oldValue, newValue) {
          this._visible = newValue;
          return newValue;
        };

        v2.activate = function (Void) {
          Key.addListener(this);
          this._visible = true;
          this.activated = this._visible;
          if (this.lastFocus != undefined) {
            this.bNeedFocus = true;
            if (!mx.managers.SystemManager.isMouseDown) {
              this.doLater(this, 'restoreFocus');
            }
          }
        };

        v2.deactivate = function (Void) {
          Key.removeListener(this);
          this._visible = false;
          this.activated = this._visible;
          var v2 = this.getSelectionFocus();
          var v3 = this.getActualFocus(v2);
          if (this.isOurFocus(v3)) {
            this.lastSelFocus = v2;
            this.lastFocus = v3;
          }
          this.cancelAllDoLaters();
        };

        v2.isOurFocus = function (o) {
          if (o.focusManager == this) {
            return true;
          }
          while (o != undefined) {
            if (o.focusManager != undefined) {
              return false;
            }
            if (o._parent == this._parent) {
              return true;
            }
            o = o._parent;
          }
          return false;
        };

        v2.onSetFocus = function (o, n) {
          if (n == null) {
            if (this.activated) {
              this.bNeedFocus = true;
            }
          } else {
            var v2 = this.getFocus();
            if (this.isOurFocus(v2)) {
              this.bNeedFocus = false;
              this.lastFocus = v2;
              this.lastSelFocus = n;
            }
          }
        };

        v2.restoreFocus = function (Void) {
          var v2 = this.lastSelFocus.hscroll;
          if (v2 != undefined) {
            var v5 = this.lastSelFocus.scroll;
            var v4 = this.lastSelFocus.background;
          }
          this.lastFocus.setFocus();
          var v3 = Selection;
          Selection.setSelection(v3.lastBeginIndex, v3.lastEndIndex);
          if (v2 != undefined) {
            this.lastSelFocus.scroll = v5;
            this.lastSelFocus.hscroll = v2;
            this.lastSelFocus.background = v4;
          }
        };

        v2.onUnload = function (Void) {
          mx.managers.SystemManager.removeFocusManager(this.form);
        };

        v2.setFocus = function (o) {
          if (o == null) {
            Selection.setFocus(null);
          } else {
            if (o.setFocus == undefined) {
              Selection.setFocus(o);
            } else {
              o.setFocus();
            }
          }
        };

        v2.getActualFocus = function (o) {
          var v1 = o._parent;
          while (v1 != undefined) {
            if (v1.focusTextField != undefined) {
              while (v1.focusTextField != undefined) {
                o = v1;
                v1 = v1._parent;
                if (v1 == undefined) {
                  return undefined;
                }
                if (v1.focusTextField == undefined) {
                  return o;
                }
              }
            }
            if (v1.tabEnabled != true) {
              return o;
            }
            o = v1;
            v1 = o._parent;
          }
          return undefined;
        };

        v2.getSelectionFocus = function () {
          var m = Selection.getFocus();
          var o = eval(m);
          return o;
        };

        v2.getFocus = function (Void) {
          var v2 = this.getSelectionFocus();
          return this.getActualFocus(v2);
        };

        v2.walkTree = function (p, index, groupName, dir, lookup, firstChild) {
          var v5 = true;
          var v11;
          for (v11 in p) {
            var v2 = p[v11];
            if (v2._parent == p && v2.enabled != false && v2._visible != false && (v2.tabEnabled == true || v2.tabEnabled != false && (v2.onPress != undefined || v2.onRelease != undefined || v2.onReleaseOutside != undefined || v2.onDragOut != undefined || v2.onDragOver != undefined || v2.onRollOver != undefined || v2.onRollOut != undefined || v2 instanceof TextField))) {
              if (v2._searchKey == this._searchKey) {
                continue;
              }
              v2._searchKey = this._searchKey;
              if (v2 != this._lastTarget) {
                if ((v2.groupName != undefined || groupName != undefined) && v2.groupName == groupName) {
                  continue;
                }
                if (v2 instanceof TextField && v2.selectable == false) {
                  continue;
                }
                if (v5 || v2.groupName != undefined && v2.groupName == this._firstNode.groupName && v2.selected == true) {
                  if (firstChild) {
                    this._firstNode = v2;
                    firstChild = false;
                  }
                }
                if (this._nextIsNext == true) {
                  if (v2.groupName != undefined && v2.groupName == this._nextNode.groupName && v2.selected == true || this._nextNode == undefined && (v2.groupName == undefined || v2.groupName != undefined && v2.groupName != groupName)) {
                    this._nextNode = v2;
                  }
                }
                if (v2.groupName == undefined || groupName != v2.groupName) {
                  if (this._lastx.groupName != undefined && v2.groupName == this._lastx.groupName && this._lastx.selected == true) {
                  } else {
                    this._lastx = v2;
                  }
                }
              } else {
                this._prevNode = this._lastx;
                this._needPrev = false;
                this._nextIsNext = true;
              }
              if (v2.tabIndex != undefined) {
                if (v2.tabIndex == index) {
                  if (this._foundList[v2._name] == undefined) {
                    if (this._needPrev) {
                      this._prevObj = v2;
                      this._needPrev = false;
                    }
                    this._nextObj = v2;
                  }
                }
                if (dir && v2.tabIndex > index) {
                  if (this._nextObj == undefined || this._nextObj.tabIndex > v2.tabIndex && (v2.groupName == undefined || this._nextObj.groupName == undefined || v2.groupName != this._nextObj.groupName) || this._nextObj.groupName != undefined && this._nextObj.groupName == v2.groupName && this._nextObj.selected != true && (v2.selected == true || this._nextObj.tabIndex > v2.tabIndex)) {
                    this._nextObj = v2;
                  }
                } else {
                  if (!dir && v2.tabIndex < index) {
                    if (this._prevObj == undefined || this._prevObj.tabIndex < v2.tabIndex && (v2.groupName == undefined || this._prevObj.groupName == undefined || v2.groupName != this._prevObj.groupName) || this._prevObj.groupName != undefined && this._prevObj.groupName == v2.groupName && this._prevObj.selected != true && (v2.selected == true || this._prevObj.tabIndex < v2.tabIndex)) {
                      this._prevObj = v2;
                    }
                  }
                }
                if (this._firstObj == undefined || v2.tabIndex < this._firstObj.tabIndex && (v2.groupName == undefined || this._firstObj.groupName == undefined || v2.groupName != this._firstObj.groupName) || this._firstObj.groupName != undefined && this._firstObj.groupName == v2.groupName && this._firstObj.selected != true && (v2.selected == true || v2.tabIndex < this._firstObj.tabIndex)) {
                  this._firstObj = v2;
                }
                if (this._lastObj == undefined || v2.tabIndex > this._lastObj.tabIndex && (v2.groupName == undefined || this._lastObj.groupName == undefined || v2.groupName != this._lastObj.groupName) || this._lastObj.groupName != undefined && this._lastObj.groupName == v2.groupName && this._lastObj.selected != true && (v2.selected == true || v2.tabIndex > this._lastObj.tabIndex)) {
                  this._lastObj = v2;
                }
              }
              if (v2.tabChildren) {
                this.getTabCandidateFromChildren(v2, index, groupName, dir, v5 && firstChild);
              }
              v5 = false;
            } else {
              if (v2._parent == p && v2.tabChildren == true && v2._visible != false) {
                if (v2 == this._lastTarget) {
                  if (v2._searchKey == this._searchKey) {
                    continue;
                  }
                  v2._searchKey = this._searchKey;
                  if (this._prevNode == undefined) {
                    var v3 = this._lastx;
                    var v7 = false;
                    while (v3 != undefined) {
                      if (v3 == v2) {
                        v7 = true;
                        break;
                      }
                      v3 = v3._parent;
                    }
                    if (v7 == false) {
                      this._prevNode = this._lastx;
                    }
                  }
                  this._needPrev = false;
                  if (this._nextNode == undefined) {
                    this._nextIsNext = true;
                  }
                } else {
                  if (!(v2.focusManager != undefined && v2.focusManager._parent == v2)) {
                    if (v2._searchKey == this._searchKey) {
                      continue;
                    }
                    v2._searchKey = this._searchKey;
                    this.getTabCandidateFromChildren(v2, index, groupName, dir, v5 && firstChild);
                  }
                }
                v5 = false;
              }
            }
          }
          this._lastNode = this._lastx;
          if (lookup) {
            if (p._parent != undefined) {
              if (p != this._parent) {
                if (this._prevNode == undefined && dir) {
                  this._needPrev = true;
                } else {
                  if (this._nextNode == undefined && !dir) {
                    this._nextIsNext = false;
                  }
                }
                this._lastTarget = this._lastTarget._parent;
                this.getTabCandidate(p._parent, index, groupName, dir, true);
              }
            }
          }
        };

        v2.getTabCandidate = function (o, index, groupName, dir, firstChild) {
          var v2;
          var v3 = true;
          if (o == this._parent) {
            v2 = o;
            v3 = false;
          } else {
            v2 = o._parent;
            if (v2 == undefined) {
              v2 = o;
              v3 = false;
            }
          }
          this.walkTree(v2, index, groupName, dir, v3, firstChild);
        };

        v2.getTabCandidateFromChildren = function (o, index, groupName, dir, firstChild) {
          this.walkTree(o, index, groupName, dir, false, firstChild);
        };

        v2.getFocusManagerFromObject = function (o) {
          while (o != undefined) {
            if (o.focusManager != undefined) {
              return o.focusManager;
            }
            o = o._parent;
          }
          return undefined;
        };

        v2.tabHandler = function (Void) {
          this.bDrawFocus = true;
          var v5 = this.getSelectionFocus();
          var v4 = this.getActualFocus(v5);
          if (v4 != v5) {
            v5 = v4;
          }
          if (this.getFocusManagerFromObject(v5) != this) {
            v5 == undefined;
          }
          if (v5 == undefined) {
            v5 = this.form;
          } else {
            if (v5.tabIndex != undefined) {
              if (this._foundList != undefined || this._foundList.tabIndex != v5.tabIndex) {
                this._foundList = new Object();
                this._foundList.tabIndex = v5.tabIndex;
              }
              this._foundList[v5._name] = v5;
            }
          }
          var v3 = Key.isDown(16) != true;
          this._searchKey = getTimer();
          this._needPrev = true;
          this._nextIsNext = false;
          this._lastx = undefined;
          this._firstNode = undefined;
          this._lastNode = undefined;
          this._nextNode = undefined;
          this._prevNode = undefined;
          this._firstObj = undefined;
          this._lastObj = undefined;
          this._nextObj = undefined;
          this._prevObj = undefined;
          this._lastTarget = v5;
          var v6 = v5;
          this.getTabCandidate(v6, (v5.tabIndex == undefined) ? 0 : v5.tabIndex, v5.groupName, v3, true);
          var v2;
          if (v3) {
            if (this._nextObj != undefined) {
              v2 = this._nextObj;
            } else {
              v2 = this._firstObj;
            }
          } else {
            if (this._prevObj != undefined) {
              v2 = this._prevObj;
            } else {
              v2 = this._lastObj;
            }
          }
          if (v2.tabIndex != v5.tabIndex) {
            this._foundList = new Object();
            this._foundList.tabIndex = v2.tabIndex;
            this._foundList[v2._name] = v2;
          } else {
            if (this._foundList == undefined) {
              this._foundList = new Object();
              this._foundList.tabIndex = v2.tabIndex;
            }
            this._foundList[v2._name] = v2;
          }
          if (v2 == undefined) {
            if (v3 == false) {
              if (this._nextNode != undefined) {
                v2 = this._nextNode;
              } else {
                v2 = this._firstNode;
              }
            } else {
              if (this._prevNode == undefined || v5 == this.form) {
                v2 = this._lastNode;
              } else {
                v2 = this._prevNode;
              }
            }
          }
          if (v2 == undefined) {
            return undefined;
          }
          this.lastTabFocus = v2;
          this.setFocus(v2);
          if (v2.emphasized != undefined) {
            if (this.defPushButton != undefined) {
              v5 = this.defPushButton;
              this.defPushButton = v2;
              v5.emphasized = false;
              v2.emphasized = true;
            }
          } else {
            if (this.defPushButton != undefined && this.defPushButton != this.__defaultPushButton) {
              v5 = this.defPushButton;
              this.defPushButton = this.__defaultPushButton;
              v5.emphasized = false;
              this.__defaultPushButton.__set__emphasized(true);
            }
          }
        };

        v2.onKeyDown = function (Void) {
          mx.managers.SystemManager.idleFrames = 0;
          if (this.defaultPushButtonEnabled) {
            if (Key.getCode() == 13) {
              if (this.__get__defaultPushButton() != undefined) {
                this.doLater(this, 'sendDefaultPushButtonEvent');
              }
            }
          }
        };

        v2.sendDefaultPushButtonEvent = function (Void) {
          this.defPushButton.dispatchEvent({'type': 'click'});
        };

        v2.getMousedComponentFromChildren = function (x, y, o) {
          for (var v7 in o) {
            var v2 = o[v7];
            if (v2._visible && v2.enabled && v2._parent == o && v2._searchKey != this._searchKey) {
              v2._searchKey = this._searchKey;
              if (v2.hitTest(x, y, true)) {
                if (v2.onPress != undefined || v2.onRelease != undefined) {
                                    return v2;
                }
                var v3 = this.getMousedComponentFromChildren(x, y, v2);
                if (v3 != undefined) {
                                    return v3;
                }
                                return v2;
              }
            }
          }
          return undefined;
        };

        v2.mouseActivate = function (Void) {
          if (!this.bNeedFocus) {
            return undefined;
          }
          this._searchKey = getTimer();
          var v2 = this.getMousedComponentFromChildren(this.lastMouse.x, this.lastMouse.y, this.form);
          if (v2 instanceof mx.core.UIComponent) {
            return undefined;
          }
          v2 = this.findFocusFromObject(v2);
          if (v2 == this.lastFocus) {
            return undefined;
          }
          if (v2 == undefined) {
            this.doLater(this, 'restoreFocus');
            return undefined;
          }
          var v3 = v2.hscroll;
          if (v3 != undefined) {
            var v6 = v2.scroll;
            var v5 = v2.background;
          }
          this.setFocus(v2);
          var v4 = Selection;
          Selection.setSelection(v4.lastBeginIndex, v4.lastEndIndex);
          if (v3 != undefined) {
            v2.scroll = v6;
            v2.hscroll = v3;
            v2.background = v5;
          }
        };

        v2._onMouseDown = function (Void) {
          this.bDrawFocus = false;
          if (this.lastFocus != undefined) {
            this.lastFocus.drawFocus(false);
          }
          mx.managers.SystemManager.idleFrames = 0;
          var v3 = Selection;
          v3.lastBeginIndex = Selection.getBeginIndex();
          v3.lastEndIndex = Selection.getEndIndex();
          this.lastMouse.x = _root._xmouse;
          this.lastMouse.y = _root._ymouse;
          _root.localToGlobal(this.lastMouse);
        };

        v2.onMouseUp = function (Void) {
          if (this._visible) {
            this.doLater(this, 'mouseActivate');
          }
        };

        v2.handleEvent = function (e) {
          if (e.type == 'reveal') {
            mx.managers.SystemManager.activate(this.form);
          } else {
            mx.managers.SystemManager.deactivate(this.form);
          }
        };

        v1.enableFocusManagement = function () {
          if (!mx.managers.FocusManager.initialized) {
            mx.managers.FocusManager.initialized = true;
            Object.registerClass('FocusManager', mx.managers.FocusManager);
            if (_root.focusManager == undefined) {
              _root.createClassObject(mx.managers.FocusManager, 'focusManager', mx.managers.DepthManager.highestDepth--);
            }
          }
        };

        v1.symbolName = 'FocusManager';
        v1.symbolOwner = mx.managers.FocusManager;
        v1.version = '2.0.2.127';
        v2.className = 'FocusManager';
        v2.bNeedFocus = false;
        v2.bDrawFocus = false;
        v2.defaultPushButtonEnabled = true;
        v2.activated = true;
        v1.initialized = false;
        v1.UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
        v2.addProperty('defaultPushButton', v2.__get__defaultPushButton, v2.__set__defaultPushButton);
        v2.addProperty('nextTabIndex', v2.__get__nextTabIndex, function () {});
        ASSetPropFlags(mx.managers.FocusManager.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 205 __Packages.mx.styles.CSSSetStyle {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.styles) {
        _global.mx.styles = new Object();
      }
      if (!_global.mx.styles.CSSSetStyle) {
        var v1 = function () {};

        mx.styles.CSSSetStyle = v1;
        var v2 = v1.prototype;
        v2._setStyle = function (styleProp, newValue) {
          this[styleProp] = newValue;
          if (mx.styles.StyleManager.TextStyleMap[styleProp] != undefined) {
            if (styleProp == 'color') {
              if (isNaN(newValue)) {
                newValue = mx.styles.StyleManager.getColorName(newValue);
                this[styleProp] = newValue;
                if (newValue == undefined) {
                  return undefined;
                }
              }
            }
            _level0.changeTextStyleInChildren(styleProp);
            return undefined;
          }
          if (mx.styles.StyleManager.isColorStyle(styleProp)) {
            if (isNaN(newValue)) {
              newValue = mx.styles.StyleManager.getColorName(newValue);
              this[styleProp] = newValue;
              if (newValue == undefined) {
                return undefined;
              }
            }
            if (styleProp == 'themeColor') {
              var v7 = mx.styles.StyleManager.colorNames.haloBlue;
              var v6 = mx.styles.StyleManager.colorNames.haloGreen;
              var v8 = mx.styles.StyleManager.colorNames.haloOrange;
              var v4 = {};
              v4[v7] = 12188666;
              v4[v6] = 13500353;
              v4[v8] = 16766319;
              var v5 = {};
              v5[v7] = 13958653;
              v5[v6] = 14942166;
              v5[v8] = 16772787;
              var v9 = v4[newValue];
              var v10 = v5[newValue];
              if (v9 == undefined) {
                v9 = newValue;
              }
              if (v10 == undefined) {
                v10 = newValue;
              }
              this.setStyle('selectionColor', v9);
              this.setStyle('rollOverColor', v10);
            }
            _level0.changeColorStyleInChildren(this.styleName, styleProp, newValue);
          } else {
            if (styleProp == 'backgroundColor' && isNaN(newValue)) {
              newValue = mx.styles.StyleManager.getColorName(newValue);
              this[styleProp] = newValue;
              if (newValue == undefined) {
                return undefined;
              }
            }
            _level0.notifyStyleChangeInChildren(this.styleName, styleProp, newValue);
          }
        };

        v2.changeTextStyleInChildren = function (styleProp) {
          var v4 = getTimer();
          var v5;
          for (v5 in this) {
            var v2 = this[v5];
            if (v2._parent == this) {
              if (v2.searchKey != v4) {
                if (v2.stylecache != undefined) {
                  delete v2.stylecache.tf;
                  delete v2.stylecache[styleProp];
                }
                v2.invalidateStyle(styleProp);
                v2.changeTextStyleInChildren(styleProp);
                v2.searchKey = v4;
              }
            }
          }
        };

        v2.changeColorStyleInChildren = function (sheetName, colorStyle, newValue) {
          var v6 = getTimer();
          var v7;
          for (v7 in this) {
            var v2 = this[v7];
            if (v2._parent == this) {
              if (v2.searchKey != v6) {
                if (v2.getStyleName() == sheetName || sheetName == undefined || sheetName == '_global') {
                  if (v2.stylecache != undefined) {
                    delete v2.stylecache[colorStyle];
                  }
                  if (typeof v2._color == 'string') {
                    if (v2._color == colorStyle) {
                      var v4 = v2.getStyle(colorStyle);
                      if (colorStyle == 'color') {
                        if (this.stylecache.tf.color != undefined) {
                          this.stylecache.tf.color = v4;
                        }
                      }
                      v2.setColor(v4);
                    }
                  } else {
                    if (v2._color[colorStyle] != undefined) {
                      if (typeof v2 != 'movieclip') {
                        v2._parent.invalidateStyle();
                      } else {
                        v2.invalidateStyle(colorStyle);
                      }
                    }
                  }
                }
                v2.changeColorStyleInChildren(sheetName, colorStyle, newValue);
                v2.searchKey = v6;
              }
            }
          }
        };

        v2.notifyStyleChangeInChildren = function (sheetName, styleProp, newValue) {
          var v5 = getTimer();
          var v6;
          for (v6 in this) {
            var v2 = this[v6];
            if (v2._parent == this) {
              if (v2.searchKey != v5) {
                if (v2.styleName == sheetName || v2.styleName != undefined && typeof v2.styleName == 'movieclip' || sheetName == undefined) {
                  if (v2.stylecache != undefined) {
                    delete v2.stylecache[styleProp];
                    delete v2.stylecache.tf;
                  }
                  delete v2.enabledColor;
                  v2.invalidateStyle(styleProp);
                }
                v2.notifyStyleChangeInChildren(sheetName, styleProp, newValue);
                v2.searchKey = v5;
              }
            }
          }
        };

        v2.setStyle = function (styleProp, newValue) {
          if (this.stylecache != undefined) {
            delete this.stylecache[styleProp];
            delete this.stylecache.tf;
          }
          this[styleProp] = newValue;
          if (mx.styles.StyleManager.isColorStyle(styleProp)) {
            if (isNaN(newValue)) {
              newValue = mx.styles.StyleManager.getColorName(newValue);
              this[styleProp] = newValue;
              if (newValue == undefined) {
                return undefined;
              }
            }
            if (styleProp == 'themeColor') {
              var v10 = mx.styles.StyleManager.colorNames.haloBlue;
              var v9 = mx.styles.StyleManager.colorNames.haloGreen;
              var v11 = mx.styles.StyleManager.colorNames.haloOrange;
              var v6 = {};
              v6[v10] = 12188666;
              v6[v9] = 13500353;
              v6[v11] = 16766319;
              var v7 = {};
              v7[v10] = 13958653;
              v7[v9] = 14942166;
              v7[v11] = 16772787;
              var v12 = v6[newValue];
              var v13 = v7[newValue];
              if (v12 == undefined) {
                v12 = newValue;
              }
              if (v13 == undefined) {
                v13 = newValue;
              }
              this.setStyle('selectionColor', v12);
              this.setStyle('rollOverColor', v13);
            }
            if (typeof this._color == 'string') {
              if (this._color == styleProp) {
                if (styleProp == 'color') {
                  if (this.stylecache.tf.color != undefined) {
                    this.stylecache.tf.color = newValue;
                  }
                }
                this.setColor(newValue);
              }
            } else {
              if (this._color[styleProp] != undefined) {
                this.invalidateStyle(styleProp);
              }
            }
            this.changeColorStyleInChildren(undefined, styleProp, newValue);
          } else {
            if (styleProp == 'backgroundColor' && isNaN(newValue)) {
              newValue = mx.styles.StyleManager.getColorName(newValue);
              this[styleProp] = newValue;
              if (newValue == undefined) {
                return undefined;
              }
            }
            this.invalidateStyle(styleProp);
          }
          if (mx.styles.StyleManager.isInheritingStyle(styleProp) || styleProp == 'styleName') {
            var v8;
            var v5 = newValue;
            if (styleProp == 'styleName') {
              v8 = (typeof newValue == 'string') ? _global.styles[newValue] : v5;
              v5 = v8.themeColor;
              if (v5 != undefined) {
                v8.selectionColor = v5;
                v8.rollOverColor = v8.selectionColor;
              }
            }
            this.notifyStyleChangeInChildren(undefined, styleProp, newValue);
          }
        };

        v1.enableRunTimeCSS = function () {};

        v1.classConstruct = function () {
          var v2 = MovieClip.prototype;
          var v3 = mx.styles.CSSSetStyle.prototype;
          mx.styles.CSSStyleDeclaration.prototype.setStyle = v3._setStyle;
          v2.changeTextStyleInChildren = v3.changeTextStyleInChildren;
          v2.changeColorStyleInChildren = v3.changeColorStyleInChildren;
          v2.notifyStyleChangeInChildren = v3.notifyStyleChangeInChildren;
          v2.setStyle = v3.setStyle;
          _global.ASSetPropFlags(v2, 'changeTextStyleInChildren', 1);
          _global.ASSetPropFlags(v2, 'changeColorStyleInChildren', 1);
          _global.ASSetPropFlags(v2, 'notifyStyleChangeInChildren', 1);
          _global.ASSetPropFlags(v2, 'setStyle', 1);
          var v4 = TextField.prototype;
          v4.setStyle = v2.setStyle;
          v4.changeTextStyleInChildren = v3.changeTextStyleInChildren;
          return true;
        };

        v1.classConstructed = mx.styles.CSSSetStyle.classConstruct();
        v1.CSSStyleDeclarationDependency = mx.styles.CSSStyleDeclaration;
        ASSetPropFlags(mx.styles.CSSSetStyle.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 206 __Packages.mx.core.ext.UIComponentExtensions {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.core) {
        _global.mx.core = new Object();
      }
      if (!_global.mx.core.ext) {
        _global.mx.core.ext = new Object();
      }
      if (!_global.mx.core.ext.UIComponentExtensions) {
        var v1 = function () {};

        mx.core.ext.UIComponentExtensions = v1;
        var v2 = v1.prototype;
        v1.Extensions = function () {
          if (mx.core.ext.UIComponentExtensions.bExtended == true) {
            return true;
          }
          mx.core.ext.UIComponentExtensions.bExtended = true;
          TextField.prototype.setFocus = function () {
            Selection.setFocus(this);
          };

          TextField.prototype.onSetFocus = function (oldFocus) {
            if (this.tabEnabled != false) {
              if ((this.getFocusManager()).bDrawFocus) {
                this.drawFocus(true);
              }
            }
          };

          TextField.prototype.onKillFocus = function (oldFocus) {
            if (this.tabEnabled != false) {
              this.drawFocus(false);
            }
          };

          TextField.prototype.drawFocus = mx.core.UIComponent.prototype.drawFocus;
          TextField.prototype.getFocusManager = mx.core.UIComponent.prototype.getFocusManager;
          mx.managers.OverlappedWindows.enableOverlappedWindows();
          mx.styles.CSSSetStyle.enableRunTimeCSS();
          mx.managers.FocusManager.enableFocusManagement();
        };

        v1.bExtended = false;
        v1.UIComponentExtended = mx.core.ext.UIComponentExtensions.Extensions();
        v1.UIComponentDependency = mx.core.UIComponent;
        v1.FocusManagerDependency = mx.managers.FocusManager;
        v1.OverlappedWindowsDependency = mx.managers.OverlappedWindows;
        ASSetPropFlags(mx.core.ext.UIComponentExtensions.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 207 __Packages.mx.events.LowLevelEvents {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.events) {
        _global.mx.events = new Object();
      }
      if (!_global.mx.events.LowLevelEvents) {
        var v1 = function () {};

        mx.events.LowLevelEvents = v1;
        var v2 = v1.prototype;
        v1.addMouseEvents = function (obj) {
          if (obj.refcntMouseEvents > 0) {
            ++obj.refcntMouseEvents;
            return undefined;
          }
          var v2 = mx.events.UIEventDispatcher._fEventDispatcher;
          obj.refcntMouseEvents = 1;
          obj._onPress = obj.onPress;
          obj.onPress = v2.onPress;
          obj._onRelease = obj.onRelease;
          obj.onRelease = v2.onRelease;
          obj._onReleaseOutside = obj.onReleaseOutside;
          obj.onReleaseOutside = v2.onReleaseOutside;
          obj._onRollOver = obj.onRollOver;
          obj.onRollOver = v2.onRollOver;
          obj._onRollOut = obj.onRollOut;
          obj.onRollOut = v2.onRollOut;
          obj._onDragOver = obj.onDragOver;
          obj.onDragOver = v2.onDragOver;
          obj._onDragOut = obj.onDragOut;
          obj.onDragOut = v2.onDragOut;
        };

        v1.removeMouseEvents = function (obj) {
          if (obj.refcntMouseEvents > 1) {
            --obj.refcntMouseEvents;
            return undefined;
          }
          obj.refcntMouseEvents = 0;
          if (obj._onPress != undefined) {
            obj.onPress = obj._onPress;
          } else {
            delete obj.onPress;
          }
          if (obj._onRelease != undefined) {
            obj.onRelease = obj._onRelease;
          } else {
            delete obj.onRelease;
          }
          if (obj._onReleaseOutside != undefined) {
            obj.onReleaseOutside = obj._onReleaseOutside;
          } else {
            delete obj.onReleaseOutside;
          }
          if (obj._onRollOver != undefined) {
            obj.onRollOver = obj._onRollOver;
          } else {
            delete obj.onRollOver;
          }
          if (obj._onRollOut != undefined) {
            obj.onRollOut = obj._onRollOut;
          } else {
            delete obj.onRollOut;
          }
          if (obj._onDragOver != undefined) {
            obj.onDragOver = obj._onDragOver;
          } else {
            delete obj.onDragOver;
          }
          if (obj._onDragOut != undefined) {
            obj.onDragOut = obj._onDragOut;
          } else {
            delete obj.onDragOut;
          }
          if (obj._onMouseMove != undefined) {
            obj.onMouseMove = obj._onMouseMove;
          } else {
            delete obj.onMouseMove;
          }
        };

        v1.addSomewhereEvents = function (obj) {
          if (obj.refcntSomewhereEvents > 0) {
            ++obj.refcntSomewhereEvents;
            return undefined;
          }
          var v2 = mx.events.UIEventDispatcher._fEventDispatcher;
          obj.refcntSomewhereEvents = 1;
          obj._onMouseDown = obj.onMouseDown;
          obj.onMouseDown = v2.onMouseDown;
          obj._onMouseUp = obj.onMouseUp;
          obj.onMouseUp = v2.onMouseUp;
        };

        v1.removeSomewhereEvents = function (obj) {
          if (obj.refcntSomewhereEvents > 1) {
            --obj.refcntSomewhereEvents;
            return undefined;
          }
          obj.refcntSomewhereEvents = 0;
          if (obj._onMouseDown != undefined) {
            obj.onMouseDown = obj._onMouseDown;
          } else {
            delete obj.onMouseDown;
          }
          if (obj._onMouseUp != undefined) {
            obj.onMouseUp = obj._onMouseUp;
          } else {
            delete obj.onMouseUp;
          }
        };

        v2.onMouseMove = function (Void) {
          this.dispatchEvent({'type': 'mouseMove'});
          this._onMouseMove();
        };

        v2.onRollOver = function (Void) {
          this.dispatchEvent({'type': 'mouseOver'});
          if (this.__q_mouseMove.length > 0) {
            this._onMouseMove = this.onMouseMove;
            var v2 = mx.events.UIEventDispatcher._fEventDispatcher;
            this.onMouseMove = v2.onMouseMove;
          }
          this._onRollOver();
        };

        v2.onRollOut = function (Void) {
          this.dispatchEvent({'type': 'mouseOut'});
          if (this.__q_mouseMove.length > 0) {
            if (this._onMouseMove != undefined) {
              this.onMouseMove == this._onMouseMove;
            } else {
              delete this.onMouseMove;
            }
          }
          this._onRollOut();
        };

        v2.onPress = function (Void) {
          this.dispatchEvent({'type': 'mouseDown'});
          this._onPress();
        };

        v2.onRelease = function (Void) {
          this.dispatchEvent({'type': 'mouseUp'});
          this._onRelease();
        };

        v2.onReleaseOutside = function (Void) {
          this.dispatchEvent({'type': 'mouseUp'});
          this._onReleaseOutside();
        };

        v2.onDragOver = function (Void) {
          this.dispatchEvent({'type': 'mouseOver'});
          this._onDragOver();
        };

        v2.onDragOut = function (Void) {
          this.dispatchEvent({'type': 'mouseOut'});
          this._onDragOut();
        };

        v2.onMouseDown = function (Void) {
          this.dispatchEvent({'type': 'mouseDownSomewhere'});
          this._onMouseDown();
        };

        v2.onMouseUp = function (Void) {
          this.dispatchEvent({'type': 'mouseUpSomewhere'});
          this._onMouseUp();
        };

        v1.enableLowLevelEvents = function () {};

        v1.classConstruct = function () {
          var v1 = mx.events.UIEventDispatcher;
          var v4 = mx.events.LowLevelEvents;
          v1.lowLevelEvents.mouseEvents = ['addMouseEvents', 'removeMouseEvents'];
          v1.lowLevelEvents.somewhereEvents = ['addSomewhereEvents', 'removeSomewhereEvents'];
          v1.mouseEvents = v4.mouseEvents;
          v1.addMouseEvents = v4.addMouseEvents;
          v1.removeMouseEvents = v4.removeMouseEvents;
          v1.somewhereEvents = v4.somewhereEvents;
          v1.addSomewhereEvents = v4.addSomewhereEvents;
          v1.removeSomewhereEvents = v4.removeSomewhereEvents;
          if (v1._fEventDispatcher == undefined) {
            v1._fEventDispatcher = new mx.events.UIEventDispatcher();
          }
          var v3 = v1._fEventDispatcher;
          var v2 = v4.prototype;
          v3.onPress = v2.onPress;
          v3.onRelease = v2.onRelease;
          v3.onReleaseOutside = v2.onReleaseOutside;
          v3.onRollOut = v2.onRollOut;
          v3.onRollOver = v2.onRollOver;
          v3.onDragOut = v2.onDragOut;
          v3.onDragOver = v2.onDragOver;
          v3.onMouseDown = v2.onMouseDown;
          v3.onMouseMove = v2.onMouseMove;
          v3.onMouseUp = v2.onMouseUp;
          return true;
        };

        v1.mouseEvents = {'mouseMove': 1, 'mouseDown': 1, 'mouseUp': 1, 'mouseOver': 1, 'mouseOut': 1};
        v1.somewhereEvents = {'mouseDownSomewhere': 1, 'mouseUpSomewhere': 1};
        v1.classConstructed = mx.events.LowLevelEvents.classConstruct();
        v1.UIEventDispatcherDependency = mx.events.UIEventDispatcher;
        ASSetPropFlags(mx.events.LowLevelEvents.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 208 __Packages.mx.screens.Screen {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.screens) {
        _global.mx.screens = new Object();
      }
      if (!_global.mx.screens.Screen) {
        var v1 = function () {
          super();
        };

        mx.screens.Screen = v1;
        var v2 = new mx.controls.Loader();
        mx.screens.Screen.prototype = v2;
        v2.__get__indexInParent = function () {
          return this._indexInParent;
        };

        v2.__get__numChildScreens = function () {
          return this._childScreens.length;
        };

        v2.__get__parentIsScreen = function () {
          var v2 = this.__get__parentScreen() != null && (this.__get__parentScreen())._isScreen;
          return v2;
        };

        v2.__get__parentScreen = function () {
          var v2 = this._parent;
          if (v2 == null) {
            return null;
          } else {
            if (v2._isScreen) {
              return v2;
            } else {
              return null;
            }
          }
        };

        v2.__get__rootScreen = function () {
          var v2 = this;
          while (v2.__get__parentIsScreen()) {
            v2 = v2.parentScreen;
          }
          return v2;
        };

        v2.__get__transitionManager = function () {
          return this.__transitionManager;
        };

        v1.__get__currentFocusedScreen = function () {
          var curFocus;
          curFocus = _root.focusManager.getFocus();
          if (!curFocus || curFocus == undefined) {
            curFocus = eval(Selection.getFocus());
          }
          for (;;) {
            if (!(curFocus && !curFocus._isScreen)) break;
            curFocus = curFocus._parent;
          }
          if (curFocus == undefined) {
            return null;
          } else {
            return curFocus;
          }
        };

        v2.getChildScreen = function (childIndex) {
          return this._childScreens[childIndex];
        };

        v2.createChild = function (className, instanceName, initProps) {
          var v4;
          this._childLoading = instanceName;
          return super.createChild(className, instanceName, initProps);
        };

        v2.drawFocus = function () {};

        v2.init = function () {
          mx.core.ext.UIObjectExtensions.Extensions();
          mx.core.ext.UIComponentExtensions.Extensions();
          mx.events.LowLevelEvents.enableLowLevelEvents();
          this._childScreens = [];
          super.init();
          this._loadExternalClass = mx.screens.Screen.symbolName;
          this.__set__scaleContent(false);
          mx.events.UIEventDispatcher.initialize(this);
          if (this._parent._childLoading == this._name) {
          } else {
            if (this.__get__parentIsScreen()) {
              this._parent.registerChildScreen(this);
            }
          }
        };

        v2.registerChildScreen = function (scrn) {
          scrn._indexInParent = this._childScreens.push(scrn) - 1;
        };

        v2.childLoaded = function (obj) {
          super.childLoaded(obj);
          var v4;
          var v5 = null;
          var v7 = obj._parent;
          for (v4 in obj) {
            if (typeof obj[v4] == 'movieclip' && obj[v4]._isScreen) {
              v5 = obj[v4];
              break;
            }
          }
                    if (v5._isScreen) {
            if (!this.__get__scaleContent()) {
              var v6 = new Object();
              v6.x = obj.x;
              v6.y = obj.y;
              this.globalToLocal(v6);
              obj._x = v6.x;
              obj._y = v6.y;
            } else {
              var v6 = new Object();
              v6.x = this.x;
              v6.y = this.y;
              this._parent.localToGlobal(v6);
              obj.globalToLocal(v6);
              v5._x = v6.x;
              v5._y = v6.y;
            }
            v5._indexInParent = v7._childScreens.push(v5) - 1;
            obj._isScreenContainer = true;
            obj._containedScreen = v5;
          }
          v7._childLoading = '';
        };

        v2.doScaleLoader = function () {};

        v2.createChildren = function () {
          this.border_mc = new mx.skins.RectBorder();
          this.border_mc.__borderMetrics = {'top': 0, 'left': 0, 'bottom': 0, 'right': 0};
          super.createChildren();
        };

        v2.allTransitionsInDone = function () {
          this.dispatchEvent({'type': 'allTransitionsInDone', 'target': this});
        };

        v2.allTransitionsOutDone = function () {
          this.dispatchEvent({'type': 'allTransitionsOutDone', 'target': this});
        };

        v2.destroyChildAt = function (childIndex) {
          this._childScreens.splice(childIndex, 1);
          super.destroyChildAt(childIndex);
        };

        v1.symbolName = 'Screen';
        v1.symbolOwner = mx.screens.Screen;
        v2.className = 'Screen';
        v2._isScreen = true;
        v2._indexInParent = 0;
        v2.__transitionManager = null;
        v2._childLoading = '';
        v2.borderStyle = 'none';
        v1.addProperty('currentFocusedScreen', v1.__get__currentFocusedScreen, function () {});
        v2.addProperty('indexInParent', v2.__get__indexInParent, function () {});
        v2.addProperty('numChildScreens', v2.__get__numChildScreens, function () {});
        v2.addProperty('parentIsScreen', v2.__get__parentIsScreen, function () {});
        v2.addProperty('parentScreen', v2.__get__parentScreen, function () {});
        v2.addProperty('rootScreen', v2.__get__rootScreen, function () {});
        v2.addProperty('transitionManager', v2.__get__transitionManager, function () {});
        ASSetPropFlags(mx.screens.Screen.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 209 __Packages.mx.controls.streamingmedia.ScreenAccommodator {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.ScreenAccommodator) {
        var v1 = function (aContainee) {
          this.containee = aContainee;
          this.container = this.getContainingScreen();
          if (this.container != null) {
            var v2 = this.container.__get__visible();
            this.beforeInit = false;
            this.container.addEventListener('hide', this);
            this.container.addEventListener('reveal', this);
            if (!v2) {
              this.beforeInit = true;
              this.initId = setInterval(this, 'disableContainee', 50);
            }
          }
        };

        mx.controls.streamingmedia.ScreenAccommodator = v1;
        var v2 = v1.prototype;
        v2.disableContainee = function () {
          if (this.initAction == 'nothing' || this.initAction == 'hide') {
            mx.controls.streamingmedia.Tracer.trace('ScreenAccommodator.disableContainee: disabling ' + this.containee);
            this.containee.enabled = false;
          }
          clearInterval(this.initId);
          this.beforeInit = false;
        };

        v2.getContainingScreen = function () {
          var v4 = null;
          var v3 = this.containee._parent;
          for (;;) {
            if (!(v4 == null && v3 != _root)) break;
            if (v3 instanceof mx.screens.Screen) {
              v4 = v3;
            } else {
              v3 = v3._parent;
            }
          }
          return v4;
        };

        v2.handleEvent = function (ev) {
          mx.controls.streamingmedia.Tracer.trace('ScreenAccommodator.handleEvent: ' + ev.type + ' for ' + this.containee);
          if (ev.type == 'hide') {
            if (this.beforeInit) {
              this.initAction = 'hide';
            } else {
              if (this.containee.enabled) {
                this.wasAlreadyDisabled = false;
                this.containee.enabled = false;
              } else {
                this.wasAlreadyDisabled = true;
              }
            }
          } else {
            if (ev.type == 'reveal') {
              if (this.beforeInit) {
                this.initAction = 'reveal';
              } else {
                if (!this.wasAlreadyDisabled && this.containee.visible) {
                  this.containee.enabled = true;
                }
              }
            }
          }
        };

        v2.initAction = 'nothing';
        ASSetPropFlags(mx.controls.streamingmedia.ScreenAccommodator.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 210 __Packages.mx.controls.streamingmedia.FullScreenToggleControl {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.FullScreenToggleControl) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.FullScreenToggleControl = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.FullScreenToggleControl.prototype = v2;
        v2.init = function () {
          this.toggle = this._parent;
          this.setEnabled(this.toggle.getEnabled());
        };

        v2.handleRollOver = function () {
          (this.getController()).setNotAnimating(true);
        };

        v2.handleRollOut = function () {
          (this.getController()).setNotAnimating(false);
        };

        v2.handleRelease = function () {
          this.toggle.toggleDisplay();
        };

        v2.getController = function () {
          return (this.toggle.getPlayer()).getController();
        };

        v2.getEnabled = function () {
          return this._enabled;
        };

        v2.setEnabled = function (is) {
          mx.controls.streamingmedia.Tracer.trace('FullScreenToggleControl.setEnabled: ' + is);
          this._enabled = is;
          if (is) {
            this.onRollOver = this.handleRollOver;
            this.onRollOut = this.handleRollOut;
            this.onRelease = this.handleRelease;
            this.gotoAndStop('_up');
          } else {
            delete this.onRollOver;
            delete this.onRollOut;
            delete this.onRelease;
            this.gotoAndStop('_disabled');
          }
        };

        ASSetPropFlags(mx.controls.streamingmedia.FullScreenToggleControl.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 211 __Packages.mx.skins.CustomBorder {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.CustomBorder) {
        var v1 = function () {
          super();
        };

        mx.skins.CustomBorder = v1;
        var v2 = new mx.skins.Border();
        mx.skins.CustomBorder.prototype = v2;
        v2.__get__width = function () {
          return this.__width;
        };

        v2.__get__height = function () {
          return this.__height;
        };

        v2.init = function (Void) {
          super.init();
        };

        v2.createChildren = function (Void) {};

        v2.draw = function (Void) {
          if (this.l_mc == undefined) {
            var v2 = this.setSkin(mx.skins.CustomBorder.tagL, this.leftSkin);
            if (this.horizontal) {
              this.minHeight = this.l_mc._height;
              this.minWidth = this.l_mc._width;
            } else {
              this.minHeight = this.l_mc._height;
              this.minWidth = this.l_mc._width;
            }
          }
          if (this.m_mc == undefined) {
            this.setSkin(mx.skins.CustomBorder.tagM, this.middleSkin);
            if (this.horizontal) {
              this.minHeight = this.m_mc._height;
              this.minWidth += this.m_mc._width;
            } else {
              this.minHeight += this.m_mc._height;
              this.minWidth = this.m_mc._width;
            }
          }
          if (this.r_mc == undefined) {
            this.setSkin(mx.skins.CustomBorder.tagR, this.rightSkin);
            if (this.horizontal) {
              this.minHeight = this.r_mc._height;
              this.minWidth += this.r_mc._width;
            } else {
              this.minHeight += this.r_mc._height;
              this.minWidth = this.r_mc._width;
            }
          }
          this.size();
        };

        v2.size = function (Void) {
          this.l_mc.move(0, 0);
          if (this.horizontal) {
            this.r_mc.move(this.__get__width() - this.r_mc.width, 0);
            this.m_mc.move(this.l_mc.width, 0);
            this.m_mc.setSize(this.r_mc.x - this.m_mc.x, this.m_mc.height);
          } else {
            this.r_mc.move(0, this.__get__height() - this.r_mc.height, 0);
            this.m_mc.move(0, this.l_mc.height);
            this.m_mc.setSize(this.m_mc.width, this.r_mc.y - this.m_mc.y);
          }
        };

        v1.symbolName = 'CustomBorder';
        v1.symbolOwner = mx.skins.CustomBorder;
        v1.version = '2.0.2.127';
        v2.className = 'CustomBorder';
        v1.tagL = 0;
        v1.tagM = 1;
        v1.tagR = 2;
        v2.idNames = new Array('l_mc', 'm_mc', 'r_mc');
        v2.leftSkin = 'F3PieceLeft';
        v2.middleSkin = 'F3PieceMiddle';
        v2.rightSkin = 'F3PieceRight';
        v2.horizontal = true;
        v2.addProperty('height', v2.__get__height, function () {});
        v2.addProperty('width', v2.__get__width, function () {});
        ASSetPropFlags(mx.skins.CustomBorder.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 212 __Packages.mx.controls.scrollClasses.ScrollThumb {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.scrollClasses) {
        _global.mx.controls.scrollClasses = new Object();
      }
      if (!_global.mx.controls.scrollClasses.ScrollThumb) {
        var v1 = function () {
          super();
        };

        mx.controls.scrollClasses.ScrollThumb = v1;
        var v2 = new mx.skins.CustomBorder();
        mx.controls.scrollClasses.ScrollThumb.prototype = v2;
        v2.createChildren = function (Void) {
          super.createChildren();
          this.useHandCursor = false;
        };

        v2.setRange = function (_ymin, _ymax, _datamin, _datamax) {
          this.ymin = _ymin;
          this.ymax = _ymax;
          this.datamin = _datamin;
          this.datamax = _datamax;
        };

        v2.dragThumb = function (Void) {
          this.scrollMove = this._ymouse - this.lastY;
          this.scrollMove += this._y;
          if (this.scrollMove < this.ymin) {
            this.scrollMove = this.ymin;
          } else {
            if (this.scrollMove > this.ymax) {
              this.scrollMove = this.ymax;
            }
          }
          this._parent.isScrolling = true;
          this._y = this.scrollMove;
          var v2 = Math.round((this.datamax - this.datamin) * (this._y - this.ymin) / (this.ymax - this.ymin)) + this.datamin;
          this._parent.scrollPosition = v2;
          this._parent.dispatchScrollEvent('ThumbTrack');
          updateAfterEvent();
        };

        v2.stopDragThumb = function (Void) {
          this._parent.isScrolling = false;
          this._parent.dispatchScrollEvent('ThumbPosition');
          this._parent.dispatchScrollChangedEvent();
          delete this.onMouseMove;
        };

        v2.onPress = function (Void) {
          this._parent.pressFocus();
          this.lastY = this._ymouse;
          this.onMouseMove = this.dragThumb;
          super.onPress();
        };

        v2.onRelease = function (Void) {
          this._parent.releaseFocus();
          this.stopDragThumb();
          super.onRelease();
        };

        v2.onReleaseOutside = function (Void) {
          this._parent.releaseFocus();
          this.stopDragThumb();
          super.onReleaseOutside();
        };

        v2.draw = function () {
          super.draw();
          if (this.grip_mc == undefined) {
            this.setSkin(3, this.gripSkin);
          }
        };

        v2.size = function () {
          super.size();
          this.grip_mc.move((this.__get__width() - this.grip_mc.width) / 2, (this.__get__height() - this.grip_mc.height) / 2);
        };

        v1.symbolOwner = mx.skins.CustomBorder.symbolOwner;
        v2.className = 'ScrollThumb';
        v2.btnOffset = 0;
        v2.horizontal = false;
        v2.idNames = new Array('l_mc', 'm_mc', 'r_mc', 'grip_mc');
        ASSetPropFlags(mx.controls.scrollClasses.ScrollThumb.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 213 __Packages.mx.controls.scrollClasses.ScrollBar {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.scrollClasses) {
        _global.mx.controls.scrollClasses = new Object();
      }
      if (!_global.mx.controls.scrollClasses.ScrollBar) {
        var v1 = function () {
          super();
        };

        mx.controls.scrollClasses.ScrollBar = v1;
        var v2 = new mx.core.UIComponent();
        mx.controls.scrollClasses.ScrollBar.prototype = v2;
        v2.__get__scrollPosition = function () {
          return this._scrollPosition;
        };

        v2.__set__scrollPosition = function (pos) {
          this._scrollPosition = pos;
          if (this.isScrolling != true) {
            pos = Math.min(pos, this.maxPos);
            pos = Math.max(pos, this.minPos);
            var v3 = (pos - this.minPos) * (this.scrollTrack_mc.height - this.scrollThumb_mc._height) / (this.maxPos - this.minPos) + this.scrollTrack_mc.top;
            this.scrollThumb_mc.move(0, v3);
          }
          return this.__get__scrollPosition();
        };

        v2.__get__pageScrollSize = function () {
          return this.largeScroll;
        };

        v2.__set__pageScrollSize = function (lScroll) {
          this.largeScroll = lScroll;
          return this.__get__pageScrollSize();
        };

        v2.__set__lineScrollSize = function (sScroll) {
          this.smallScroll = sScroll;
          return this.__get__lineScrollSize();
        };

        v2.__get__lineScrollSize = function () {
          return this.smallScroll;
        };

        v2.__get__virtualHeight = function () {
          return this.__height;
        };

        v2.init = function (Void) {
          super.init();
          this._scrollPosition = 0;
          this.tabEnabled = false;
          this.focusEnabled = false;
          this.boundingBox_mc._visible = false;
          this.boundingBox_mc._height = 0;
          this.boundingBox_mc._width = 0;
        };

        v2.createChildren = function (Void) {
          if (this.scrollTrack_mc == undefined) {
            this.setSkin(mx.controls.scrollClasses.ScrollBar.skinIDTrack, this.scrollTrackName);
          }
          this.scrollTrack_mc.visible = false;
          var v3 = new Object();
          v3.enabled = false;
          v3.preset = mx.controls.SimpleButton.falseDisabled;
          v3.initProperties = 0;
          v3.autoRepeat = true;
          v3.tabEnabled = false;
          var v2;
          if (this.upArrow_mc == undefined) {
            v2 = this.createButton(this.upArrowName, 'upArrow_mc', mx.controls.scrollClasses.ScrollBar.skinIDUpArrow, v3);
          }
          v2.buttonDownHandler = this.onUpArrow;
          v2.clickHandler = this.onScrollChanged;
          this._minHeight = v2.height;
          this._minWidth = v2.width;
          if (this.downArrow_mc == undefined) {
            v2 = this.createButton(this.downArrowName, 'downArrow_mc', mx.controls.scrollClasses.ScrollBar.skinIDDownArrow, v3);
          }
          v2.buttonDownHandler = this.onDownArrow;
          v2.clickHandler = this.onScrollChanged;
          this._minHeight += v2.height;
        };

        v2.createButton = function (linkageName, id, skinID, o) {
          if (skinID == mx.controls.scrollClasses.ScrollBar.skinIDUpArrow) {
            o.falseUpSkin = this.upArrowUpName;
            o.falseDownSkin = this.upArrowDownName;
            o.falseOverSkin = this.upArrowOverName;
            var v3 = this.createObject(linkageName, id, skinID, o);
            this[id].visible = false;
            this[id].useHandCursor = false;
            return v3;
          }
          o.falseUpSkin = this.downArrowUpName;
          o.falseDownSkin = this.downArrowDownName;
          o.falseOverSkin = this.downArrowOverName;
          var v3 = this.createObject(linkageName, id, skinID, o);
          this[id].visible = false;
          this[id].useHandCursor = false;
          return v3;
        };

        v2.createThumb = function (Void) {
          var v2 = new Object();
          v2.validateNow = true;
          v2.tabEnabled = false;
          v2.leftSkin = this.thumbTopName;
          v2.middleSkin = this.thumbMiddleName;
          v2.rightSkin = this.thumbBottomName;
          v2.gripSkin = this.thumbGripName;
          this.createClassObject(mx.controls.scrollClasses.ScrollThumb, 'scrollThumb_mc', mx.controls.scrollClasses.ScrollBar.skinIDThumb, v2);
        };

        v2.setScrollProperties = function (pSize, mnPos, mxPos, ls) {
          var v4;
          var v2 = this.scrollTrack_mc;
          this.pageSize = pSize;
          this.largeScroll = (ls != undefined && ls > 0) ? ls : pSize;
          this.minPos = Math.max(mnPos, 0);
          this.maxPos = Math.max(mxPos, 0);
          this._scrollPosition = Math.max(this.minPos, this._scrollPosition);
          this._scrollPosition = Math.min(this.maxPos, this._scrollPosition);
          if (this.maxPos - this.minPos > 0 && this.enabled) {
            var v5 = this._scrollPosition;
            if (!this.initializing) {
              this.upArrow_mc.enabled = true;
              this.downArrow_mc.enabled = true;
            }
            v2.onDragOver = this.startTrackScroller;
            v2.onPress = v2.onDragOver;
            v2.onRelease = this.releaseScrolling;
            v2.stopScrolling = this.stopScrolling;
            v2.onDragOut = v2.stopScrolling;
            v2.onReleaseOutside = this.releaseScrolling;
            v2.useHandCursor = false;
            if (this.scrollThumb_mc == undefined) {
              this.createThumb();
            }
            var v3 = this.scrollThumb_mc;
            if (this.scrollTrackOverName.length > 0) {
              v2.onRollOver = this.trackOver;
              v2.onRollOut = this.trackOut;
            }
            v4 = (this.pageSize / (this.maxPos - this.minPos + this.pageSize)) * v2.height;
            if (v4 < v3.minHeight) {
              if (v2.height < v3.minHeight) {
                v3.__set__visible(false);
              } else {
                v4 = v3.minHeight;
                v3.__set__visible(true);
                v3.setSize(this._minWidth, v3.minHeight + 0);
              }
            } else {
              v3.__set__visible(true);
              v3.setSize(this._minWidth, v4);
            }
            v3.setRange(this.upArrow_mc.__get__height() + 0, this.__get__virtualHeight() - this.downArrow_mc.__get__height() - v3.__get__height(), this.minPos, this.maxPos);
            v5 = Math.min(v5, this.maxPos);
            this.__set__scrollPosition(Math.max(v5, this.minPos));
          } else {
            this.scrollThumb_mc.__set__visible(false);
            if (!this.initializing) {
              this.upArrow_mc.enabled = false;
              this.downArrow_mc.enabled = false;
            }
            delete v2.onPress;
            delete v2.onDragOver;
            delete v2.onRelease;
            delete v2.onDragOut;
            delete v2.onRollOver;
            delete v2.onRollOut;
            delete v2.onReleaseOutside;
          }
          if (this.initializing) {
            this.scrollThumb_mc.__set__visible(false);
          }
        };

        v2.setEnabled = function (enabledFlag) {
          super.setEnabled(enabledFlag);
          this.setScrollProperties(this.pageSize, this.minPos, this.maxPos, this.largeScroll);
        };

        v2.draw = function (Void) {
          if (this.initializing) {
            this.initializing = false;
            this.scrollTrack_mc.visible = true;
            this.upArrow_mc.__set__visible(true);
            this.downArrow_mc.__set__visible(true);
          }
          this.size();
        };

        v2.size = function (Void) {
          if (this._height == 1) {
            return undefined;
          }
          if (this.upArrow_mc == undefined) {
            return undefined;
          }
          var v3 = this.upArrow_mc.__get__height();
          var v2 = this.downArrow_mc.__get__height();
          this.upArrow_mc.move(0, 0);
          var v4 = this.scrollTrack_mc;
          v4._y = v3;
          v4._height = this.__get__virtualHeight() - v3 - v2;
          this.downArrow_mc.move(0, this.__get__virtualHeight() - v2);
          this.setScrollProperties(this.pageSize, this.minPos, this.maxPos, this.largeScroll);
        };

        v2.dispatchScrollEvent = function (detail) {
          this.dispatchEvent({'type': 'scroll', 'detail': detail});
        };

        v2.isScrollBarKey = function (k) {
          if (k == 36) {
            if (this.__get__scrollPosition() != 0) {
              this.__set__scrollPosition(0);
              this.dispatchScrollEvent(this.minMode);
            }
            return true;
            return false;
          }
          if (k == 35) {
            if (this.__get__scrollPosition() < this.maxPos) {
              this.__set__scrollPosition(this.maxPos);
              this.dispatchScrollEvent(this.maxMode);
            }
            return true;
          }
          return false;
        };

        v2.scrollIt = function (inc, mode) {
          var v3 = this.smallScroll;
          if (inc != 'Line') {
            v3 = (this.largeScroll == 0) ? this.pageSize : this.largeScroll;
          }
          var v2 = this._scrollPosition + mode * v3;
          if (v2 > this.maxPos) {
            v2 = this.maxPos;
          } else {
            if (v2 < this.minPos) {
              v2 = this.minPos;
            }
          }
          if (this.__get__scrollPosition() != v2) {
            this.__set__scrollPosition(v2);
            var v4 = mode < 0 ? this.minusMode : this.plusMode;
            this.dispatchScrollEvent(inc + v4);
          }
        };

        v2.startTrackScroller = function (Void) {
          this._parent.pressFocus();
          if (this._parent.scrollTrackDownName.length > 0) {
            if (this._parent.scrollTrackDown_mc == undefined) {
              this._parent.setSkin(mx.controls.scrollClasses.ScrollBar.skinIDTrackDown, this.scrollTrackDownName);
            } else {
              this._parent.scrollTrackDown_mc.visible = true;
            }
          }
          this._parent.trackScroller();
          this._parent.scrolling = setInterval(this._parent, 'scrollInterval', this.getStyle('repeatDelay'), 'Page', -1);
        };

        v2.scrollInterval = function (inc, mode) {
          clearInterval(this.scrolling);
          if (inc == 'Page') {
            this.trackScroller();
          } else {
            this.scrollIt(inc, mode);
          }
          this.scrolling = setInterval(this, 'scrollInterval', this.getStyle('repeatInterval'), inc, mode);
        };

        v2.trackScroller = function (Void) {
          if (this.scrollThumb_mc._y + this.scrollThumb_mc.__get__height() < this._ymouse) {
            this.scrollIt('Page', 1);
          } else {
            if (this.scrollThumb_mc._y > this._ymouse) {
              this.scrollIt('Page', -1);
            }
          }
        };

        v2.dispatchScrollChangedEvent = function (Void) {
          this.dispatchEvent({'type': 'scrollChanged'});
        };

        v2.stopScrolling = function (Void) {
          clearInterval(this._parent.scrolling);
          this._parent.scrollTrackDown_mc.visible = false;
        };

        v2.releaseScrolling = function (Void) {
          this._parent.releaseFocus();
          this.stopScrolling();
          this._parent.dispatchScrollChangedEvent();
        };

        v2.trackOver = function (Void) {
          if (this._parent.scrollTrackOverName.length > 0) {
            if (this._parent.scrollTrackOver_mc == undefined) {
              this._parent.setSkin(mx.controls.scrollClasses.ScrollBar.skinIDTrackOver, this.scrollTrackOverName);
            } else {
              this._parent.scrollTrackOver_mc.visible = true;
            }
          }
        };

        v2.trackOut = function (Void) {
          this._parent.scrollTrackOver_mc.visible = false;
        };

        v2.onUpArrow = function (Void) {
          this._parent.scrollIt('Line', -1);
        };

        v2.onDownArrow = function (Void) {
          this._parent.scrollIt('Line', 1);
        };

        v2.onScrollChanged = function (Void) {
          this._parent.dispatchScrollChangedEvent();
        };

        v1.symbolOwner = mx.core.UIComponent;
        v2.className = 'ScrollBar';
        v2.minPos = 0;
        v2.maxPos = 0;
        v2.pageSize = 0;
        v2.largeScroll = 0;
        v2.smallScroll = 1;
        v2._scrollPosition = 0;
        v2.scrollTrackName = 'ScrollTrack';
        v2.scrollTrackOverName = '';
        v2.scrollTrackDownName = '';
        v2.upArrowName = 'BtnUpArrow';
        v2.upArrowUpName = 'ScrollUpArrowUp';
        v2.upArrowOverName = 'ScrollUpArrowOver';
        v2.upArrowDownName = 'ScrollUpArrowDown';
        v2.downArrowName = 'BtnDownArrow';
        v2.downArrowUpName = 'ScrollDownArrowUp';
        v2.downArrowOverName = 'ScrollDownArrowOver';
        v2.downArrowDownName = 'ScrollDownArrowDown';
        v2.thumbTopName = 'ScrollThumbTopUp';
        v2.thumbMiddleName = 'ScrollThumbMiddleUp';
        v2.thumbBottomName = 'ScrollThumbBottomUp';
        v2.thumbGripName = 'ScrollThumbGripUp';
        v1.skinIDTrack = 0;
        v1.skinIDTrackOver = 1;
        v1.skinIDTrackDown = 2;
        v1.skinIDUpArrow = 3;
        v1.skinIDDownArrow = 4;
        v1.skinIDThumb = 5;
        v2.idNames = new Array('scrollTrack_mc', 'scrollTrackOver_mc', 'scrollTrackDown_mc', 'upArrow_mc', 'downArrow_mc');
        v2.clipParameters = {'minPos': 1, 'maxPos': 1, 'pageSize': 1, 'scrollPosition': 1, 'lineScrollSize': 1, 'pageScrollSize': 1, 'visible': 1, 'enabled': 1};
        v1.mergedClipParameters = mx.core.UIObject.mergeClipParameters(mx.controls.scrollClasses.ScrollBar.prototype.clipParameters, mx.core.UIComponent.prototype.clipParameters);
        v2.initializing = true;
        v2.addProperty('lineScrollSize', v2.__get__lineScrollSize, v2.__set__lineScrollSize);
        v2.addProperty('pageScrollSize', v2.__get__pageScrollSize, v2.__set__pageScrollSize);
        v2.addProperty('scrollPosition', v2.__get__scrollPosition, v2.__set__scrollPosition);
        v2.addProperty('virtualHeight', v2.__get__virtualHeight, function () {});
        ASSetPropFlags(mx.controls.scrollClasses.ScrollBar.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 214 __Packages.mx.core.ScrollView {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.core) {
        _global.mx.core = new Object();
      }
      if (!_global.mx.core.ScrollView) {
        var v1 = function () {
          super();
        };

        mx.core.ScrollView = v1;
        var v2 = new mx.core.View();
        mx.core.ScrollView.prototype = v2;
        v2.getHScrollPolicy = function (Void) {
          return this.__hScrollPolicy;
        };

        v2.setHScrollPolicy = function (policy) {
          this.__hScrollPolicy = policy.toLowerCase();
          if (this.__width == undefined) {
            return undefined;
          }
          this.setScrollProperties(this.numberOfCols, this.columnWidth, this.rowC, this.rowH, this.heightPadding, this.widthPadding);
        };

        v2.__get__hScrollPolicy = function () {
          return this.getHScrollPolicy();
        };

        v2.__set__hScrollPolicy = function (policy) {
          this.setHScrollPolicy(policy);
          return this.__get__hScrollPolicy();
        };

        v2.getVScrollPolicy = function (Void) {
          return this.__vScrollPolicy;
        };

        v2.setVScrollPolicy = function (policy) {
          this.__vScrollPolicy = policy.toLowerCase();
          if (this.__width == undefined) {
            return undefined;
          }
          this.setScrollProperties(this.numberOfCols, this.columnWidth, this.rowC, this.rowH, this.heightPadding, this.widthPadding);
        };

        v2.__get__vScrollPolicy = function () {
          return this.getVScrollPolicy();
        };

        v2.__set__vScrollPolicy = function (policy) {
          this.setVScrollPolicy(policy);
          return this.__get__vScrollPolicy();
        };

        v2.__get__hPosition = function () {
          return this.getHPosition();
        };

        v2.__set__hPosition = function (pos) {
          this.setHPosition(pos);
          return this.__get__hPosition();
        };

        v2.getHPosition = function (Void) {
          return this.__hPosition;
        };

        v2.setHPosition = function (pos) {
          this.hScroller.__set__scrollPosition(pos);
          this.__hPosition = pos;
        };

        v2.__get__vPosition = function () {
          return this.getVPosition();
        };

        v2.__set__vPosition = function (pos) {
          this.setVPosition(pos);
          return this.__get__vPosition();
        };

        v2.getVPosition = function (Void) {
          return this.__vPosition;
        };

        v2.setVPosition = function (pos) {
          this.vScroller.__set__scrollPosition(pos);
          this.__vPosition = pos;
        };

        v2.__get__maxVPosition = function () {
          var v2 = this.vScroller.maxPos;
          return (v2 == undefined) ? 0 : v2;
        };

        v2.__get__maxHPosition = function () {
          return this.getMaxHPosition();
        };

        v2.__set__maxHPosition = function (pos) {
          this.setMaxHPosition(pos);
          return this.__get__maxHPosition();
        };

        v2.getMaxHPosition = function (Void) {
          if (this.__maxHPosition != undefined) {
            return this.__maxHPosition;
          }
          var v2 = this.hScroller.maxPos;
          return (v2 == undefined) ? 0 : v2;
        };

        v2.setMaxHPosition = function (pos) {
          this.__maxHPosition = pos;
        };

        v2.setScrollProperties = function (colCount, colWidth, rwCount, rwHeight, hPadding, wPadding) {
          var v3 = this.getViewMetrics();
          if (hPadding == undefined) {
            hPadding = 0;
          }
          if (wPadding == undefined) {
            wPadding = 0;
          }
          this.propsInited = true;
          delete this.scrollAreaChanged;
          this.heightPadding = hPadding;
          this.widthPadding = wPadding;
          if (colWidth == 0) {
            colWidth = 1;
          }
          if (rwHeight == 0) {
            rwHeight = 1;
          }
          var v5 = Math.ceil((this.__width - v3.left - v3.right - this.widthPadding) / colWidth);
          if (this.__hScrollPolicy == 'on' || v5 < colCount && this.__hScrollPolicy == 'auto') {
            if (this.hScroller == undefined || this.specialHScrollCase) {
              delete this.specialHScrollCase;
              this.hScroller = this.createObject('HScrollBar', 'hSB', 1001);
              this.hScroller.__set__lineScrollSize(20);
              this.hScroller.scrollHandler = this.scrollProxy;
              this.hScroller.__set__scrollPosition(this.__hPosition);
              this.scrollAreaChanged = true;
            }
            if (this.numberOfCols != colCount || this.columnWidth != colWidth || this.viewableColumns != v5 || this.scrollAreaChanged) {
              this.hScroller.setScrollProperties(v5, 0, colCount - v5);
              this.viewableColumns = v5;
              this.numberOfCols = colCount;
              this.columnWidth = colWidth;
            }
          } else {
            if ((this.__hScrollPolicy == 'auto' || this.__hScrollPolicy == 'off') && this.hScroller != undefined) {
              this.hScroller.removeMovieClip();
              delete this.hScroller;
              this.scrollAreaChanged = true;
            }
          }
          if (this.heightPadding == undefined) {
            this.heightPadding = 0;
          }
          var v4 = Math.ceil((this.__height - v3.top - v3.bottom - this.heightPadding) / rwHeight);
          var v8 = (this.__height - v3.top - v3.bottom) % rwHeight != 0;
          if (this.__vScrollPolicy == 'on' || v4 < rwCount + v8 && this.__vScrollPolicy == 'auto') {
            if (this.vScroller == undefined) {
              this.vScroller = this.createObject('VScrollBar', 'vSB', 1002);
              this.vScroller.scrollHandler = this.scrollProxy;
              this.vScroller.__set__scrollPosition(this.__vPosition);
              this.scrollAreaChanged = true;
              this.rowH = 0;
            }
            if (this.rowC != rwCount || this.rowH != rwHeight || this.viewableRows + v8 != v4 + this.oldRndUp || this.scrollAreaChanged) {
              this.vScroller.setScrollProperties(v4, 0, rwCount - v4 + v8);
              this.viewableRows = v4;
              this.rowC = rwCount;
              this.rowH = rwHeight;
              this.oldRndUp = v8;
            }
          } else {
            if ((this.__vScrollPolicy == 'auto' || this.__vScrollPolicy == 'off') && this.vScroller != undefined) {
              this.vScroller.removeMovieClip();
              delete this.vScroller;
              this.scrollAreaChanged = true;
            }
          }
          this.numberOfCols = colCount;
          this.columnWidth = colWidth;
          if (this.scrollAreaChanged) {
            this.doLayout();
            var v2 = this.__viewMetrics;
            var v12 = (this.owner != undefined) ? this.owner : this;
            v12.layoutContent(v2.left, v2.top, this.columnWidth * this.numberOfCols - v2.left - v2.right, this.rowC * this.rowH, this.__width - v2.left - v2.right, this.__height - v2.top - v2.bottom);
          }
          if (!this.enabled) {
            this.setEnabled(false);
          }
        };

        v2.getViewMetrics = function (Void) {
          var v2 = this.__viewMetrics;
          var v3 = this.border_mc.__get__borderMetrics();
          v2.left = v3.left;
          v2.right = v3.right;
          if (this.vScroller != undefined) {
            v2.right += this.vScroller.minWidth;
          }
          v2.top = v3.top;
          if (this.hScroller == undefined && (this.__hScrollPolicy == 'on' || this.__hScrollPolicy == true)) {
            this.hScroller = this.createObject('FHScrollBar', 'hSB', 1001);
            this.specialHScrollCase = true;
          }
          v2.bottom = v3.bottom;
          if (this.hScroller != undefined) {
            v2.bottom += this.hScroller.minHeight;
          }
          return v2;
        };

        v2.doLayout = function (Void) {
          var v10 = this.__get__width();
          var v8 = this.__get__height();
          delete this.invLayout;
          this.__viewMetrics = this.getViewMetrics();
          var v3 = this.__viewMetrics;
          var v2 = v3.left;
          var v9 = v3.right;
          var v5 = v3.top;
          var v11 = v3.bottom;
          var v7 = this.hScroller;
          var v6 = this.vScroller;
          v7.setSize(v10 - v2 - v9, v7.minHeight + 0);
          v7.move(v2, v8 - v11);
          v6.setSize(v6.minWidth + 0, v8 - v5 - v11);
          v6.move(v10 - v9, v5);
          var v4 = this.mask_mc;
          v4._width = v10 - v2 - v9;
          v4._height = v8 - v5 - v11;
          v4._x = v2;
          v4._y = v5;
        };

        v2.createChild = function (id, name, props) {
          var v2 = super.createChild(id, name, props);
          return v2;
        };

        v2.init = function (Void) {
          super.init();
          this.__viewMetrics = new Object();
          if (_global.__SVMouseWheelManager == undefined) {
            _global.__SVMouseWheelManager = new Object();
            var v4 = _global.__SVMouseWheelManager;
            v4.onMouseWheel = this.__onMouseWheel;
            Mouse.addListener(v4);
          }
        };

        v2.__onMouseWheel = function (delta, scrollTarget) {
          var v4 = scrollTarget;
          var v1;
          while (v4 != undefined) {
            if (v4 instanceof mx.core.ScrollView) {
              v1 = v4;
              false;
            }
            v4 = v4._parent;
          }
          if (v1 != undefined) {
            v4 = delta <= 0 ? 1 : -1;
            var v2 = v1.vScroller.lineScrollSize;
            if (v2 == undefined) {
              v2 = 0;
            }
            v2 = Math.max(Math.abs(delta), v2);
            var v3 = v1.vPosition + v2 * v4;
            v1.vPosition = Math.max(0, Math.min(v3, v1.maxVPosition));
            v1.dispatchEvent({'type': 'scroll', 'direction': 'vertical', 'position': v1.vPosition});
          }
        };

        v2.createChildren = function (Void) {
          super.createChildren();
          if (this.mask_mc == undefined) {
            this.mask_mc = this.createObject('BoundingBox', 'mask_mc', this.MASK_DEPTH);
          }
          this.mask_mc._visible = false;
        };

        v2.invalidate = function (Void) {
          super.invalidate();
        };

        v2.draw = function (Void) {
          this.size();
        };

        v2.size = function (Void) {
          super.size();
        };

        v2.scrollProxy = function (docObj) {
          this._parent.onScroll(docObj);
        };

        v2.onScroll = function (docObj) {
          var v3 = docObj.target;
          var v2 = v3.scrollPosition;
          if (v3 == this.vScroller) {
            var v4 = 'vertical';
            var v5 = '__vPosition';
          } else {
            var v4 = 'horizontal';
            var v5 = '__hPosition';
          }
          this[v5] = v2;
          this.dispatchEvent({'type': 'scroll', 'direction': v4, 'position': v2});
        };

        v2.setEnabled = function (v) {
          this.hScroller.enabled = v;
          this.vScroller.enabled = this.hScroller.enabled;
        };

        v2.childLoaded = function (obj) {
          super.childLoaded(obj);
          obj.setMask(this.mask_mc);
        };

        v1.symbolName = 'ScrollView';
        v1.symbolOwner = mx.core.ScrollView;
        v1.version = '2.0.2.127';
        v2.className = 'ScrollView';
        v2.__vScrollPolicy = 'auto';
        v2.__hScrollPolicy = 'off';
        v2.__vPosition = 0;
        v2.__hPosition = 0;
        v2.numberOfCols = 0;
        v2.rowC = 0;
        v2.columnWidth = 1;
        v2.rowH = 0;
        v2.heightPadding = 0;
        v2.widthPadding = 0;
        v2.MASK_DEPTH = 10000;
        v2.addProperty('hPosition', v2.__get__hPosition, v2.__set__hPosition);
        v2.addProperty('hScrollPolicy', v2.__get__hScrollPolicy, v2.__set__hScrollPolicy);
        v2.addProperty('maxHPosition', v2.__get__maxHPosition, v2.__set__maxHPosition);
        v2.addProperty('maxVPosition', v2.__get__maxVPosition, function () {});
        v2.addProperty('vPosition', v2.__get__vPosition, v2.__set__vPosition);
        v2.addProperty('vScrollPolicy', v2.__get__vScrollPolicy, v2.__set__vScrollPolicy);
        ASSetPropFlags(mx.core.ScrollView.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 215 __Packages.mx.controls.streamingmedia.IPlayer {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.IPlayer) {
      }
    #endinitclip
  }

  movieClip 216 __Packages.mx.controls.streamingmedia.AbstractPlayer {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.AbstractPlayer) {
        var v1 = function () {
          this._playing = false;
        };

        mx.controls.streamingmedia.AbstractPlayer = v1;
        var v2 = v1.prototype;
        v2.isPlaying = function () {
          return this._playing;
        };

        v2.__get__playing = function () {
          return this.isPlaying();
        };

        v2.setPlaying = function (flag) {
          this._playing = flag;
        };

        v2.addProperty('playing', v2.__get__playing, function () {});
        ASSetPropFlags(mx.controls.streamingmedia.AbstractPlayer.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 217 __Packages.mx.controls.streamingmedia.RTMPPlayer {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.RTMPPlayer) {
        var v1 = function (aMediaUrl, aMediaType, aVideoHolder, aTotalTime) {
          super();
          if (aMediaUrl == null || aVideoHolder == null || aTotalTime == null) {
          }
          this._mediaUrl = aMediaUrl;
          this._mediaType = aMediaType;
          this._videoHolder = aVideoHolder;
          this._video = this._videoHolder._video;
          this._totalTime = aTotalTime;
          this._listeners = new Array();
          this._connectTimeOutId = null;
          this.init();
        };

        mx.controls.streamingmedia.RTMPPlayer = v1;
        var v2 = new mx.controls.streamingmedia.AbstractPlayer();
        mx.controls.streamingmedia.RTMPPlayer.prototype = v2;
        v2.init = function () {
          var v2;
          v2 = this._mediaUrl.indexOf(':');
          if (v2 == -1) {
          }
          this._protocol = (this._mediaUrl.substring(0, v2)).toLowerCase();
          if (this._protocol != 'rtmp' && this._protocol != 'rtmps' && this._protocol != 'rtmpt') {
          }
          var v3 = this._mediaUrl.substring(v2 + 1, this._mediaUrl.length);
          this._port = null;
          var v5 = v3.indexOf(':');
          if (v5 != -1) {
            this._port = v3.substring(v5 + 1, v3.length);
            var v4 = this._port.indexOf('/');
            if (v4 != -1 && v4 < v5) {
              this._port = this._port.substring(0, v4);
            } else {
              this._port = null;
            }
          }
          v2 = v3.lastIndexOf('/');
          if (v2 == -1) {
          }
          this._appUrl = v3.substring(0, v2);
          this._streamName = v3.substring(v2 + 1, v3.length);
          if (this._streamName.length == 0) {
          }
          if (this._mediaType == mx.controls.streamingmedia.StreamingMediaConstants.FLV_MEDIA_TYPE) {
            v2 = this._streamName.indexOf('.');
            if (v2 != -1) {
              var v6;
              v6 = (this._streamName.substring(v2)).toLowerCase();
              if (v6 == '.flv') {
                this._streamName = this._streamName.substring(0, v2);
              }
            }
            this._streamName = 'flv:' + this._streamName;
          } else {
            if (this._mediaType == mx.controls.streamingmedia.StreamingMediaConstants.MP3_MEDIA_TYPE) {
              v2 = this._streamName.indexOf('.');
              if (v2 != -1) {
                var v6 = (this._streamName.substring(v2)).toLowerCase();
                if (v6 == '.mp3') {
                  this._streamName = this._streamName.substring(0, v2);
                }
              }
              this._streamName = 'mp3:' + this._streamName;
            } else {}
          }
          this.setPlaying(false);
          this._isLoaded = false;
          this._isLoading = false;
          this._isPlayPending = false;
          this._nc_rtmp = null;
          this._nc_rtmpt = null;
          this._playHeadPos = 0;
          this.setSeeking(false);
          this._isPausing = false;
          this._sound = new Sound(this._videoHolder);
          this.setVolume(mx.controls.streamingmedia.StreamingMediaConstants.DEFAULT_VOLUME);
        };

        v2.addListener = function (aListener) {
          this._listeners.push(aListener);
        };

        v2.removeAllListeners = function () {
          this._listeners.length = 0;
        };

        v2.broadcastEvent = function (status) {
          var v2 = 0;
          while (v2 < this._listeners.length) {
            this._listeners[v2].handlePlayer(this, status);
            ++v2;
          }
        };

        v2.bufferIsFull = function () {
          this.broadcastEvent('start');
          if (!this.isPlaying()) {
            this.pause();
          }
        };

        v2.resizeVideo = function () {
          this.broadcastEvent('resizeVideo');
          if (!this.isPlaying()) {
            this.pause();
          }
        };

        v2.toString = function () {
          return 'RTMPPlayer: Playing ' + this.getMediaUrl();
        };

        v2.close = function () {
          this._ns.onStatus = null;
          this._ns.close();
          this._ns = null;
          if (this._nc_rtmp != null) {
            this._nc_rtmp.onStatus = null;
            this._nc_rtmp.close();
            this._nc_rtmp = null;
          }
          if (this._nc_rtmpt != null) {
            this._nc_rtmpt.onStatus = null;
            this._nc_rtmpt.close();
            this._nc_rtmpt = null;
          }
          this._video.clear();
        };

        v2.load = function () {
          this._isLoading = true;
          this.actualConnect();
          if (this._connectTimeOutId != null) {
            clearInterval(this._connectTimeOutId);
            this._connectTimeOutId = null;
          }
          this._connectTimeOutId = setInterval(this, 'onConnectTimeOut', 60000);
        };

        v2.startStream = function (nc) {
          clearInterval(this._connectTimeOutId);
          this._connectTimeOutId = null;
          this._ns = new mx.controls.streamingmedia.PlayerNetStream(nc, this);
          if (this._mediaType == mx.controls.streamingmedia.StreamingMediaConstants.FLV_MEDIA_TYPE) {
            this._video.attachVideo(this._ns);
          }
          this._video.attachVideo(this._ns);
          this._videoHeight = this._video.height;
          this._videoWidth = this._video.width;
          this._ns.setBufferTime(5);
          this._videoHolder.attachAudio(this._ns);
          this._ns.play(this._streamName, 0, -1);
          this._isLoading = false;
          this._isLoaded = true;
          this._videoHolder._visible = false;
          this.setPlaying(false);
          if (this._isPlayPending) {
            this.play(null);
          } else {
            this._isPausing = false;
            this.pause();
          }
        };

        v2.onConnectTimeOut = function () {
          clearInterval(this._connectTimeOutId);
          this._connectTimeOutId = null;
          if (this._nc_rtmpt != null) {
            this._nc_rtmpt.onStatus = null;
            this._nc_rtmpt.close();
            this._nc_rtmpt = null;
          }
          if (this._nc_rtmp != null) {
            this._nc_rtmp.onStatus = null;
            this._nc_rtmp.close();
            this._nc_rtmp = null;
          }
          this._isLoading = false;
          this._isLoaded = false;
        };

        v2.actualConnect = function () {
          if (this._protocol == 'rtmp') {
            this._nc_rtmp = new mx.controls.streamingmedia.RTMPConnection(this);
            this._nc_rtmp.onStatus = function (info) {
              if (info.code == 'NetConnection.Connect.Success') {
                clearInterval(this._player._conn_Id);
                this._nc_rtmpt.onStatus = null;
                this._nc_rtmpt.close();
                this._nc_rtmpt = null;
                this._player.startStream(this);
                this.popConnection();
              }
            };

            this._nc_rtmp.connect('rtmp:' + this._appUrl, this._streamName);
          }
          if (this._protocol == 'rtmpt' || this._protocol == 'rtmp' && this._port == null) {
            this._nc_rtmpt = new mx.controls.streamingmedia.RTMPConnection(this);
            this._nc_rtmpt.onStatus = function (info) {
              if (info.code == 'NetConnection.Connect.Success') {
                this._nc_rtmp.onStatus = null;
                this._nc_rtmp.close();
                this._nc_rtmp = null;
                this._player.startStream(this);
                this.popConnection();
              }
            };

            if (this._protocol == 'rtmpt') {
              this._nc_rtmpt.connect('rtmpt:' + this._appUrl, this._streamName);
            } else {
              clearInterval(this._conn_Id);
              this._conn_Id = setInterval(this, 'connectRtmpt', 3000);
            }
          }
        };

        v2.connectRtmpt = function () {
          clearInterval(this._conn_Id);
          this._nc_rtmpt.connect('rtmpt:' + this._appUrl, this._streamName);
        };

        v2.play = function (startingPoint) {
          this.setPlaying(true);
          if (startingPoint != null) {
            this._playHeadPos = startingPoint;
          }
          if (this._isLoading || !this._isLoaded) {
            this._isPlayPending = true;
            if (!this._isLoaded) {
              this.load();
            }
            return undefined;
          }
          this._isPlayPending = false;
          this._isPausing = false;
          this._ns.pause(false);
          this._ns.seek(this._playHeadPos);
        };

        v2.pause = function () {
          if (!this._isPausing) {
            this._ns.pause(true);
            this._isPausing = true;
            this._isPlayPending = false;
            this._playHeadPos = this._ns.time;
            this.setPlaying(false);
          }
        };

        v2.stop = function () {
          this.pause();
          this.setPlayheadTime(0);
        };

        v2.getPlayheadTime = function () {
          return this._ns.time;
        };

        v2.setPlayheadTime = function (position) {
          this._playHeadPos = position;
          if (!this._isSeeking) {
            this._ns.seek(position);
            this.setSeeking(true);
          }
          if (mx.controls.streamingmedia.StreamingMediaConstants.SCRUBBING) {
          } else {
            if (!this.isPlaying()) {
              this._ns.pause(false);
              clearInterval(this._momentaryPlayId);
              this._momentaryPlayId = setInterval(this, 'doneUpdateFrame', 50);
            }
          }
        };

        v2.doneUpdateFrame = function () {
          clearInterval(this._momentaryPlayId);
          this._momentaryPlayId = null;
          this._ns.pause(true);
        };

        v2.playStopped = function () {
          this._statusCount = 2;
          clearInterval(this._checkCompleteId);
          this._checkCompleteId = setInterval(this, 'checkComplete', 50);
        };

        v2.checkComplete = function () {
          if (this._ns.bufferLength <= 0.001) {
            if (this._statusCount <= 0) {
              clearInterval(this._checkCompleteId);
              this._checkCompleteId = null;
              this.pause();
              this.broadcastEvent('complete');
            } else {
              this._statusCount -= 1;
            }
          }
        };

        v2.getMediaUrl = function () {
          return this._mediaUrl;
        };

        v2.setMediaUrl = function (aUrl) {
          this._mediaUrl = aUrl;
          this._isLoaded = false;
          var v3 = this.isPlaying();
          var v2 = this.getVolume();
          this.close();
          this.init();
          this.setVolume(v2);
          if (v3) {
            this.play(0);
          } else {
            this.load();
          }
        };

        v2.getVolume = function () {
          return this._sound.getVolume();
        };

        v2.setVolume = function (aVol) {
          this._sound.setVolume(aVol);
        };

        v2.getMediaBytesLoaded = function () {
          return this._ns.bytesLoaded;
        };

        v2.getMediaBytesTotal = function () {
          return this._ns.bytesTotal;
        };

        v2.getTotalTime = function () {
          return this._totalTime;
        };

        v2.setTotalTime = function (aTime) {
          this._totalTime = aTime;
        };

        v2.mediaLoaded = function () {};

        v2.logError = function (error) {};

        v2.isSizeSet = function () {
          if (this._video.width > 0 && this._video.height > 0) {
            return true;
          }
          return false;
        };

        v2.isSizeChange = function () {
          if (this._video.width != this._videoWidth || this._video.height != this._videoHeight) {
            this._videoWidth = this._video.width;
            this._videoHeight = this._video.height;
            return true;
          }
          return false;
        };

        v2.setSeeking = function (isSeeking) {
          this._isSeeking = isSeeking;
        };

        ASSetPropFlags(mx.controls.streamingmedia.RTMPPlayer.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 218 __Packages.mx.controls.streamingmedia.RTMPConnection {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.RTMPConnection) {
        var v1 = function (player) {
          super();
          this._player = player;
        };

        mx.controls.streamingmedia.RTMPConnection = v1;
        var v2 = new NetConnection();
        mx.controls.streamingmedia.RTMPConnection.prototype = v2;
        v2.onMetaData = function (info) {
          this._player.setTotalTime(info.duration);
        };

        v2.connect = function (targetURI, streamName) {
          if (mx.controls.streamingmedia.RTMPConnection._connectFlag == true) {
            this.pushConnection(targetURI, streamName);
            return undefined;
          }
          mx.controls.streamingmedia.RTMPConnection._connectFlag = true;
          super.connect(targetURI, streamName);
          this.popConnection();
        };

        v2.pushConnection = function (targetURI, streamName) {
          this._targetURI = targetURI;
          this._streamName = streamName;
          mx.controls.streamingmedia.RTMPConnection._connectorQueue.push(this);
        };

        v2.popConnection = function () {
          mx.controls.streamingmedia.RTMPConnection._connectFlag = false;
          if (mx.controls.streamingmedia.RTMPConnection._connectorQueue.length != 0) {
            var v1 = mx.controls.streamingmedia.RTMPConnection._connectorQueue.pop();
            v1.connect(v1._targetURI, v1._streamName);
          }
        };

        v1._connectorQueue = new Array();
        ASSetPropFlags(mx.controls.streamingmedia.RTMPConnection.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 219 __Packages.mx.controls.streamingmedia.PlayerNetStream {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.PlayerNetStream) {
        var v1 = function (nc, aPlayer) {
          super(nc);
          this.setPlayer(aPlayer);
        };

        mx.controls.streamingmedia.PlayerNetStream = v1;
        var v2 = new NetStream();
        mx.controls.streamingmedia.PlayerNetStream.prototype = v2;
        v2.getPlayer = function () {
          return this._player;
        };

        v2.__get__player = function () {
          return this.getPlayer();
        };

        v2.setPlayer = function (aPlayer) {
          this._player = aPlayer;
        };

        v2.__set__player = function (aPlayer) {
          this.setPlayer(aPlayer);
          return this.__get__player();
        };

        v2.pause = function (shouldPause) {
          super.pause(shouldPause);
        };

        v2.setBufferTime = function (time) {
          super.setBufferTime(time);
        };

        v2.play = function (name, st, len, reset) {
          super.play(name, st, len, reset);
        };

        v2.seek = function (offset) {
          super.seek(offset);
        };

        v2.close = function () {
          super.close();
        };

        v2.attachAudio = function (theMicrophone) {
          super.attachAudio(theMicrophone);
        };

        v2.attachVideo = function (theCamera, snapshotMilliseconds) {
          super.attachVideo(theCamera, snapshotMilliseconds);
        };

        v2.onStatus = function (info) {
          var v2 = this.getPlayer();
          switch (info.code) {
            case 'NetStream.Buffer.Full':
              break;
            case 'NetStream.Play.Start':
              this.detectedFirstBuffer = false;
              clearInterval(this.initId);
              this.checkSizeInterval = 10;
              this.initId = setInterval(this, 'detect', this.checkSizeInterval);
              break;
            case 'NetStream.Pause.Notify':
              break;
            case 'NetStream.Play.Stop':
              clearInterval(this.initId);
              v2.playStopped();
              break;
            case 'NetStream.Play.Failed':
            case 'NetStream.Play.StreamNotFound':
              var v3;
              v3 = 'Error playing URL: ' + info.description;
              v2.logError(v3);
              break;
            case 'NetStream.Seek.Notify':
              v2.setSeeking(false);
          }
        };

        v2.detect = function () {
          var v2 = this.getPlayer();
          if (!this.detectedFirstBuffer && v2.isSizeSet()) {
            this.detectedFirstBuffer = true;
            v2.bufferIsFull();
          }
          if (v2.isSizeChange()) {
            v2.resizeVideo();
          }
          clearInterval(this.initId);
          this.checkSizeInterval *= 2;
          this.initId = setInterval(this, 'detect', this.checkSizeInterval);
        };

        v2.onMetaData = function (info) {
          var v2 = this.getPlayer();
          if (v2 instanceof mx.controls.streamingmedia.FLVPlayer) {
            var v3 = v2;
            v3.setTotalTime(info.duration);
          } else {
            if (v2 instanceof mx.controls.streamingmedia.RTMPPlayer) {
              var v4 = v2;
              v4.setTotalTime(info.duration);
            }
          }
        };

        v2.addProperty('player', v2.__get__player, v2.__set__player);
        ASSetPropFlags(mx.controls.streamingmedia.PlayerNetStream.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 220 __Packages.mx.controls.streamingmedia.FLVPlayer {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.FLVPlayer) {
        var v1 = function (aMediaUrl, aVideoHolder, aTotalTime) {
          super();
          if (aMediaUrl == null || aVideoHolder == null || aTotalTime == null) {
          }
          this._mediaUrl = aMediaUrl;
          this._videoHolder = aVideoHolder;
          this._video = this._videoHolder._video;
          this._totalTime = aTotalTime;
          this.init();
        };

        mx.controls.streamingmedia.FLVPlayer = v1;
        var v2 = new mx.controls.streamingmedia.AbstractPlayer();
        mx.controls.streamingmedia.FLVPlayer.prototype = v2;
        v2.init = function () {
          this._listeners = new Array();
          this.setPlaying(false);
          this._isLoaded = false;
          this._sound = new Sound(this._videoHolder);
          this.setVolume(mx.controls.streamingmedia.StreamingMediaConstants.DEFAULT_VOLUME);
        };

        v2.addListener = function (aListener) {
          this._listeners.push(aListener);
        };

        v2.removeAllListeners = function () {
          this._listeners.length = 0;
        };

        v2.broadcastEvent = function (status) {
          var v2 = 0;
          while (v2 < this._listeners.length) {
            this._listeners[v2].handlePlayer(this, status);
            ++v2;
          }
        };

        v2.bufferIsFull = function () {
          this.broadcastEvent('start');
          if (!this.isPlaying()) {
            this.pause();
          }
        };

        v2.resizeVideo = function () {
          this.broadcastEvent('resizeVideo');
          if (!this.isPlaying()) {
            this.pause();
          }
        };

        v2.toString = function () {
          return 'FLVPlayer: Playing ' + this.getMediaUrl();
        };

        v2.close = function () {
          this._ns.close();
          this._nc.close();
          this._video.clear();
        };

        v2.load = function () {
          this._nc = new NetConnection();
          this._nc.connect(null);
          this._ns = new mx.controls.streamingmedia.PlayerNetStream(this._nc, this);
          this.assignBufferTime();
          this._video.attachVideo(this._ns);
          this._videoHeight = this._video.height;
          this._videoWidth = this._video.width;
          this._videoHolder.attachAudio(this._ns);
          this._ns.play(this._mediaUrl);
          this._isLoaded = true;
          this._videoHolder._visible = false;
          this.setPlaying(false);
        };

        v2.assignBufferTime = function () {
          var v2 = this._totalTime / 4;
          if (v2 < 0.1) {
            v2 = 0.1;
          } else {
            if (v2 > 5) {
              v2 = 5;
            }
          }
          this._ns.setBufferTime(v2);
        };

        v2.play = function (startingPoint) {
          if (!this._isLoaded) {
            this.load();
          }
          if (startingPoint != null) {
            this._ns.seek(startingPoint);
          }
          this._ns.pause(false);
          this.setPlaying(true);
        };

        v2.pause = function () {
          this._ns.pause(true);
          this.setPlaying(false);
        };

        v2.stop = function () {
          this.pause();
          this.setPlayheadTime(0);
        };

        v2.getPlayheadTime = function () {
          return this._ns.time;
        };

        v2.setPlayheadTime = function (position) {
          this._ns.seek(position);
          if (mx.controls.streamingmedia.StreamingMediaConstants.SCRUBBING) {
          } else {
            if (!this.isPlaying()) {
              this._ns.pause(false);
              this._momentaryPlayId = setInterval(this, 'doneUpdateFrame', 50);
            }
          }
        };

        v2.doneUpdateFrame = function () {
          clearInterval(this._momentaryPlayId);
          this._momentaryPlayId = null;
          this._ns.pause(true);
        };

        v2.playStopped = function () {
          this.pause();
          this.broadcastEvent('complete');
        };

        v2.getMediaUrl = function () {
          return this._mediaUrl;
        };

        v2.setMediaUrl = function (aUrl) {
          this._mediaUrl = aUrl;
          this._isLoaded = false;
          if (this.isPlaying()) {
            this.play(0);
          } else {
            this.load();
          }
        };

        v2.getVolume = function () {
          return this._sound.getVolume();
        };

        v2.setVolume = function (aVol) {
          this._sound.setVolume(aVol);
        };

        v2.getMediaBytesLoaded = function () {
          return this._ns.bytesLoaded;
        };

        v2.getMediaBytesTotal = function () {
          return this._ns.bytesTotal;
        };

        v2.getTotalTime = function () {
          return this._totalTime;
        };

        v2.setTotalTime = function (aTime) {
          this._totalTime = aTime;
          this.assignBufferTime();
        };

        v2.mediaLoaded = function () {};

        v2.logError = function (error) {};

        v2.isSizeSet = function () {
          if (this._video.width > 0 && this._video.height > 0) {
            return true;
          }
          return false;
        };

        v2.isSizeChange = function () {
          if (this._video.width != this._videoWidth || this._video.height != this._videoHeight) {
            this._videoWidth = this._video.width;
            this._videoHeight = this._video.height;
            return true;
          }
          return false;
        };

        v2.setSeeking = function (isSeeking) {};

        ASSetPropFlags(mx.controls.streamingmedia.FLVPlayer.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 221 __Packages.mx.controls.streamingmedia.MP3Player {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.MP3Player) {
        var v1 = function (aMediaUrl, aSoundHolder) {
          super();
          if (aMediaUrl == null || aSoundHolder == null) {
          }
          this._mediaUrl = aMediaUrl;
          this._soundHolder = aSoundHolder;
          this.init();
        };

        mx.controls.streamingmedia.MP3Player = v1;
        var v2 = new mx.controls.streamingmedia.AbstractPlayer();
        mx.controls.streamingmedia.MP3Player.prototype = v2;
        v2.willStop = function () {
          return this._positionOnLoad == mx.controls.streamingmedia.MP3Player.STOP;
        };

        v2.init = function () {
          this._listeners = new Array();
          this._sound = new Sound(this._soundHolder);
          this._volume = mx.controls.streamingmedia.StreamingMediaConstants.DEFAULT_VOLUME;
          var v4 = Object(this._sound);
          v4.player = this;
          this._sound.onSoundComplete = function () {
            var v3 = Object(this);
            var v2 = v3.player;
            v2.setPlaying(false);
            v2.broadcastEvent('complete');
          };

          this._recentPosition = 0;
          this._loaded = false;
          this._positionOnLoad = mx.controls.streamingmedia.MP3Player.STOP;
          this.setPlaying(false);
        };

        v2.playStarted = function () {
          this._loaded = true;
          this.initializeVolume();
          if (this._positionOnLoad == mx.controls.streamingmedia.MP3Player.STOP) {
            this.stop();
          } else {
            this.play(this._positionOnLoad);
          }
        };

        v2.addListener = function (aListener) {
          this._listeners.push(aListener);
        };

        v2.removeAllListeners = function () {
          this._listeners.length = 0;
        };

        v2.broadcastEvent = function (status) {
          var v2 = 0;
          while (v2 < this._listeners.length) {
            this._listeners[v2].handlePlayer(this, status);
            ++v2;
          }
        };

        v2.load = function () {
          this.setPlaying(true);
          this._positionOnLoad = mx.controls.streamingmedia.MP3Player.STOP;
          this._sound.loadSound(this._mediaUrl, true);
          this._sound.setVolume(0);
        };

        v2.play = function (startingPoint) {
          if (startingPoint == null) {
            startingPoint = this._recentPosition;
          }
          if (this._loaded) {
            this._sound.start(startingPoint);
          } else {
            this._positionOnLoad = startingPoint;
            this._sound.loadSound(this._mediaUrl, true);
            this._sound.setVolume(0);
          }
          this.setPlaying(true);
        };

        v2.pause = function () {
          this._recentPosition = this._sound.position / 1000;
          this._sound.stop();
          this.setPlaying(false);
        };

        v2.stop = function () {
          this._recentPosition = 0;
          this._sound.stop();
          this.setPlaying(false);
        };

        v2.getPlayheadTime = function () {
          if (!this.isPlaying()) {
            var v2 = this._recentPosition;
            return v2;
          }
          var v2 = this._sound.position / 1000;
          return v2;
        };

        v2.setPlayheadTime = function (aPosition) {
          this._recentPosition = aPosition;
          if (this.isPlaying()) {
            this.play(aPosition);
          }
        };

        v2.getMediaUrl = function () {
          return this._mediaUrl;
        };

        v2.setMediaUrl = function (aUrl) {
          this._loaded = false;
          this._mediaUrl = aUrl;
          if (this.isPlaying()) {
            this.play(0);
          } else {
            this._recentPosition = 0;
            this.load();
          }
        };

        v2.getVolume = function () {
          return this._volume;
        };

        v2.setVolume = function (aVol) {
          this._sound.setVolume(aVol);
          this._volume = aVol;
        };

        v2.initializeVolume = function () {
          this.setVolume(this._volume);
        };

        v2.getMediaBytesLoaded = function () {
          return this._sound.getBytesLoaded();
        };

        v2.getMediaBytesTotal = function () {
          return this._sound.getBytesTotal();
        };

        v2.getTotalTime = function () {
          var v2 = this._sound.duration * this._sound.getBytesTotal() / this._sound.getBytesLoaded();
          return v2 / 1000;
        };

        v2.bufferIsFull = function () {};

        v2.resizeVideo = function () {};

        v2.playStopped = function () {};

        v2.mediaLoaded = function () {};

        v2.close = function () {
          this._sound.stop();
        };

        v2.logError = function (error) {};

        v2.isSizeSet = function () {
          return false;
        };

        v2.isSizeChange = function () {
          return false;
        };

        v2.setSeeking = function (isSeeking) {};

        v1.STOP = -1;
        ASSetPropFlags(mx.controls.streamingmedia.MP3Player.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 222 __Packages.mx.skins.halo.Defaults {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.halo) {
        _global.mx.skins.halo = new Object();
      }
      if (!_global.mx.skins.halo.Defaults) {
        var v1 = function () {};

        mx.skins.halo.Defaults = v1;
        var v2 = v1.prototype;
        v1.setThemeDefaults = function () {
          var v2 = _global.style;
          v2.themeColor = 8453965;
          v2.disabledColor = 8684164;
          v2.modalTransparency = 0;
          v2.filled = true;
          v2.stroked = true;
          v2.strokeWidth = 1;
          v2.strokeColor = 0;
          v2.fillColor = 16777215;
          v2.repeatInterval = 35;
          v2.repeatDelay = 500;
          v2.fontFamily = '_sans';
          v2.fontSize = 12;
          v2.selectionColor = 13500353;
          v2.rollOverColor = 14942166;
          v2.useRollOver = true;
          v2.backgroundDisabledColor = 14540253;
          v2.selectionDisabledColor = 14540253;
          v2.selectionDuration = 200;
          v2.openDuration = 250;
          v2.borderStyle = 'inset';
          v2.color = 734012;
          v2.textSelectedColor = 24371;
          v2.textRollOverColor = 2831164;
          v2.textDisabledColor = 16777215;
          v2.vGridLines = true;
          v2.hGridLines = false;
          v2.vGridLineColor = 6710886;
          v2.hGridLineColor = 6710886;
          v2.headerColor = 15395562;
          v2.indentation = 17;
          v2.folderOpenIcon = 'TreeFolderOpen';
          v2.folderClosedIcon = 'TreeFolderClosed';
          v2.defaultLeafIcon = 'TreeNodeIcon';
          v2.disclosureOpenIcon = 'TreeDisclosureOpen';
          v2.disclosureClosedIcon = 'TreeDisclosureClosed';
          v2.popupDuration = 150;
          v2.todayColor = 6710886;
          _global.styles.ScrollSelectList = new mx.styles.CSSStyleDeclaration();
          v2 = _global.styles.ScrollSelectList;
          v2.backgroundColor = 16777215;
          v2.borderColor = 13290186;
          v2.borderStyle = 'inset';
          _global.styles.ComboBox = new mx.styles.CSSStyleDeclaration();
          v2 = _global.styles.ComboBox;
          v2.borderStyle = 'inset';
          _global.styles.NumericStepper = new mx.styles.CSSStyleDeclaration();
          v2 = _global.styles.NumericStepper;
          v2.textAlign = 'center';
          _global.styles.RectBorder = new mx.styles.CSSStyleDeclaration();
          v2 = _global.styles.RectBorder;
          v2.borderColor = 14015965;
          v2.buttonColor = 7305079;
          v2.shadowColor = 15658734;
          v2.highlightColor = 12897484;
          v2.shadowCapColor = 14015965;
          v2.borderCapColor = 9542041;
          var v4 = new Object();
          v4.borderColor = 16711680;
          v4.buttonColor = 16711680;
          v4.shadowColor = 16711680;
          v4.highlightColor = 16711680;
          v4.shadowCapColor = 16711680;
          v4.borderCapColor = 16711680;
          mx.core.UIComponent.prototype.origBorderStyles = v4;
          var v3;
          _global.styles.TextInput = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.TextInput;
          v3.backgroundColor = 16777215;
          v3.borderStyle = 'inset';
          _global.styles.TextArea = _global.styles.TextInput;
          _global.styles.Window = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.Window;
          v3.borderStyle = 'default';
          _global.styles.windowStyles = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.windowStyles;
          v3.fontWeight = 'bold';
          _global.styles.dataGridStyles = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.dataGridStyles;
          v3.fontWeight = 'bold';
          _global.styles.Alert = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.Alert;
          v3.borderStyle = 'alert';
          _global.styles.ScrollView = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.ScrollView;
          v3.borderStyle = 'inset';
          _global.styles.View = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.View;
          v3.borderStyle = 'none';
          _global.styles.ProgressBar = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.ProgressBar;
          v3.color = 11187123;
          v3.fontWeight = 'bold';
          _global.styles.AccordionHeader = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.AccordionHeader;
          v3.fontWeight = 'bold';
          v3.fontSize = '11';
          _global.styles.Accordion = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.Accordion;
          v3.borderStyle = 'solid';
          v3.backgroundColor = 16777215;
          v3.borderColor = 9081738;
          v3.headerHeight = 22;
          v3.marginBottom = -1;
          v3.marginTop = -1;
          v3.marginRight = -1;
          v3.marginLeft = -1;
          v3.verticalGap = -1;
          _global.styles.DateChooser = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.DateChooser;
          v3.borderColor = 9542041;
          v3.headerColor = 16777215;
          _global.styles.CalendarLayout = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.CalendarLayout;
          v3.fontSize = 10;
          v3.textAlign = 'right';
          v3.color = 2831164;
          _global.styles.WeekDayStyle = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.WeekDayStyle;
          v3.fontWeight = 'bold';
          v3.fontSize = 11;
          v3.textAlign = 'center';
          v3.color = 2831164;
          _global.styles.TodayStyle = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.TodayStyle;
          v3.color = 16777215;
          _global.styles.HeaderDateText = new mx.styles.CSSStyleDeclaration();
          v3 = _global.styles.HeaderDateText;
          v3.fontSize = 12;
          v3.fontWeight = 'bold';
          v3.textAlign = 'center';
        };

        v2.drawRoundRect = function (x, y, w, h, r, c, alpha, rot, gradient, ratios) {
          if (typeof r == 'object') {
            var v18 = r.br;
            var v16 = r.bl;
            var v15 = r.tl;
            var v10 = r.tr;
          } else {
            var v10 = r;
            var v15 = v10;
            var v16 = v15;
            var v18 = v16;
          }
          if (typeof c == 'object') {
            if (typeof alpha != 'object') {
              var v9 = [alpha, alpha];
            } else {
              var v9 = alpha;
            }
            if (ratios == undefined) {
              ratios = [0, 255];
            }
            var v14 = h * 0.7;
            if (typeof rot != 'object') {
              var v11 = {'matrixType': 'box', 'x': -v14, 'y': v14, 'w': w * 2, 'h': h * 4, 'r': rot * 0.0174532925199433};
            } else {
              var v11 = rot;
            }
            if (gradient == 'radial') {
              this.beginGradientFill('radial', c, v9, ratios, v11);
            } else {
              this.beginGradientFill('linear', c, v9, ratios, v11);
            }
          } else {
            if (c != undefined) {
              this.beginFill(c, alpha);
            }
          }
          r = v18;
          var v13 = r - r * Math.SQRT1_2;
          var v12 = r - r * 0.414213562373095;
          this.moveTo(x + w, y + h - r);
          this.lineTo(x + w, y + h - r);
          this.curveTo(x + w, y + h - v12, x + w - v13, y + h - v13);
          this.curveTo(x + w - v12, y + h, x + w - r, y + h);
          r = v16;
          v13 = r - r * Math.SQRT1_2;
          v12 = r - r * 0.414213562373095;
          this.lineTo(x + r, y + h);
          this.curveTo(x + v12, y + h, x + v13, y + h - v13);
          this.curveTo(x, y + h - v12, x, y + h - r);
          r = v15;
          v13 = r - r * Math.SQRT1_2;
          v12 = r - r * 0.414213562373095;
          this.lineTo(x, y + r);
          this.curveTo(x, y + v12, x + v13, y + v13);
          this.curveTo(x + v12, y, x + r, y);
          r = v10;
          v13 = r - r * Math.SQRT1_2;
          v12 = r - r * 0.414213562373095;
          this.lineTo(x + w - r, y);
          this.curveTo(x + w - v12, y, x + w - v13, y + v13);
          this.curveTo(x + w, y + v12, x + w, y + r);
          this.lineTo(x + w, y + h - r);
          if (c != undefined) {
            this.endFill();
          }
        };

        v1.classConstruct = function () {
          mx.core.ext.UIObjectExtensions.Extensions();
          mx.skins.halo.Defaults.setThemeDefaults();
          mx.core.UIObject.prototype.drawRoundRect = mx.skins.halo.Defaults.prototype.drawRoundRect;
          return true;
        };

        v1.classConstructed = mx.skins.halo.Defaults.classConstruct();
        v1.CSSStyleDeclarationDependency = mx.styles.CSSStyleDeclaration;
        v1.UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
        v1.UIObjectDependency = mx.core.UIObject;
        ASSetPropFlags(mx.skins.halo.Defaults.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 223 __Packages.mx.skins.halo.FocusRect {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.halo) {
        _global.mx.skins.halo = new Object();
      }
      if (!_global.mx.skins.halo.FocusRect) {
        var v1 = function () {
          super();
          this.boundingBox_mc._visible = false;
          this.boundingBox_mc._height = 0;
          this.boundingBox_mc._width = 0;
        };

        mx.skins.halo.FocusRect = v1;
        var v2 = new mx.skins.SkinElement();
        mx.skins.halo.FocusRect.prototype = v2;
        v2.draw = function (o) {
          o.adjustFocusRect();
        };

        v2.setSize = function (w, h, r, a, rectCol) {
          this._yscale = 100;
          this._xscale = 100;
          this.clear();
          if (typeof r == 'object') {
            r.br = r.br > 2 ? r.br - 2 : 0;
            r.bl = r.bl > 2 ? r.bl - 2 : 0;
            r.tr = r.tr > 2 ? r.tr - 2 : 0;
            r.tl = r.tl > 2 ? r.tl - 2 : 0;
            this.beginFill(rectCol, a * 0.3);
            this.drawRoundRect(0, 0, w, h, r);
            this.drawRoundRect(2, 2, w - 4, h - 4, r);
            this.endFill();
            r.br = r.br > 1 ? r.br + 1 : 0;
            r.bl = r.bl > 1 ? r.bl + 1 : 0;
            r.tr = r.tr > 1 ? r.tr + 1 : 0;
            r.tl = r.tl > 1 ? r.tl + 1 : 0;
            this.beginFill(rectCol, a * 0.3);
            this.drawRoundRect(1, 1, w - 2, h - 2, r);
            r.br = r.br > 1 ? r.br - 1 : 0;
            r.bl = r.bl > 1 ? r.bl - 1 : 0;
            r.tr = r.tr > 1 ? r.tr - 1 : 0;
            r.tl = r.tl > 1 ? r.tl - 1 : 0;
            this.drawRoundRect(2, 2, w - 4, h - 4, r);
            this.endFill();
          } else {
            var v5;
            if (r != 0) {
              v5 = r - 2;
            } else {
              v5 = 0;
            }
            this.beginFill(rectCol, a * 0.3);
            this.drawRoundRect(0, 0, w, h, r);
            this.drawRoundRect(2, 2, w - 4, h - 4, v5);
            this.endFill();
            this.beginFill(rectCol, a * 0.3);
            if (r != 0) {
              v5 = r - 2;
              r -= 1;
            } else {
              v5 = 0;
              r = 0;
            }
            this.drawRoundRect(1, 1, w - 2, h - 2, r);
            this.drawRoundRect(2, 2, w - 4, h - 4, v5);
            this.endFill();
          }
        };

        v2.handleEvent = function (e) {
          if (e.type == 'unload') {
            this._visible = true;
          } else {
            if (e.type == 'resize') {
              e.target.adjustFocusRect();
            } else {
              if (e.type == 'move') {
                e.target.adjustFocusRect();
              }
            }
          }
        };

        v1.classConstruct = function () {
          mx.core.UIComponent.prototype.drawFocus = function (focused) {
            var v2 = this._parent.focus_mc;
            if (!focused) {
              v2._visible = false;
              this.removeEventListener('unload', v2);
              this.removeEventListener('move', v2);
              this.removeEventListener('resize', v2);
            } else {
              if (v2 == undefined) {
                v2 = this._parent.createChildAtDepth('FocusRect', mx.managers.DepthManager.kTop);
                v2.tabEnabled = false;
                this._parent.focus_mc = v2;
              } else {
                v2._visible = true;
              }
              v2.draw(this);
              if (v2.getDepth() < this.getDepth()) {
                v2.setDepthAbove(this);
              }
              this.addEventListener('unload', v2);
              this.addEventListener('move', v2);
              this.addEventListener('resize', v2);
            }
          };

          mx.core.UIComponent.prototype.adjustFocusRect = function () {
            var v2 = this.getStyle('themeColor');
            if (v2 == undefined) {
              v2 = 8453965;
            }
            var v3 = this._parent.focus_mc;
            v3.setSize(this.width + 4, this.height + 4, 0, 100, v2);
            v3.move(this.x - 2, this.y - 2);
          };

          TextField.prototype.drawFocus = mx.core.UIComponent.prototype.drawFocus;
          TextField.prototype.adjustFocusRect = mx.core.UIComponent.prototype.adjustFocusRect;
          mx.skins.halo.FocusRect.prototype.drawRoundRect = mx.skins.halo.Defaults.prototype.drawRoundRect;
          return true;
        };

        v1.classConstructed = mx.skins.halo.FocusRect.classConstruct();
        v1.DefaultsDependency = mx.skins.halo.Defaults;
        v1.UIComponentDependency = mx.core.UIComponent;
        ASSetPropFlags(mx.skins.halo.FocusRect.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 224 __Packages.mx.controls.streamingmedia.ToEndButton {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.ToEndButton) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.ToEndButton = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.ToEndButton.prototype = v2;
        v2.init = function () {
          this.attachMovie('SimpleButton', 'toEndSimpleButton', 1, {'falseUpSkin': 'ToEnd-False-Up', 'falseOverSkin': 'ToEnd-False-Over', 'falseDownSkin': 'ToEnd-False-Down', 'falseDisabledSkin': 'ToEnd-False-Disabled'});
          this.toEndSimpleButton.addEventListener('click', this);
          var v2 = this._parent._parent;
          v2.evaluateToEnd();
          this.tabEnabled = false;
          this.tabChildren = true;
        };

        v2.__get__enabled = function () {
          return this.toEndSimpleButton.enabled;
        };

        v2.__set__enabled = function (is) {
          this.toEndSimpleButton.enabled = is;
          return this.__get__enabled();
        };

        v2.click = function (ev) {
          var v2 = this._parent._parent;
          mx.controls.streamingmedia.Tracer.trace('ToEndButton.click: playAtBeginning=false');
          v2.playAtBeginning = false;
          v2.broadcastEvent('playheadChange', 100);
        };

        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        ASSetPropFlags(mx.controls.streamingmedia.ToEndButton.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 225 __Packages.mx.controls.streamingmedia.ToStartButton {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.ToStartButton) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.ToStartButton = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.ToStartButton.prototype = v2;
        v2.init = function () {
          this.attachMovie('SimpleButton', 'toStartSimpleButton', 1, {'falseUpSkin': 'ToStart-False-Up', 'falseOverSkin': 'ToStart-False-Over', 'falseDownSkin': 'ToStart-False-Down', 'falseDisabledSkin': 'ToStart-False-Disabled'});
          this.toStartSimpleButton.addEventListener('click', this);
          var v2 = this._parent._parent;
          this.__set__enabled(v2.enabled);
          this.tabEnabled = false;
          this.tabChildren = true;
        };

        v2.__get__enabled = function () {
          return this.toStartSimpleButton.enabled;
        };

        v2.__set__enabled = function (is) {
          this.toStartSimpleButton.enabled = is;
          return this.__get__enabled();
        };

        v2.click = function (ev) {
          this._parent._parent.broadcastEvent('playheadChange', 0);
        };

        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        ASSetPropFlags(mx.controls.streamingmedia.ToStartButton.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 226 __Packages.mx.controls.Button {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.Button) {
        var v1 = function () {
          super();
        };

        mx.controls.Button = v1;
        var v2 = new mx.controls.SimpleButton();
        mx.controls.Button.prototype = v2;
        v2.init = function (Void) {
          super.init();
        };

        v2.draw = function () {
          if (this.initializing) {
            this.labelPath.visible = true;
          }
          super.draw();
          if (this.initIcon != undefined) {
            this._setIcon(this.initIcon);
          }
          delete this.initIcon;
        };

        v2.onRelease = function (Void) {
          super.onRelease();
        };

        v2.createChildren = function (Void) {
          super.createChildren();
        };

        v2.setSkin = function (tag, linkageName, initobj) {
          return super.setSkin(tag, linkageName, initobj);
        };

        v2.viewSkin = function (varName) {
          var v3 = this.getState() ? 'true' : 'false';
          v3 += this.enabled ? this.phase : 'disabled';
          super.viewSkin(varName, {'styleName': this, 'borderStyle': v3});
        };

        v2.invalidateStyle = function (c) {
          this.labelPath.invalidateStyle(c);
          super.invalidateStyle(c);
        };

        v2.setColor = function (c) {
          var v2 = 0;
          while (v2 < 8) {
            this[this.idNames[v2]].redraw(true);
            ++v2;
          }
        };

        v2.setEnabled = function (enable) {
          this.labelPath.enabled = enable;
          super.setEnabled(enable);
        };

        v2.calcSize = function (tag, ref) {
          if (this.__width == undefined || this.__height == undefined) {
            return undefined;
          }
          if (tag < 7) {
            ref.setSize(this.__width, this.__height, true);
          }
        };

        v2.size = function (Void) {
          this.setState(this.getState());
          this.setHitArea(this.__width, this.__height);
          var v3 = 0;
          while (v3 < 8) {
            var v4 = this.idNames[v3];
            if (typeof this[v4] == 'movieclip') {
              this[v4].setSize(this.__width, this.__height, true);
            }
            ++v3;
          }
          super.size();
        };

        v2.__set__labelPlacement = function (val) {
          this.__labelPlacement = val;
          this.invalidate();
          return this.__get__labelPlacement();
        };

        v2.__get__labelPlacement = function () {
          return this.__labelPlacement;
        };

        v2.getLabelPlacement = function (Void) {
          return this.__labelPlacement;
        };

        v2.setLabelPlacement = function (val) {
          this.__labelPlacement = val;
          this.invalidate();
        };

        v2.getBtnOffset = function (Void) {
          if (this.getState()) {
            var v2 = this.btnOffset;
            return v2;
          }
          if (this.phase == 'down') {
            v2 = this.btnOffset;
            return v2;
          }
          v2 = 0;
          return v2;
        };

        v2.setView = function (offset) {
          var v16 = offset ? this.btnOffset : 0;
          var v12 = this.getLabelPlacement();
          var v7 = 0;
          var v6 = 0;
          var v9 = 0;
          var v8 = 0;
          var v5 = 0;
          var v4 = 0;
          var v3 = this.labelPath;
          var v2 = this.iconName;
          var v15 = v3.textWidth;
          var v14 = v3.textHeight;
          var v10 = this.__width - this.borderW - this.borderW;
          var v11 = this.__height - this.borderW - this.borderW;
          if (v2 != undefined) {
            v7 = v2._width;
            v6 = v2._height;
          }
          if (v12 == 'left' || v12 == 'right') {
            if (v3 != undefined) {
              v9 = Math.min(v10 - v7, v15 + 5);
              v3._width = v9;
              v8 = Math.min(v11, v14 + 5);
              v3._height = v8;
            }
            if (v12 == 'right') {
              v5 = v7;
              if (this.centerContent) {
                v5 += (v10 - v9 - v7) / 2;
              }
              v2._x = v5 - v7;
            } else {
              v5 = v10 - v9 - v7;
              if (this.centerContent) {
                v5 /= 2;
              }
              v2._x = v5 + v9;
            }
            v4 = 0;
            v2._y = v4;
            if (this.centerContent) {
              v2._y = (v11 - v6) / 2;
              v4 = (v11 - v8) / 2;
            }
            if (!this.centerContent) {
              v2._y += Math.max(0, (v8 - v6) / 2);
            }
          } else {
            if (v3 != undefined) {
              v9 = Math.min(v10, v15 + 5);
              v3._width = v9;
              v8 = Math.min(v11 - v6, v14 + 5);
              v3._height = v8;
            }
            v5 = (v10 - v9) / 2;
            v2._x = (v10 - v7) / 2;
            if (v12 == 'top') {
              v4 = v11 - v8 - v6;
              if (this.centerContent) {
                v4 /= 2;
              }
              v2._y = v4 + v8;
            } else {
              v4 = v6;
              if (this.centerContent) {
                v4 += (v11 - v8 - v6) / 2;
              }
              v2._y = v4 - v6;
            }
          }
          var v13 = this.borderW + v16;
          v3._x = v5 + v13;
          v3._y = v4 + v13;
          v2._x += v13;
          v2._y += v13;
        };

        v2.__set__label = function (lbl) {
          this.setLabel(lbl);
          return this.__get__label();
        };

        v2.setLabel = function (label) {
          if (label == '') {
            this.labelPath.removeTextField();
            this.refresh();
            return undefined;
          }
          if (this.labelPath == undefined) {
            var v2 = this.createLabel('labelPath', 200, label);
            v2._width = v2.textWidth + 5;
            v2._height = v2.textHeight + 5;
            if (this.initializing) {
              v2.visible = false;
            }
          } else {
            delete this.labelPath.__text;
            this.labelPath.text = label;
            this.refresh();
          }
        };

        v2.getLabel = function (Void) {
          return (this.labelPath.__text != undefined) ? this.labelPath.__text : this.labelPath.text;
        };

        v2.__get__label = function () {
          return this.getLabel();
        };

        v2._getIcon = function (Void) {
          return this._iconLinkageName;
        };

        v2.__get__icon = function () {
          if (this.initializing) {
            return this.initIcon;
          }
          return this._iconLinkageName;
        };

        v2._setIcon = function (linkage) {
          if (this.initializing) {
            if (linkage == '') {
              return undefined;
            }
            this.initIcon = linkage;
          } else {
            if (linkage == '') {
              this.removeIcons();
              return undefined;
            }
            super.changeIcon(0, linkage);
            super.changeIcon(1, linkage);
            super.changeIcon(3, linkage);
            super.changeIcon(4, linkage);
            super.changeIcon(5, linkage);
            this._iconLinkageName = linkage;
            this.refresh();
          }
        };

        v2.__set__icon = function (linkage) {
          this._setIcon(linkage);
          return this.__get__icon();
        };

        v2.setHitArea = function (w, h) {
          if (this.hitArea_mc == undefined) {
            this.createEmptyObject('hitArea_mc', 100);
          }
          var v2 = this.hitArea_mc;
          v2.clear();
          v2.beginFill(16711680);
          v2.drawRect(0, 0, w, h);
          v2.endFill();
          v2.setVisible(false);
        };

        v1.symbolName = 'Button';
        v1.symbolOwner = mx.controls.Button;
        v2.className = 'Button';
        v1.version = '2.0.2.127';
        v2.btnOffset = 0;
        v2._color = 'buttonColor';
        v2.__label = 'default value';
        v2.__labelPlacement = 'right';
        v2.falseUpSkin = 'ButtonSkin';
        v2.falseDownSkin = 'ButtonSkin';
        v2.falseOverSkin = 'ButtonSkin';
        v2.falseDisabledSkin = 'ButtonSkin';
        v2.trueUpSkin = 'ButtonSkin';
        v2.trueDownSkin = 'ButtonSkin';
        v2.trueOverSkin = 'ButtonSkin';
        v2.trueDisabledSkin = 'ButtonSkin';
        v2.falseUpIcon = '';
        v2.falseDownIcon = '';
        v2.falseOverIcon = '';
        v2.falseDisabledIcon = '';
        v2.trueUpIcon = '';
        v2.trueDownIcon = '';
        v2.trueOverIcon = '';
        v2.trueDisabledIcon = '';
        v2.clipParameters = {'labelPlacement': 1, 'icon': 1, 'toggle': 1, 'selected': 1, 'label': 1};
        v1.mergedClipParameters = mx.core.UIObject.mergeClipParameters(mx.controls.Button.prototype.clipParameters, mx.controls.SimpleButton.prototype.clipParameters);
        v2.centerContent = true;
        v2.borderW = 1;
        v2.addProperty('icon', v2.__get__icon, v2.__set__icon);
        v2.addProperty('label', v2.__get__label, v2.__set__label);
        v2.addProperty('labelPlacement', v2.__get__labelPlacement, v2.__set__labelPlacement);
        ASSetPropFlags(mx.controls.Button.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 227 __Packages.mx.controls.streamingmedia.PlayPauseButton {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.PlayPauseButton) {
        var v1 = function () {
          super();
          this.init();
        };

        mx.controls.streamingmedia.PlayPauseButton = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.PlayPauseButton.prototype = v2;
        v2.init = function () {
          this._controller = this._parent._parent;
          this.attachMovie('Button', '_playPauseButton', 1);
          this._playPauseButton.setSize(50, 22);
          this._playPauseButton._x = 0;
          this._playPauseButton._y = 0;
          this._playPauseButton.addEventListener('click', this);
          this._isPlaying = !this._controller.isPlaying();
          this.__set__enabled(this._controller.enabled);
          this.tabEnabled = false;
          this.tabChildren = true;
        };

        v2.showPlayButton = function () {
          mx.controls.streamingmedia.Tracer.trace('PlayPauseButton.showPlayButton');
          this._isPlaying = true;
          this.assignIcon();
        };

        v2.showPauseButton = function () {
          mx.controls.streamingmedia.Tracer.trace('PlayPauseButton.showPauseButton');
          this._isPlaying = false;
          this.assignIcon();
        };

        v2.__get__enabled = function () {
          return this._playPauseButton.enabled;
        };

        v2.__set__enabled = function (is) {
          this._playPauseButton.enabled = is;
          this.assignIcon();
          return this.__get__enabled();
        };

        v2.assignIcon = function () {
          var v3 = this.__get__enabled();
          var v5 = this._isPlaying;
          mx.controls.streamingmedia.Tracer.trace('PlayPauseButton.assignIcon: start: enabled=' + v3 + ', play=' + v5);
          var v2 = '';
          if (v5) {
            v2 = v3 ? 'icon.play' : 'icon.play-disabled';
          } else {
            v2 = v3 ? 'icon.pause' : 'icon.pause-disabled';
          }
          mx.controls.streamingmedia.Tracer.trace('PlayPauseButton.assignIcon: icon=' + v2);
          var v4 = this._playPauseButton.enabled;
          if (!v4) {
            this._playPauseButton.enabled = true;
          }
          this._playPauseButton.__set__icon(v2);
          if (!v4) {
            this._playPauseButton.enabled = false;
          }
          mx.controls.streamingmedia.Tracer.trace('PlayPauseButton.assignIcon: done');
        };

        v2.click = function (ev) {
          if (this._isPlaying) {
            this.playClick();
          } else {
            this.pauseClick();
          }
        };

        v2.playClick = function () {
          var v2 = this._controller;
          mx.controls.streamingmedia.Tracer.trace('PlayButton.click: playAtBeginning=' + v2.playAtBeginning);
          if (v2.playAtBeginning) {
            v2.broadcastEvent('playheadChange', 0);
            mx.controls.streamingmedia.Tracer.trace('PlayButton.click: playAtBeginning=false');
            v2.playAtBeginning = false;
          }
          v2.broadcastEvent('click', 'play');
          v2.setPlaying(true);
        };

        v2.pauseClick = function () {
          var v2 = this._controller;
          v2.broadcastEvent('click', 'pause');
          v2.setPlaying(false);
        };

        v2.addProperty('enabled', v2.__get__enabled, v2.__set__enabled);
        ASSetPropFlags(mx.controls.streamingmedia.PlayPauseButton.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 228 __Packages.mx.skins.halo.RectBorder {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.halo) {
        _global.mx.skins.halo = new Object();
      }
      if (!_global.mx.skins.halo.RectBorder) {
        var v1 = function () {
          super();
        };

        mx.skins.halo.RectBorder = v1;
        var v2 = new mx.skins.RectBorder();
        mx.skins.halo.RectBorder.prototype = v2;
        v2.init = function (Void) {
          this.borderWidths.default = 3;
          super.init();
        };

        v2.getBorderMetrics = function (Void) {
          if (this.offset == undefined) {
            var v3 = this.getStyle(this.borderStyleName);
            this.offset = this.borderWidths[v3];
          }
          if (this.getStyle(this.borderStyleName) == 'default' || this.getStyle(this.borderStyleName) == 'alert') {
            this.__borderMetrics = {'left': 3, 'top': 1, 'right': 3, 'bottom': 3};
            return this.__borderMetrics;
          }
          return super.getBorderMetrics();
        };

        v2.drawBorder = function (Void) {
          var v6 = _global.styles[this.className];
          if (v6 == undefined) {
            v6 = _global.styles.RectBorder;
          }
          var v5 = this.getStyle(this.borderStyleName);
          var v7 = this.getStyle(this.borderColorName);
          if (v7 == undefined) {
            v7 = v6[this.borderColorName];
          }
          var v8 = this.getStyle(this.backgroundColorName);
          if (v8 == undefined) {
            v8 = v6[this.backgroundColorName];
          }
          var v16 = this.getStyle('backgroundImage');
          if (v5 != 'none') {
            var v14 = this.getStyle(this.shadowColorName);
            if (v14 == undefined) {
              v14 = v6[this.shadowColorName];
            }
            var v13 = this.getStyle(this.highlightColorName);
            if (v13 == undefined) {
              v13 = v6[this.highlightColorName];
            }
            var v12 = this.getStyle(this.buttonColorName);
            if (v12 == undefined) {
              v12 = v6[this.buttonColorName];
            }
            var v11 = this.getStyle(this.borderCapColorName);
            if (v11 == undefined) {
              v11 = v6[this.borderCapColorName];
            }
            var v10 = this.getStyle(this.shadowCapColorName);
            if (v10 == undefined) {
              v10 = v6[this.shadowCapColorName];
            }
          }
          this.offset = this.borderWidths[v5];
          var v9 = this.offset;
          var v3 = this.__get__width();
          var v4 = this.__get__height();
          this.clear();
          this._color = undefined;
          if (v5 == 'none') {
          } else {
            if (v5 == 'inset') {
              this._color = this.colorList;
              this.draw3dBorder(v11, v12, v7, v13, v14, v10);
            } else {
              if (v5 == 'outset') {
                this._color = this.colorList;
                this.draw3dBorder(v11, v7, v12, v14, v13, v10);
              } else {
                if (v5 == 'alert') {
                  var v15 = this.getStyle('themeColor');
                  this.drawRoundRect(0, 5, v3, v4 - 5, 5, 6184542, 10);
                  this.drawRoundRect(1, 4, v3 - 2, v4 - 5, 4, [6184542, 6184542], 10, 0, 'radial');
                  this.drawRoundRect(2, 0, v3 - 4, v4 - 2, 3, [0, 14342874], 100, 0, 'radial');
                  this.drawRoundRect(2, 0, v3 - 4, v4 - 2, 3, v15, 50);
                  this.drawRoundRect(3, 1, v3 - 6, v4 - 4, 2, 16777215, 100);
                } else {
                  if (v5 == 'default') {
                    this.drawRoundRect(0, 5, v3, v4 - 5, {'tl': 5, 'tr': 5, 'br': 0, 'bl': 0}, 6184542, 10);
                    this.drawRoundRect(1, 4, v3 - 2, v4 - 5, {'tl': 4, 'tr': 4, 'br': 0, 'bl': 0}, [6184542, 6184542], 10, 0, 'radial');
                    this.drawRoundRect(2, 0, v3 - 4, v4 - 2, {'tl': 3, 'tr': 3, 'br': 0, 'bl': 0}, [12897484, 11844796], 100, 0, 'radial');
                    this.drawRoundRect(3, 1, v3 - 6, v4 - 4, {'tl': 2, 'tr': 2, 'br': 0, 'bl': 0}, 16777215, 100);
                  } else {
                    if (v5 == 'dropDown') {
                      this.drawRoundRect(0, 0, v3 + 1, v4, {'tl': 4, 'tr': 0, 'br': 0, 'bl': 4}, [13290186, 7895160], 100, -10, 'linear');
                      this.drawRoundRect(1, 1, v3 - 1, v4 - 2, {'tl': 3, 'tr': 0, 'br': 0, 'bl': 3}, 16777215, 100);
                    } else {
                      if (v5 == 'menuBorder') {
                        var v15 = this.getStyle('themeColor');
                        this.drawRoundRect(4, 4, v3 - 2, v4 - 3, 0, [6184542, 6184542], 10, 0, 'radial');
                        this.drawRoundRect(4, 4, v3 - 1, v4 - 2, 0, 6184542, 10);
                        this.drawRoundRect(0, 0, v3 + 1, v4, 0, [0, 14342874], 100, 250, 'linear');
                        this.drawRoundRect(0, 0, v3 + 1, v4, 0, v15, 50);
                        this.drawRoundRect(2, 2, v3 - 3, v4 - 4, 0, 16777215, 100);
                      } else {
                        if (v5 == 'comboNonEdit') {
                        } else {
                          this.beginFill(v7);
                          this.drawRect(0, 0, v3, v4);
                          this.drawRect(1, 1, v3 - 1, v4 - 1);
                          this.endFill();
                          this._color = this.borderColorName;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (v8 != undefined) {
            this.beginFill(v8);
            this.drawRect(v9, v9, this.__get__width() - v9, this.__get__height() - v9);
            this.endFill();
          }
        };

        v2.draw3dBorder = function (c1, c2, c3, c4, c5, c6) {
          var v3 = this.__get__width();
          var v2 = this.__get__height();
          this.beginFill(c1);
          this.drawRect(0, 0, v3, v2);
          this.drawRect(1, 0, v3 - 1, v2);
          this.endFill();
          this.beginFill(c2);
          this.drawRect(1, 0, v3 - 1, 1);
          this.endFill();
          this.beginFill(c3);
          this.drawRect(1, v2 - 1, v3 - 1, v2);
          this.endFill();
          this.beginFill(c4);
          this.drawRect(1, 1, v3 - 1, 2);
          this.endFill();
          this.beginFill(c5);
          this.drawRect(1, v2 - 2, v3 - 1, v2 - 1);
          this.endFill();
          this.beginFill(c6);
          this.drawRect(1, 2, v3 - 1, v2 - 2);
          this.drawRect(2, 2, v3 - 2, v2 - 2);
          this.endFill();
        };

        v1.classConstruct = function () {
          mx.core.ext.UIObjectExtensions.Extensions();
          _global.styles.rectBorderClass = mx.skins.halo.RectBorder;
          _global.skinRegistry.RectBorder = true;
          return true;
        };

        v1.symbolName = 'RectBorder';
        v1.symbolOwner = mx.skins.halo.RectBorder;
        v1.version = '2.0.2.127';
        v2.borderCapColorName = 'borderCapColor';
        v2.shadowCapColorName = 'shadowCapColor';
        v2.colorList = {'highlightColor': 0, 'borderColor': 0, 'buttonColor': 0, 'shadowColor': 0, 'borderCapColor': 0, 'shadowCapColor': 0};
        v2.borderWidths = {'none': 0, 'solid': 1, 'inset': 2, 'outset': 2, 'alert': 3, 'dropDown': 2, 'menuBorder': 2, 'comboNonEdit': 2};
        v1.classConstructed = mx.skins.halo.RectBorder.classConstruct();
        v1.UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
        ASSetPropFlags(mx.skins.halo.RectBorder.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 229 __Packages.mx.skins.halo.ButtonSkin {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.skins) {
        _global.mx.skins = new Object();
      }
      if (!_global.mx.skins.halo) {
        _global.mx.skins.halo = new Object();
      }
      if (!_global.mx.skins.halo.ButtonSkin) {
        var v1 = function () {
          super();
        };

        mx.skins.halo.ButtonSkin = v1;
        var v2 = new mx.skins.RectBorder();
        mx.skins.halo.ButtonSkin.prototype = v2;
        v2.init = function () {
          super.init();
        };

        v2.size = function () {
          this.drawHaloRect(this.__get__width(), this.__get__height());
        };

        v2.drawHaloRect = function (w, h) {
          var v6 = this.getStyle('borderStyle');
          var v4 = this.getStyle('themeColor');
          var v5 = this._parent.emphasized;
          this.clear();
          switch (v6) {
            case 'falseup':
              if (v5) {
                this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 9542041, 100);
                this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 75);
                this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16777215], 85, 0, 'radial');
                this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
                this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, v4, 75);
                this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
                this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, 16316664, 100);
              } else {
                this.drawRoundRect(0, 0, w, h, 5, 9542041, 100);
                this.drawRoundRect(1, 1, w - 2, h - 2, 4, [13291985, 16250871], 100, 0, 'radial');
                this.drawRoundRect(2, 2, w - 4, h - 4, 3, [9542041, 13818586], 100, 0, 'radial');
                this.drawRoundRect(3, 3, w - 6, h - 6, 2, 16777215, 100);
                this.drawRoundRect(3, 4, w - 6, h - 7, 2, 16316664, 100);
              }
              break;
            case 'falsedown':
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 9542041, 100);
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16579836], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, v4, 50);
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 40);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, v4, 20);
              break;
            case 'falserollover':
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 9542041, 100);
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 50);
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16777215], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, v4, 50);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, 16316664, 100);
              break;
            case 'falsedisabled':
              this.drawRoundRect(0, 0, w, h, 5, 13159628, 100);
              this.drawRoundRect(1, 1, w - 2, h - 2, 4, 15921906, 100);
              this.drawRoundRect(2, 2, w - 4, h - 4, 3, 13949401, 100);
              this.drawRoundRect(3, 3, w - 6, h - 6, 2, 15921906, 100);
              break;
            case 'trueup':
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 10066329, 100);
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16579836], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, v4, 50);
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 40);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, 16250871, 100);
              break;
            case 'truedown':
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 10066329, 100);
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16579836], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, v4, 50);
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 40);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, v4, 20);
              break;
            case 'truerollover':
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, 9542041, 100);
              this.drawRoundRect(this.__get__x(), this.__get__y(), w, h, 5, v4, 50);
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, [3355443, 16777215], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 1, this.__get__y() + 1, w - 2, h - 2, 4, v4, 40);
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, [0, 14342874], 100, 0, 'radial');
              this.drawRoundRect(this.__get__x() + 2, this.__get__y() + 2, w - 4, h - 4, 3, v4, 40);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 3, w - 6, h - 6, 2, 16777215, 100);
              this.drawRoundRect(this.__get__x() + 3, this.__get__y() + 4, w - 6, h - 7, 2, 16316664, 100);
              break;
            case 'truedisabled':
              this.drawRoundRect(0, 0, w, h, 5, 13159628, 100);
              this.drawRoundRect(1, 1, w - 2, h - 2, 4, 15921906, 100);
              this.drawRoundRect(2, 2, w - 4, h - 4, 3, 13949401, 100);
              this.drawRoundRect(3, 3, w - 6, h - 6, 2, 15921906, 100);
          }
        };

        v1.classConstruct = function () {
          mx.core.ext.UIObjectExtensions.Extensions();
          _global.skinRegistry.ButtonSkin = true;
          return true;
        };

        v1.symbolName = 'ButtonSkin';
        v1.symbolOwner = mx.skins.halo.ButtonSkin;
        v2.className = 'ButtonSkin';
        v2.backgroundColorName = 'buttonColor';
        v1.classConstructed = mx.skins.halo.ButtonSkin.classConstruct();
        v1.UIObjectExtensionsDependency = mx.core.ext.UIObjectExtensions;
        ASSetPropFlags(mx.skins.halo.ButtonSkin.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 230 __Packages.mx.controls.streamingmedia.HMiniPlayBarTray {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.HMiniPlayBarTray) {
        var v1 = function () {
          super();
        };

        mx.controls.streamingmedia.HMiniPlayBarTray = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.HMiniPlayBarTray.prototype = v2;
        v2.setWidth = function (aWidth) {
          this._middle._x = this._left._width;
          this._middle._width = aWidth - this._left._width - this._right._width;
          this._right._x = this._middle._x + this._middle._width;
        };

        v2.getHeight = function () {
          return this._left._height;
        };

        ASSetPropFlags(mx.controls.streamingmedia.HMiniPlayBarTray.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 231 __Packages.mx.controls.streamingmedia.HPlayBarTray {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.HPlayBarTray) {
        var v1 = function () {
          super();
        };

        mx.controls.streamingmedia.HPlayBarTray = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.HPlayBarTray.prototype = v2;
        v2.setWidth = function (aWidth) {
          this._middle._x = this._left._width;
          this._middle._width = aWidth - this._left._width - this._right._width;
          this._right._x = this._middle._x + this._middle._width;
        };

        ASSetPropFlags(mx.controls.streamingmedia.HPlayBarTray.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 232 __Packages.mx.controls.streamingmedia.VMiniPlayBarTray {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.VMiniPlayBarTray) {
        var v1 = function () {
          super();
        };

        mx.controls.streamingmedia.VMiniPlayBarTray = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.VMiniPlayBarTray.prototype = v2;
        v2.getHeight = function () {
          return this._bottom._y + this._bottom._height;
        };

        v2.setHeight = function (aHeight) {
          this._middle._y = this._top._height;
          this._middle._height = aHeight - this._top._height - this._bottom._height;
          this._bottom._y = this._middle._y + this._middle._height;
        };

        ASSetPropFlags(mx.controls.streamingmedia.VMiniPlayBarTray.prototype, null, 1);
      }
    #endinitclip
  }

  movieClip 233 __Packages.mx.controls.streamingmedia.VPlayBarTray {

    #initclip
      if (!_global.mx) {
        _global.mx = new Object();
      }
      if (!_global.mx.controls) {
        _global.mx.controls = new Object();
      }
      if (!_global.mx.controls.streamingmedia) {
        _global.mx.controls.streamingmedia = new Object();
      }
      if (!_global.mx.controls.streamingmedia.VPlayBarTray) {
        var v1 = function () {
          super();
        };

        mx.controls.streamingmedia.VPlayBarTray = v1;
        var v2 = new MovieClip();
        mx.controls.streamingmedia.VPlayBarTray.prototype = v2;
        v2.setHeight = function (aHeight) {
          this._middle._y = this._top._height;
          this._middle._height = aHeight - this._top._height - this._bottom._height;
          this._bottom._y = this._middle._y + this._middle._height;
        };

        ASSetPropFlags(mx.controls.streamingmedia.VPlayBarTray.prototype, null, 1);
      }
    #endinitclip
  }

  frame 2 {
    function Time() {
      _root.n = _root.CNum;
      num = _root.n;
      if (_root.n == 1000 || !_root.CNum) {
        _root.loader._visible = 1;
      } else {
        _root.loader._visible = 0;
      }
      updateAfterEvent();
    }

    stop();
    _root.loader._visible = 1;
    var n;
    setInterval(Time, 200);
    my_sound.onSoundComplete = function () {
      fscommand('EXIT');
      trace('声音结束');
      t = getTimer();
      trace(t);
    };

  }
}
